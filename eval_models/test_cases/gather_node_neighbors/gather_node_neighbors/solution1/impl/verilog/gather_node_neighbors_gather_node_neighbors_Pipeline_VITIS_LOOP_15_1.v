// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_15_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_in_degree,
        node_neighbors_0_address0,
        node_neighbors_0_ce0,
        node_neighbors_0_we0,
        node_neighbors_0_d0,
        trunc_ln,
        trunc_ln1,
        neighbor_table_0_address0,
        neighbor_table_0_ce0,
        neighbor_table_0_q0,
        neighbor_table_1_address0,
        neighbor_table_1_ce0,
        neighbor_table_1_q0,
        neighbor_table_2_address0,
        neighbor_table_2_ce0,
        neighbor_table_2_q0,
        neighbor_table_3_address0,
        neighbor_table_3_ce0,
        neighbor_table_3_q0,
        node_neighbors_1_address0,
        node_neighbors_1_ce0,
        node_neighbors_1_we0,
        node_neighbors_1_d0,
        node_neighbors_2_address0,
        node_neighbors_2_ce0,
        node_neighbors_2_we0,
        node_neighbors_2_d0,
        node_neighbors_3_address0,
        node_neighbors_3_ce0,
        node_neighbors_3_we0,
        node_neighbors_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] node_in_degree;
output  [8:0] node_neighbors_0_address0;
output   node_neighbors_0_ce0;
output   node_neighbors_0_we0;
output  [31:0] node_neighbors_0_d0;
input  [9:0] trunc_ln;
input  [1:0] trunc_ln1;
output  [7:0] neighbor_table_0_address0;
output   neighbor_table_0_ce0;
input  [31:0] neighbor_table_0_q0;
output  [7:0] neighbor_table_1_address0;
output   neighbor_table_1_ce0;
input  [31:0] neighbor_table_1_q0;
output  [7:0] neighbor_table_2_address0;
output   neighbor_table_2_ce0;
input  [31:0] neighbor_table_2_q0;
output  [7:0] neighbor_table_3_address0;
output   neighbor_table_3_ce0;
input  [31:0] neighbor_table_3_q0;
output  [8:0] node_neighbors_1_address0;
output   node_neighbors_1_ce0;
output   node_neighbors_1_we0;
output  [31:0] node_neighbors_1_d0;
output  [8:0] node_neighbors_2_address0;
output   node_neighbors_2_ce0;
output   node_neighbors_2_we0;
output  [31:0] node_neighbors_2_d0;
output  [8:0] node_neighbors_3_address0;
output   node_neighbors_3_ce0;
output   node_neighbors_3_we0;
output  [31:0] node_neighbors_3_d0;

reg ap_idle;
reg node_neighbors_0_ce0;
reg node_neighbors_0_we0;
reg neighbor_table_0_ce0;
reg neighbor_table_1_ce0;
reg neighbor_table_2_ce0;
reg neighbor_table_3_ce0;
reg node_neighbors_1_ce0;
reg node_neighbors_1_we0;
reg node_neighbors_2_ce0;
reg node_neighbors_2_we0;
reg node_neighbors_3_ce0;
reg node_neighbors_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln15_fu_218_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln17_fu_234_p1;
reg   [1:0] trunc_ln17_reg_317;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] add_ln18_fu_244_p2;
reg   [1:0] add_ln18_reg_321;
reg   [8:0] lshr_ln18_1_reg_346;
wire   [63:0] zext_ln18_1_fu_260_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln18_fu_300_p1;
reg   [30:0] i_fu_80;
wire   [30:0] add_ln15_fu_224_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
wire   [31:0] tmp_1_fu_283_p6;
wire   [31:0] i_cast_fu_214_p1;
wire   [9:0] empty_fu_230_p1;
wire   [9:0] add_ln17_fu_238_p2;
wire   [7:0] lshr_ln_fu_250_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gather_node_neighbors_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U1(
    .din0(neighbor_table_0_q0),
    .din1(neighbor_table_1_q0),
    .din2(neighbor_table_2_q0),
    .din3(neighbor_table_3_q0),
    .din4(add_ln18_reg_321),
    .dout(tmp_1_fu_283_p6)
);

gather_node_neighbors_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln15_fu_218_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_80 <= add_ln15_fu_224_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_218_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln18_reg_321 <= add_ln18_fu_244_p2;
        lshr_ln18_1_reg_346 <= {{ap_sig_allocacmp_i_1[10:2]}};
        trunc_ln17_reg_317 <= trunc_ln17_fu_234_p1;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_218_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_0_ce0 = 1'b1;
    end else begin
        neighbor_table_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_1_ce0 = 1'b1;
    end else begin
        neighbor_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_2_ce0 = 1'b1;
    end else begin
        neighbor_table_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_3_ce0 = 1'b1;
    end else begin
        neighbor_table_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        node_neighbors_0_ce0 = 1'b1;
    end else begin
        node_neighbors_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln17_reg_317 == 2'd0))) begin
        node_neighbors_0_we0 = 1'b1;
    end else begin
        node_neighbors_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        node_neighbors_1_ce0 = 1'b1;
    end else begin
        node_neighbors_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln17_reg_317 == 2'd1))) begin
        node_neighbors_1_we0 = 1'b1;
    end else begin
        node_neighbors_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        node_neighbors_2_ce0 = 1'b1;
    end else begin
        node_neighbors_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln17_reg_317 == 2'd2))) begin
        node_neighbors_2_we0 = 1'b1;
    end else begin
        node_neighbors_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        node_neighbors_3_ce0 = 1'b1;
    end else begin
        node_neighbors_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln17_reg_317 == 2'd3))) begin
        node_neighbors_3_we0 = 1'b1;
    end else begin
        node_neighbors_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_224_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign add_ln17_fu_238_p2 = (empty_fu_230_p1 + trunc_ln);

assign add_ln18_fu_244_p2 = (trunc_ln17_fu_234_p1 + trunc_ln1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_230_p1 = ap_sig_allocacmp_i_1[9:0];

assign i_cast_fu_214_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln15_fu_218_p2 = (($signed(i_cast_fu_214_p1) < $signed(node_in_degree)) ? 1'b1 : 1'b0);

assign lshr_ln_fu_250_p4 = {{add_ln17_fu_238_p2[9:2]}};

assign neighbor_table_0_address0 = zext_ln18_1_fu_260_p1;

assign neighbor_table_1_address0 = zext_ln18_1_fu_260_p1;

assign neighbor_table_2_address0 = zext_ln18_1_fu_260_p1;

assign neighbor_table_3_address0 = zext_ln18_1_fu_260_p1;

assign node_neighbors_0_address0 = zext_ln18_fu_300_p1;

assign node_neighbors_0_d0 = tmp_1_fu_283_p6;

assign node_neighbors_1_address0 = zext_ln18_fu_300_p1;

assign node_neighbors_1_d0 = tmp_1_fu_283_p6;

assign node_neighbors_2_address0 = zext_ln18_fu_300_p1;

assign node_neighbors_2_d0 = tmp_1_fu_283_p6;

assign node_neighbors_3_address0 = zext_ln18_fu_300_p1;

assign node_neighbors_3_d0 = tmp_1_fu_283_p6;

assign trunc_ln17_fu_234_p1 = ap_sig_allocacmp_i_1[1:0];

assign zext_ln18_1_fu_260_p1 = lshr_ln_fu_250_p4;

assign zext_ln18_fu_300_p1 = lshr_ln18_1_reg_346;

endmodule //gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_15_1
