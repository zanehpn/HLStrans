-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity trisolv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    L_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    L_ce0 : OUT STD_LOGIC;
    L_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of trisolv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "trisolv_trisolv,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.330000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1446,HLS_SYN_LUT=1289,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_216 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln10_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_reg_228 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln10_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_169_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_reg_238 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln14_fu_176_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_243 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_load_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln11_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln11_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal L_load_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_done : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_idle : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_ready : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_ce0 : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_we0 : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_ce0 : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_p_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_p_out_ap_vld : STD_LOGIC;
    signal grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln14_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_fu_52 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln10_fu_132_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln14_1_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_158_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_151_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_2_fu_165_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_fu_148_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component trisolv_trisolv_Pipeline_VITIS_LOOP_12_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_load : IN STD_LOGIC_VECTOR (63 downto 0);
        bitcast_ln11 : IN STD_LOGIC_VECTOR (63 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        x_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        zext_ln10 : IN STD_LOGIC_VECTOR (5 downto 0);
        i : IN STD_LOGIC_VECTOR (5 downto 0);
        add_ln13 : IN STD_LOGIC_VECTOR (10 downto 0);
        L_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        L_ce0 : OUT STD_LOGIC;
        L_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;


    component trisolv_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99 : component trisolv_trisolv_Pipeline_VITIS_LOOP_12_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start,
        ap_done => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_done,
        ap_idle => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_idle,
        ap_ready => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_ready,
        b_load => b_load_reg_248,
        bitcast_ln11 => bitcast_ln11_reg_253,
        x_address0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_address0,
        x_ce0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_ce0,
        x_we0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_we0,
        x_d0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_d0,
        x_q0 => x_q0,
        zext_ln10 => i_1_reg_216,
        i => i_1_reg_216,
        add_ln13 => add_ln13_reg_238,
        L_address0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_address0,
        L_ce0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_ce0,
        L_q0 => L_q0,
        p_out => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_p_out,
        p_out_ap_vld => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_p_out_ap_vld);

    ddiv_64ns_64ns_64_22_no_dsp_1_U13 : component trisolv_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_p_out,
        din1 => grp_fu_114_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_114_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_52 <= ap_const_lv6_0;
            elsif (((icmp_ln10_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_52 <= add_ln10_fu_132_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                L_load_reg_263 <= L_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    add_ln13_reg_238(10 downto 3) <= add_ln13_fu_169_p2(10 downto 3);
                add_ln14_reg_243 <= add_ln14_fu_176_p2;
                b_load_reg_248 <= b_q0;
                bitcast_ln11_reg_253 <= bitcast_ln11_fu_182_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                div_reg_276 <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_216 <= i_fu_52;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln10_reg_228(5 downto 0) <= zext_ln10_fu_138_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln10_reg_228(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    add_ln13_reg_238(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_126_p2, grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    L_address0_assign_proc : process(ap_CS_fsm_state5, grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_address0, ap_CS_fsm_state4, zext_ln14_fu_187_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            L_address0 <= zext_ln14_fu_187_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_address0 <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_address0;
        else 
            L_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    L_ce0_assign_proc : process(ap_CS_fsm_state5, grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            L_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_ce0 <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_L_ce0;
        else 
            L_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_fu_132_p2 <= std_logic_vector(unsigned(i_fu_52) + unsigned(ap_const_lv6_1));
    add_ln13_fu_169_p2 <= std_logic_vector(unsigned(tmp_fu_151_p3) + unsigned(zext_ln13_2_fu_165_p1));
    add_ln14_fu_176_p2 <= std_logic_vector(unsigned(add_ln13_fu_169_p2) + unsigned(zext_ln13_fu_148_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_done)
    begin
        if ((grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_126_p2)
    begin
        if (((icmp_ln10_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_126_p2)
    begin
        if (((icmp_ln10_fu_126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= zext_ln10_fu_138_p1(6 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_fu_182_p1 <= b_q0;
    bitcast_ln14_1_fu_199_p1 <= div_reg_276;
    grp_fu_114_p1 <= L_load_reg_263;
    grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_ap_start_reg;
    icmp_ln10_fu_126_p2 <= "1" when (i_fu_52 = ap_const_lv6_28) else "0";
    tmp_1_fu_158_p3 <= (i_1_reg_216 & ap_const_lv3_0);
    tmp_fu_151_p3 <= (i_1_reg_216 & ap_const_lv5_0);

    x_address0_assign_proc : process(zext_ln10_reg_228, grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_address0, ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_address0 <= zext_ln10_reg_228(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address0 <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_address0;
        else 
            x_address0 <= "XXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_ce0, ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_ce0 <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_ce0;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_d0_assign_proc : process(grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_d0, ap_CS_fsm_state4, ap_CS_fsm_state29, bitcast_ln14_1_fu_199_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_d0 <= bitcast_ln14_1_fu_199_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_d0 <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_d0;
        else 
            x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_we0_assign_proc : process(grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_we0, ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_we0 <= grp_trisolv_Pipeline_VITIS_LOOP_12_2_fu_99_x_we0;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_52),64));
    zext_ln13_2_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_158_p3),11));
    zext_ln13_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_216),11));
    zext_ln14_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_reg_243),64));
end behav;
