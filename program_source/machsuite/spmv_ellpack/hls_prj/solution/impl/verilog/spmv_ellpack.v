// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spmv_ellpack_spmv_ellpack,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.330000,HLS_SYN_LAT=4209665,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1500,HLS_SYN_LUT=1197,HLS_VERSION=2022_2_2}" *)

module spmv_ellpack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nzval_address0,
        nzval_ce0,
        nzval_q0,
        cols_address0,
        cols_ce0,
        cols_q0,
        vec_address0,
        vec_ce0,
        vec_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] nzval_address0;
output   nzval_ce0;
input  [63:0] nzval_q0;
output  [19:0] cols_address0;
output   cols_ce0;
input  [31:0] cols_q0;
output  [9:0] vec_address0;
output   vec_ce0;
input  [63:0] vec_q0;
output  [9:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [63:0] out_r_d0;
input  [63:0] out_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] trunc_ln10_fu_105_p1;
reg   [9:0] trunc_ln10_reg_136;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_88_p2;
reg   [63:0] out_r_load_reg_147;
wire    ap_CS_fsm_state3;
wire   [63:0] sum_fu_114_p1;
reg   [63:0] sum_reg_152;
wire    ap_CS_fsm_state4;
wire   [19:0] tmp_1_fu_118_p3;
reg   [19:0] tmp_1_reg_157;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_done;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_idle;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_ready;
wire   [9:0] grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_address0;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_ce0;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_we0;
wire   [63:0] grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_d0;
wire   [19:0] grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_nzval_address0;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_nzval_ce0;
wire   [19:0] grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_cols_address0;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_cols_ce0;
wire   [9:0] grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_vec_address0;
wire    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_vec_ce0;
reg    grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln13_fu_100_p1;
reg   [10:0] i_fu_48;
wire   [10:0] add_ln13_fu_94_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start_reg = 1'b0;
end

spmv_ellpack_spmv_ellpack_Pipeline_ellpack_2 grp_spmv_ellpack_Pipeline_ellpack_2_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start),
    .ap_done(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_done),
    .ap_idle(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_idle),
    .ap_ready(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_ready),
    .sum(sum_reg_152),
    .out_r_address0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_address0),
    .out_r_ce0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_ce0),
    .out_r_we0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_we0),
    .out_r_d0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_d0),
    .zext_ln13(trunc_ln10_reg_136),
    .tmp_1(tmp_1_reg_157),
    .nzval_address0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_nzval_address0),
    .nzval_ce0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_nzval_ce0),
    .nzval_q0(nzval_q0),
    .cols_address0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_cols_address0),
    .cols_ce0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_cols_ce0),
    .cols_q0(cols_q0),
    .vec_address0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_vec_address0),
    .vec_ce0(grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_vec_ce0),
    .vec_q0(vec_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_ready == 1'b1)) begin
            grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_48 <= 11'd0;
    end else if (((icmp_ln13_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_48 <= add_ln13_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_load_reg_147 <= out_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sum_reg_152 <= sum_fu_114_p1;
        tmp_1_reg_157[19 : 10] <= tmp_1_fu_118_p3[19 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln10_reg_136 <= trunc_ln10_fu_105_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = zext_ln13_fu_100_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_address0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_ce0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_ce0;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_we0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_we0;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_94_p2 = (i_fu_48 + 11'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign cols_address0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_cols_address0;

assign cols_ce0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_cols_ce0;

assign grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_ap_start_reg;

assign icmp_ln13_fu_88_p2 = ((i_fu_48 == 11'd1024) ? 1'b1 : 1'b0);

assign nzval_address0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_nzval_address0;

assign nzval_ce0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_nzval_ce0;

assign out_r_d0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_out_r_d0;

assign sum_fu_114_p1 = out_r_load_reg_147;

assign tmp_1_fu_118_p3 = {{trunc_ln10_reg_136}, {10'd0}};

assign trunc_ln10_fu_105_p1 = i_fu_48[9:0];

assign vec_address0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_vec_address0;

assign vec_ce0 = grp_spmv_ellpack_Pipeline_ellpack_2_fu_65_vec_ce0;

assign zext_ln13_fu_100_p1 = i_fu_48;

always @ (posedge ap_clk) begin
    tmp_1_reg_157[9:0] <= 10'b0000000000;
end

endmodule //spmv_ellpack
