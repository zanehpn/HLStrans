// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bfs_bfs_Pipeline_loop_neighbors (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e,
        level_address0,
        level_ce0,
        level_we0,
        level_d0,
        level_q0,
        zext_ln18,
        tmp_end,
        edges_address0,
        edges_ce0,
        edges_q0,
        level_counts_address0,
        level_counts_ce0,
        level_counts_we0,
        level_counts_d0,
        level_counts_q0,
        queue_address0,
        queue_ce0,
        queue_we0,
        queue_d0,
        q_in_2_out_i,
        q_in_2_out_o,
        q_in_2_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] e;
output  [7:0] level_address0;
output   level_ce0;
output   level_we0;
output  [7:0] level_d0;
input  [7:0] level_q0;
input  [7:0] zext_ln18;
input  [63:0] tmp_end;
output  [11:0] edges_address0;
output   edges_ce0;
input  [63:0] edges_q0;
output  [3:0] level_counts_address0;
output   level_counts_ce0;
output   level_counts_we0;
output  [63:0] level_counts_d0;
input  [63:0] level_counts_q0;
output  [7:0] queue_address0;
output   queue_ce0;
output   queue_we0;
output  [7:0] queue_d0;
input  [63:0] q_in_2_out_i;
output  [63:0] q_in_2_out_o;
output   q_in_2_out_o_ap_vld;

reg ap_idle;
reg[7:0] level_address0;
reg level_ce0;
reg level_we0;
reg edges_ce0;
reg[3:0] level_counts_address0;
reg level_counts_ce0;
reg level_counts_we0;
reg queue_ce0;
reg queue_we0;
reg[63:0] q_in_2_out_o;
reg q_in_2_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln39_reg_317;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln18_cast_fu_144_p1;
reg   [63:0] zext_ln18_cast_reg_307;
reg   [7:0] level_addr_reg_312;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln39_fu_164_p2;
wire   [0:0] icmp_ln40_fu_176_p2;
reg   [0:0] icmp_ln40_reg_321;
reg   [0:0] icmp_ln40_reg_321_pp0_iter1_reg;
wire   [7:0] trunc_ln41_1_fu_206_p1;
reg   [7:0] trunc_ln41_1_reg_330;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] level_addr_1_reg_335;
wire   [0:0] icmp_ln44_fu_218_p2;
reg   [0:0] icmp_ln44_reg_340;
reg   [3:0] level_counts_addr_reg_344;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln41_fu_185_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln48_fu_248_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln47_fu_276_p1;
wire   [63:0] zext_ln16_fu_259_p1;
reg   [63:0] e_1_fu_58;
wire   [63:0] e_4_fu_190_p2;
wire    ap_loop_init;
reg   [7:0] i_fu_62;
wire   [7:0] i_2_fu_170_p2;
wire   [7:0] tmp_level_1_fu_269_p2;
wire   [11:0] trunc_ln41_fu_181_p1;
wire   [7:0] empty_10_fu_214_p1;
wire   [0:0] icmp_ln48_fu_228_p2;
wire   [7:0] add_ln48_fu_234_p2;
wire   [7:0] select_ln48_fu_240_p3;
wire   [7:0] q_in_fu_253_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

bfs_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        e_1_fu_58 <= e;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln39_fu_164_p2 == 1'd0))) begin
        e_1_fu_58 <= e_4_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_62 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln39_fu_164_p2 == 1'd0))) begin
        i_fu_62 <= i_2_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln39_reg_317 <= icmp_ln39_fu_164_p2;
        icmp_ln40_reg_321_pp0_iter1_reg <= icmp_ln40_reg_321;
        level_addr_reg_312 <= zext_ln18_cast_reg_307;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln39_fu_164_p2 == 1'd0))) begin
        icmp_ln40_reg_321 <= icmp_ln40_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln40_reg_321 == 1'd1))) begin
        icmp_ln44_reg_340 <= icmp_ln44_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln40_reg_321 == 1'd1))) begin
        level_addr_1_reg_335 <= edges_q0;
        trunc_ln41_1_reg_330 <= trunc_ln41_1_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_reg_340 == 1'd1) & (icmp_ln40_reg_321 == 1'd1))) begin
        level_counts_addr_reg_344 <= zext_ln47_fu_276_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln18_cast_reg_307[7 : 0] <= zext_ln18_cast_fu_144_p1[7 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_317 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        edges_ce0 = 1'b1;
    end else begin
        edges_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        level_address0 = level_addr_1_reg_335;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        level_address0 = level_addr_reg_312;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        level_address0 = edges_q0;
    end else begin
        level_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        level_ce0 = 1'b1;
    end else begin
        level_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            level_counts_address0 = level_counts_addr_reg_344;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            level_counts_address0 = zext_ln47_fu_276_p1;
        end else begin
            level_counts_address0 = 'bx;
        end
    end else begin
        level_counts_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        level_counts_ce0 = 1'b1;
    end else begin
        level_counts_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln44_reg_340 == 1'd1) & (icmp_ln40_reg_321_pp0_iter1_reg == 1'd1))) begin
        level_counts_we0 = 1'b1;
    end else begin
        level_counts_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_reg_340 == 1'd1) & (icmp_ln40_reg_321 == 1'd1))) begin
        level_we0 = 1'b1;
    end else begin
        level_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_fu_218_p2 == 1'd1) & (icmp_ln40_reg_321 == 1'd1))) begin
        q_in_2_out_o = zext_ln16_fu_259_p1;
    end else begin
        q_in_2_out_o = q_in_2_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_fu_218_p2 == 1'd1) & (icmp_ln40_reg_321 == 1'd1))) begin
        q_in_2_out_o_ap_vld = 1'b1;
    end else begin
        q_in_2_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        queue_ce0 = 1'b1;
    end else begin
        queue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_317 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_fu_218_p2 == 1'd1) & (icmp_ln40_reg_321 == 1'd1))) begin
        queue_we0 = 1'b1;
    end else begin
        queue_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_234_p2 = ($signed(empty_10_fu_214_p1) + $signed(8'd255));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign e_4_fu_190_p2 = (e_1_fu_58 + 64'd1);

assign edges_address0 = zext_ln41_fu_185_p1;

assign empty_10_fu_214_p1 = q_in_2_out_i[7:0];

assign i_2_fu_170_p2 = (i_fu_62 + 8'd1);

assign icmp_ln39_fu_164_p2 = ((i_fu_62 == 8'd158) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_176_p2 = ((e_1_fu_58 < tmp_end) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_218_p2 = ((level_q0 == 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_228_p2 = ((q_in_2_out_i == 64'd0) ? 1'b1 : 1'b0);

assign level_counts_d0 = (level_counts_q0 + 64'd1);

assign level_d0 = tmp_level_1_fu_269_p2;

assign q_in_fu_253_p2 = (empty_10_fu_214_p1 + 8'd1);

assign queue_address0 = zext_ln48_fu_248_p1;

assign queue_d0 = trunc_ln41_1_reg_330;

assign select_ln48_fu_240_p3 = ((icmp_ln48_fu_228_p2[0:0] == 1'b1) ? 8'd255 : add_ln48_fu_234_p2);

assign tmp_level_1_fu_269_p2 = (level_q0 + 8'd1);

assign trunc_ln41_1_fu_206_p1 = edges_q0[7:0];

assign trunc_ln41_fu_181_p1 = e_1_fu_58[11:0];

assign zext_ln16_fu_259_p1 = q_in_fu_253_p2;

assign zext_ln18_cast_fu_144_p1 = zext_ln18;

assign zext_ln41_fu_185_p1 = trunc_ln41_fu_181_p1;

assign zext_ln47_fu_276_p1 = tmp_level_1_fu_269_p2;

assign zext_ln48_fu_248_p1 = select_ln48_fu_240_p3;

always @ (posedge ap_clk) begin
    zext_ln18_cast_reg_307[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //bfs_bfs_Pipeline_loop_neighbors
