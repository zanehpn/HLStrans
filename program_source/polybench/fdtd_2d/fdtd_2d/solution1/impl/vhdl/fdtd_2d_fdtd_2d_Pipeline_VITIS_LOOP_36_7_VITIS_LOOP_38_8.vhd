-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fdtd_2d_fdtd_2d_Pipeline_VITIS_LOOP_36_7_VITIS_LOOP_38_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ex_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ex_ce0 : OUT STD_LOGIC;
    ex_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ex_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ex_ce1 : OUT STD_LOGIC;
    ex_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ey_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ey_ce0 : OUT STD_LOGIC;
    ey_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ey_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ey_ce1 : OUT STD_LOGIC;
    ey_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    hz_ce0 : OUT STD_LOGIC;
    hz_we0 : OUT STD_LOGIC;
    hz_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    hz_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    hz_ce1 : OUT STD_LOGIC;
    hz_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_158_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_158_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_158_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_158_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_158_p_ce : OUT STD_LOGIC;
    grp_fu_162_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_162_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_162_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_162_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_162_p_ce : OUT STD_LOGIC;
    grp_fu_166_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_166_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_166_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_166_p_ce : OUT STD_LOGIC );
end;


architecture behav of fdtd_2d_fdtd_2d_Pipeline_VITIS_LOOP_36_7_VITIS_LOOP_38_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_3FE6666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110011001100110011001100110011001100110011001100110";
    constant ap_const_lv13_1235 : STD_LOGIC_VECTOR (12 downto 0) := "1001000110101";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln39_3_fu_301_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_3_reg_405 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_fu_307_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_reg_410 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_reg_410_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_reg_410_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_reg_410_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_reg_410_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_4_reg_410_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_5_fu_323_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_5_reg_415 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_5_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_reg_420_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ex_load_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal ex_load_1_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln39_1_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln39_2_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub4_reg_461 : STD_LOGIC_VECTOR (63 downto 0);
    signal ey_load_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln39_3_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal hz_addr_reg_481 : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter12_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter13_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter14_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter15_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter21_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter22_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter23_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter24_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter25_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter26_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal hz_addr_reg_481_pp0_iter27_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_reg_487 : STD_LOGIC_VECTOR (63 downto 0);
    signal ey_load_1_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub5_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal hz_load_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub6_reg_522 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln39_8_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_6_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_60 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln39_fu_313_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_fu_215_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten13_fu_68 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln36_fu_183_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln38_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next4216_fu_209_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_223_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_235_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln39_fu_231_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_1_fu_243_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvars_iv_next42_mid1_fu_253_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_2_fu_259_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_267_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_279_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln39_2_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_3_fu_287_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln36_fu_201_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln39_1_fu_247_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_4_fu_297_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_2_fu_291_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_7_fu_319_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fdtd_2d_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fdtd_2d_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fdtd_2d_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fdtd_2d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dsub_64ns_64ns_64_5_full_dsp_1_U15 : component fdtd_2d_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_reg_487,
        din1 => grp_fu_146_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    dsub_64ns_64ns_64_5_full_dsp_1_U16 : component fdtd_2d_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_150_p0,
        din1 => mul2_reg_512,
        ce => ap_const_logic_1,
        dout => grp_fu_150_p2);

    flow_control_loop_pipe_sequential_init_U : component fdtd_2d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_177_p2 = ap_const_lv1_0))) then 
                    i_fu_64 <= select_ln36_1_fu_215_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_177_p2 = ap_const_lv1_0))) then 
                    indvar_flatten13_fu_68 <= add_ln36_fu_183_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_68 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_177_p2 = ap_const_lv1_0))) then 
                    j_fu_60 <= add_ln39_fu_313_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_177_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln39_3_reg_405 <= add_ln39_3_fu_301_p2;
                add_ln39_4_reg_410 <= add_ln39_4_fu_307_p2;
                add_ln39_5_reg_415 <= add_ln39_5_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln39_4_reg_410_pp0_iter1_reg <= add_ln39_4_reg_410;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln39_5_reg_420(12 downto 0) <= zext_ln39_5_fu_344_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln39_4_reg_410_pp0_iter2_reg <= add_ln39_4_reg_410_pp0_iter1_reg;
                add_ln39_4_reg_410_pp0_iter3_reg <= add_ln39_4_reg_410_pp0_iter2_reg;
                add_ln39_4_reg_410_pp0_iter4_reg <= add_ln39_4_reg_410_pp0_iter3_reg;
                add_ln39_4_reg_410_pp0_iter5_reg <= add_ln39_4_reg_410_pp0_iter4_reg;
                add_reg_487 <= grp_fu_162_p_dout0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                hz_addr_reg_481 <= zext_ln39_5_reg_420_pp0_iter10_reg(13 - 1 downto 0);
                hz_addr_reg_481_pp0_iter12_reg <= hz_addr_reg_481;
                hz_addr_reg_481_pp0_iter13_reg <= hz_addr_reg_481_pp0_iter12_reg;
                hz_addr_reg_481_pp0_iter14_reg <= hz_addr_reg_481_pp0_iter13_reg;
                hz_addr_reg_481_pp0_iter15_reg <= hz_addr_reg_481_pp0_iter14_reg;
                hz_addr_reg_481_pp0_iter16_reg <= hz_addr_reg_481_pp0_iter15_reg;
                hz_addr_reg_481_pp0_iter17_reg <= hz_addr_reg_481_pp0_iter16_reg;
                hz_addr_reg_481_pp0_iter18_reg <= hz_addr_reg_481_pp0_iter17_reg;
                hz_addr_reg_481_pp0_iter19_reg <= hz_addr_reg_481_pp0_iter18_reg;
                hz_addr_reg_481_pp0_iter20_reg <= hz_addr_reg_481_pp0_iter19_reg;
                hz_addr_reg_481_pp0_iter21_reg <= hz_addr_reg_481_pp0_iter20_reg;
                hz_addr_reg_481_pp0_iter22_reg <= hz_addr_reg_481_pp0_iter21_reg;
                hz_addr_reg_481_pp0_iter23_reg <= hz_addr_reg_481_pp0_iter22_reg;
                hz_addr_reg_481_pp0_iter24_reg <= hz_addr_reg_481_pp0_iter23_reg;
                hz_addr_reg_481_pp0_iter25_reg <= hz_addr_reg_481_pp0_iter24_reg;
                hz_addr_reg_481_pp0_iter26_reg <= hz_addr_reg_481_pp0_iter25_reg;
                hz_addr_reg_481_pp0_iter27_reg <= hz_addr_reg_481_pp0_iter26_reg;
                mul2_reg_512 <= grp_fu_166_p_dout0;
                sub4_reg_461 <= grp_fu_158_p_dout0;
                sub5_reg_502 <= grp_fu_146_p2;
                sub6_reg_522 <= grp_fu_150_p2;
                    zext_ln39_5_reg_420_pp0_iter10_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter9_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter2_reg(12 downto 0) <= zext_ln39_5_reg_420(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter3_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter2_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter4_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter3_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter5_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter4_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter6_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter5_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter7_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter6_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter8_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter7_reg(12 downto 0);
                    zext_ln39_5_reg_420_pp0_iter9_reg(12 downto 0) <= zext_ln39_5_reg_420_pp0_iter8_reg(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ex_load_1_reg_441 <= ex_q0;
                ex_load_reg_436 <= ex_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ey_load_1_reg_492 <= ey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ey_load_reg_466 <= ey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hz_load_reg_507 <= hz_q1;
            end if;
        end if;
    end process;
    zext_ln39_5_reg_420(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter2_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter3_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter4_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter5_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter6_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter7_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter8_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter9_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln39_5_reg_420_pp0_iter10_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_fu_183_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv13_1));
    add_ln39_1_fu_247_p2 <= std_logic_vector(unsigned(zext_ln39_fu_231_p1) + unsigned(zext_ln39_1_fu_243_p1));
    add_ln39_2_fu_291_p2 <= std_logic_vector(unsigned(zext_ln39_2_fu_275_p1) + unsigned(zext_ln39_3_fu_287_p1));
    add_ln39_3_fu_301_p2 <= std_logic_vector(unsigned(add_ln39_1_fu_247_p2) + unsigned(zext_ln39_4_fu_297_p1));
    add_ln39_4_fu_307_p2 <= std_logic_vector(unsigned(add_ln39_2_fu_291_p2) + unsigned(zext_ln39_4_fu_297_p1));
    add_ln39_5_fu_323_p2 <= std_logic_vector(unsigned(add_ln39_1_fu_247_p2) + unsigned(zext_ln39_7_fu_319_p1));
    add_ln39_fu_313_p2 <= std_logic_vector(unsigned(select_ln36_fu_201_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln36_fu_177_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_177_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter27_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_60, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_60;
        end if; 
    end process;

    bitcast_ln39_1_fu_352_p1 <= ex_load_reg_436;
    bitcast_ln39_2_fu_356_p1 <= ex_load_1_reg_441;
    bitcast_ln39_3_fu_364_p1 <= ey_load_reg_466;
    ex_address0 <= zext_ln39_5_fu_344_p1(13 - 1 downto 0);
    ex_address1 <= zext_ln39_8_fu_348_p1(13 - 1 downto 0);

    ex_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ex_ce0 <= ap_const_logic_1;
        else 
            ex_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ex_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ex_ce1 <= ap_const_logic_1;
        else 
            ex_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ey_address0 <= zext_ln39_5_reg_420_pp0_iter10_reg(13 - 1 downto 0);
    ey_address1 <= zext_ln39_6_fu_360_p1(13 - 1 downto 0);

    ey_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ey_ce0 <= ap_const_logic_1;
        else 
            ey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ey_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ey_ce1 <= ap_const_logic_1;
        else 
            ey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_146_p1 <= ey_load_1_reg_492;
    grp_fu_150_p0 <= hz_load_reg_507;
    grp_fu_158_p_ce <= ap_const_logic_1;
    grp_fu_158_p_din0 <= bitcast_ln39_1_fu_352_p1;
    grp_fu_158_p_din1 <= bitcast_ln39_2_fu_356_p1;
    grp_fu_158_p_opcode <= ap_const_lv2_1;
    grp_fu_162_p_ce <= ap_const_logic_1;
    grp_fu_162_p_din0 <= sub4_reg_461;
    grp_fu_162_p_din1 <= bitcast_ln39_3_fu_364_p1;
    grp_fu_162_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_166_p_ce <= ap_const_logic_1;
    grp_fu_166_p_din0 <= sub5_reg_502;
    grp_fu_166_p_din1 <= ap_const_lv64_3FE6666666666666;
    hz_address0 <= hz_addr_reg_481_pp0_iter27_reg;
    hz_address1 <= hz_addr_reg_481_pp0_iter20_reg;

    hz_ce0_assign_proc : process(ap_enable_reg_pp0_iter28, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            hz_ce0 <= ap_const_logic_1;
        else 
            hz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hz_ce1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            hz_ce1 <= ap_const_logic_1;
        else 
            hz_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hz_d0 <= sub6_reg_522;

    hz_we0_assign_proc : process(ap_enable_reg_pp0_iter28, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            hz_we0 <= ap_const_logic_1;
        else 
            hz_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln36_fu_177_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv13_1235) else "0";
    icmp_ln38_fu_195_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_4F) else "0";
    indvars_iv_next4216_fu_209_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv6_1));
    indvars_iv_next42_mid1_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv6_2));
    select_ln36_1_fu_215_p3 <= 
        indvars_iv_next4216_fu_209_p2 when (icmp_ln38_fu_195_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln36_2_fu_259_p3 <= 
        indvars_iv_next42_mid1_fu_253_p2 when (icmp_ln38_fu_195_p2(0) = '1') else 
        indvars_iv_next4216_fu_209_p2;
    select_ln36_fu_201_p3 <= 
        ap_const_lv7_0 when (icmp_ln38_fu_195_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_6_fu_223_p3 <= (select_ln36_1_fu_215_p3 & ap_const_lv6_0);
    tmp_7_fu_235_p3 <= (select_ln36_1_fu_215_p3 & ap_const_lv4_0);
    tmp_8_fu_267_p3 <= (select_ln36_2_fu_259_p3 & ap_const_lv6_0);
    tmp_9_fu_279_p3 <= (select_ln36_2_fu_259_p3 & ap_const_lv4_0);
    zext_ln39_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_235_p3),13));
    zext_ln39_2_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_267_p3),13));
    zext_ln39_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_279_p3),13));
    zext_ln39_4_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_201_p3),13));
    zext_ln39_5_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_3_reg_405),64));
    zext_ln39_6_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_4_reg_410_pp0_iter5_reg),64));
    zext_ln39_7_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_313_p2),13));
    zext_ln39_8_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_5_reg_415),64));
    zext_ln39_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_223_p3),13));
end behav;
