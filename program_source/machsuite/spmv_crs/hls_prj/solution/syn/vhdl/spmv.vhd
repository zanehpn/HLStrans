-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    val_r_ce0 : OUT STD_LOGIC;
    val_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    cols_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    cols_ce0 : OUT STD_LOGIC;
    cols_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rowDelimiters_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rowDelimiters_ce0 : OUT STD_LOGIC;
    rowDelimiters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rowDelimiters_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rowDelimiters_ce1 : OUT STD_LOGIC;
    rowDelimiters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    vec_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    vec_ce0 : OUT STD_LOGIC;
    vec_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of spmv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spmv_spmv,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.330000,HLS_SYN_LAT=12845,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1254,HLS_SYN_LUT=1101,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1EE : STD_LOGIC_VECTOR (8 downto 0) := "111101110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln12_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln12_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_begin_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_end_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_spmv_2_fu_106_ap_start : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_ap_done : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_ap_idle : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_ap_ready : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_val_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_spmv_Pipeline_spmv_2_fu_106_val_r_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_cols_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_spmv_Pipeline_spmv_2_fu_106_cols_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_vec_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_spmv_Pipeline_spmv_2_fu_106_vec_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_sum_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_spmv_Pipeline_spmv_2_fu_106_sum_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_spmv_2_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln16_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_60 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_fu_135_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_146_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_1_fu_154_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln_fu_160_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmv_spmv_Pipeline_spmv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln17 : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln17_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        val_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        val_r_ce0 : OUT STD_LOGIC;
        val_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        cols_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        cols_ce0 : OUT STD_LOGIC;
        cols_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vec_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        vec_ce0 : OUT STD_LOGIC;
        vec_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        sum_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_spmv_Pipeline_spmv_2_fu_106 : component spmv_spmv_Pipeline_spmv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_spmv_Pipeline_spmv_2_fu_106_ap_start,
        ap_done => grp_spmv_Pipeline_spmv_2_fu_106_ap_done,
        ap_idle => grp_spmv_Pipeline_spmv_2_fu_106_ap_idle,
        ap_ready => grp_spmv_Pipeline_spmv_2_fu_106_ap_ready,
        sext_ln17 => tmp_begin_reg_219,
        sext_ln17_1 => tmp_end_reg_224,
        val_r_address0 => grp_spmv_Pipeline_spmv_2_fu_106_val_r_address0,
        val_r_ce0 => grp_spmv_Pipeline_spmv_2_fu_106_val_r_ce0,
        val_r_q0 => val_r_q0,
        cols_address0 => grp_spmv_Pipeline_spmv_2_fu_106_cols_address0,
        cols_ce0 => grp_spmv_Pipeline_spmv_2_fu_106_cols_ce0,
        cols_q0 => cols_q0,
        vec_address0 => grp_spmv_Pipeline_spmv_2_fu_106_vec_address0,
        vec_ce0 => grp_spmv_Pipeline_spmv_2_fu_106_vec_ce0,
        vec_q0 => vec_q0,
        sum_out => grp_spmv_Pipeline_spmv_2_fu_106_sum_out,
        sum_out_ap_vld => grp_spmv_Pipeline_spmv_2_fu_106_sum_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_spmv_Pipeline_spmv_2_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_spmv_Pipeline_spmv_2_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_spmv_Pipeline_spmv_2_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_spmv_Pipeline_spmv_2_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_spmv_Pipeline_spmv_2_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_60 <= ap_const_lv9_0;
            elsif (((icmp_ln12_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_60 <= add_ln16_fu_135_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_begin_reg_219 <= rowDelimiters_q1;
                tmp_end_reg_224 <= rowDelimiters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln12_reg_204(8 downto 0) <= zext_ln12_fu_141_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_204(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_129_p2, grp_spmv_Pipeline_spmv_2_fu_106_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_spmv_Pipeline_spmv_2_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln16_1_fu_154_p2 <= std_logic_vector(unsigned(shl_ln_fu_146_p3) + unsigned(ap_const_lv11_4));
    add_ln16_fu_135_p2 <= std_logic_vector(unsigned(i_fu_60) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_spmv_Pipeline_spmv_2_fu_106_ap_done)
    begin
        if ((grp_spmv_Pipeline_spmv_2_fu_106_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_129_p2)
    begin
        if (((icmp_ln12_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_129_p2)
    begin
        if (((icmp_ln12_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cols_address0 <= grp_spmv_Pipeline_spmv_2_fu_106_cols_address0;
    cols_ce0 <= grp_spmv_Pipeline_spmv_2_fu_106_cols_ce0;
    grp_spmv_Pipeline_spmv_2_fu_106_ap_start <= grp_spmv_Pipeline_spmv_2_fu_106_ap_start_reg;
    icmp_ln12_fu_129_p2 <= "1" when (i_fu_60 = ap_const_lv9_1EE) else "0";
    lshr_ln_fu_160_p4 <= add_ln16_1_fu_154_p2(10 downto 2);
    out_r_address0 <= zext_ln12_reg_204(9 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= grp_spmv_Pipeline_spmv_2_fu_106_sum_out;

    out_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rowDelimiters_address0 <= zext_ln16_fu_170_p1(9 - 1 downto 0);
    rowDelimiters_address1 <= zext_ln12_fu_141_p1(9 - 1 downto 0);

    rowDelimiters_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowDelimiters_ce0 <= ap_const_logic_1;
        else 
            rowDelimiters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rowDelimiters_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowDelimiters_ce1 <= ap_const_logic_1;
        else 
            rowDelimiters_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_146_p3 <= (i_fu_60 & ap_const_lv2_0);
    val_r_address0 <= grp_spmv_Pipeline_spmv_2_fu_106_val_r_address0;
    val_r_ce0 <= grp_spmv_Pipeline_spmv_2_fu_106_val_r_ce0;
    vec_address0 <= grp_spmv_Pipeline_spmv_2_fu_106_vec_address0;
    vec_ce0 <= grp_spmv_Pipeline_spmv_2_fu_106_vec_ce0;
    zext_ln12_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_60),64));
    zext_ln16_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_160_p4),64));
end behav;
