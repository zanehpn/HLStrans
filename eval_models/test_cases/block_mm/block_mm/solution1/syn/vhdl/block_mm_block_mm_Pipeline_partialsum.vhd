-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity block_mm_block_mm_Pipeline_partialsum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Bcols_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    Bcols_empty_n : IN STD_LOGIC;
    Bcols_read : OUT STD_LOGIC;
    AB_15_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_14_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_13_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_12_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_11_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_375_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_3_375_out_ap_vld : OUT STD_LOGIC;
    add_3_274_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_3_274_out_ap_vld : OUT STD_LOGIC;
    add_3_173_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_3_173_out_ap_vld : OUT STD_LOGIC;
    add_372_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_372_out_ap_vld : OUT STD_LOGIC;
    add_2_371_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_2_371_out_ap_vld : OUT STD_LOGIC;
    add_2_270_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_2_270_out_ap_vld : OUT STD_LOGIC;
    add_2_169_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_2_169_out_ap_vld : OUT STD_LOGIC;
    add_268_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_268_out_ap_vld : OUT STD_LOGIC;
    add_1_367_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_1_367_out_ap_vld : OUT STD_LOGIC;
    add_1_266_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_1_266_out_ap_vld : OUT STD_LOGIC;
    add_1_165_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_1_165_out_ap_vld : OUT STD_LOGIC;
    add_164_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_164_out_ap_vld : OUT STD_LOGIC;
    add_33963_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_33963_out_ap_vld : OUT STD_LOGIC;
    add_23462_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_23462_out_ap_vld : OUT STD_LOGIC;
    add_12961_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_12961_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0 : OUT STD_LOGIC;
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0 : OUT STD_LOGIC;
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0 : OUT STD_LOGIC;
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0 : OUT STD_LOGIC;
    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of block_mm_block_mm_Pipeline_partialsum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln43_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Bcols_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln43_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_1076_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tempB_a_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempB_a_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempB_a_1_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_2_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_3_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_1_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_1_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_2_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_2_reg_1174 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_3_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_3_reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_4_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_4_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_5_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_5_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_6_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_6_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_7_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_7_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_8_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_8_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_9_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_9_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_10_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_10_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_11_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_11_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_12_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_12_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_13_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_13_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_14_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_14_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_15_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_15_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal add_12961_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_1_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_23462_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_2_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_33963_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_3_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_164_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_4_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_165_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_5_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_266_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_6_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_367_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_7_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_268_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_8_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_2_169_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_9_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_2_270_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_10_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_2_371_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_11_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_372_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_12_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_3_173_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_13_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_3_274_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_14_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_3_375_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_15_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_188 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln43_fu_552_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component block_mm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component block_mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U22 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132,
        din1 => tempB_a_reg_1100,
        dout => mul_ln48_fu_605_p2);

    mul_32s_32s_32_1_1_U23 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132,
        din1 => tempB_a_1_reg_1108,
        dout => mul_ln48_1_fu_609_p2);

    mul_32s_32s_32_1_1_U24 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132,
        din1 => trunc_ln45_2_reg_1116,
        dout => mul_ln48_2_fu_613_p2);

    mul_32s_32s_32_1_1_U25 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132,
        din1 => trunc_ln45_3_reg_1124,
        dout => mul_ln48_3_fu_617_p2);

    mul_32s_32s_32_1_1_U26 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140,
        din1 => tempB_a_reg_1100,
        dout => mul_ln48_4_fu_621_p2);

    mul_32s_32s_32_1_1_U27 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140,
        din1 => tempB_a_1_reg_1108,
        dout => mul_ln48_5_fu_625_p2);

    mul_32s_32s_32_1_1_U28 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140,
        din1 => trunc_ln45_2_reg_1116,
        dout => mul_ln48_6_fu_629_p2);

    mul_32s_32s_32_1_1_U29 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140,
        din1 => trunc_ln45_3_reg_1124,
        dout => mul_ln48_7_fu_633_p2);

    mul_32s_32s_32_1_1_U30 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148,
        din1 => tempB_a_reg_1100,
        dout => mul_ln48_8_fu_637_p2);

    mul_32s_32s_32_1_1_U31 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148,
        din1 => tempB_a_1_reg_1108,
        dout => mul_ln48_9_fu_641_p2);

    mul_32s_32s_32_1_1_U32 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148,
        din1 => trunc_ln45_2_reg_1116,
        dout => mul_ln48_10_fu_645_p2);

    mul_32s_32s_32_1_1_U33 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148,
        din1 => trunc_ln45_3_reg_1124,
        dout => mul_ln48_11_fu_649_p2);

    mul_32s_32s_32_1_1_U34 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156,
        din1 => tempB_a_reg_1100,
        dout => mul_ln48_12_fu_653_p2);

    mul_32s_32s_32_1_1_U35 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156,
        din1 => tempB_a_1_reg_1108,
        dout => mul_ln48_13_fu_657_p2);

    mul_32s_32s_32_1_1_U36 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156,
        din1 => trunc_ln45_2_reg_1116,
        dout => mul_ln48_14_fu_661_p2);

    mul_32s_32s_32_1_1_U37 : component block_mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156,
        din1 => trunc_ln45_3_reg_1124,
        dout => mul_ln48_15_fu_665_p2);

    flow_control_loop_pipe_sequential_init_U : component block_mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    add_12961_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_12961_fu_128 <= AB_1_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_12961_fu_128 <= add_ln48_1_fu_722_p2;
                end if;
            end if; 
        end if;
    end process;

    add_164_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_164_fu_140 <= AB_4_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_164_fu_140 <= add_ln48_4_fu_737_p2;
                end if;
            end if; 
        end if;
    end process;

    add_1_165_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_1_165_fu_144 <= AB_5_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_1_165_fu_144 <= add_ln48_5_fu_742_p2;
                end if;
            end if; 
        end if;
    end process;

    add_1_266_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_1_266_fu_148 <= AB_6_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_1_266_fu_148 <= add_ln48_6_fu_747_p2;
                end if;
            end if; 
        end if;
    end process;

    add_1_367_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_1_367_fu_152 <= AB_7_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_1_367_fu_152 <= add_ln48_7_fu_752_p2;
                end if;
            end if; 
        end if;
    end process;

    add_23462_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_23462_fu_132 <= AB_2_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_23462_fu_132 <= add_ln48_2_fu_727_p2;
                end if;
            end if; 
        end if;
    end process;

    add_268_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_268_fu_156 <= AB_8_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_268_fu_156 <= add_ln48_8_fu_757_p2;
                end if;
            end if; 
        end if;
    end process;

    add_2_169_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_2_169_fu_160 <= AB_9_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_2_169_fu_160 <= add_ln48_9_fu_762_p2;
                end if;
            end if; 
        end if;
    end process;

    add_2_270_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_2_270_fu_164 <= AB_10_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_2_270_fu_164 <= add_ln48_10_fu_767_p2;
                end if;
            end if; 
        end if;
    end process;

    add_2_371_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_2_371_fu_168 <= AB_11_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_2_371_fu_168 <= add_ln48_11_fu_772_p2;
                end if;
            end if; 
        end if;
    end process;

    add_33963_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_33963_fu_136 <= AB_3_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_33963_fu_136 <= add_ln48_3_fu_732_p2;
                end if;
            end if; 
        end if;
    end process;

    add_372_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_372_fu_172 <= AB_12_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_372_fu_172 <= add_ln48_12_fu_777_p2;
                end if;
            end if; 
        end if;
    end process;

    add_3_173_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_3_173_fu_176 <= AB_13_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_3_173_fu_176 <= add_ln48_13_fu_782_p2;
                end if;
            end if; 
        end if;
    end process;

    add_3_274_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_3_274_fu_180 <= AB_14_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_3_274_fu_180 <= add_ln48_14_fu_787_p2;
                end if;
            end if; 
        end if;
    end process;

    add_3_375_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add_3_375_fu_184 <= AB_15_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    add_3_375_fu_184 <= add_ln48_15_fu_792_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_124 <= AB_reload;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    empty_fu_124 <= add_ln48_fu_717_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_546_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_188 <= add_ln43_fu_552_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_188 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_q0;
                block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_q0;
                block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_q0;
                block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_q0;
                icmp_ln43_reg_1076 <= icmp_ln43_fu_546_p2;
                icmp_ln43_reg_1076_pp0_iter1_reg <= icmp_ln43_reg_1076;
                tempB_a_1_reg_1108 <= Bcols_dout(63 downto 32);
                tempB_a_reg_1100 <= tempB_a_fu_571_p1;
                trunc_ln45_2_reg_1116 <= Bcols_dout(95 downto 64);
                trunc_ln45_3_reg_1124 <= Bcols_dout(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                mul_ln48_10_reg_1214 <= mul_ln48_10_fu_645_p2;
                mul_ln48_11_reg_1219 <= mul_ln48_11_fu_649_p2;
                mul_ln48_12_reg_1224 <= mul_ln48_12_fu_653_p2;
                mul_ln48_13_reg_1229 <= mul_ln48_13_fu_657_p2;
                mul_ln48_14_reg_1234 <= mul_ln48_14_fu_661_p2;
                mul_ln48_15_reg_1239 <= mul_ln48_15_fu_665_p2;
                mul_ln48_1_reg_1169 <= mul_ln48_1_fu_609_p2;
                mul_ln48_2_reg_1174 <= mul_ln48_2_fu_613_p2;
                mul_ln48_3_reg_1179 <= mul_ln48_3_fu_617_p2;
                mul_ln48_4_reg_1184 <= mul_ln48_4_fu_621_p2;
                mul_ln48_5_reg_1189 <= mul_ln48_5_fu_625_p2;
                mul_ln48_6_reg_1194 <= mul_ln48_6_fu_629_p2;
                mul_ln48_7_reg_1199 <= mul_ln48_7_fu_633_p2;
                mul_ln48_8_reg_1204 <= mul_ln48_8_fu_637_p2;
                mul_ln48_9_reg_1209 <= mul_ln48_9_fu_641_p2;
                mul_ln48_reg_1164 <= mul_ln48_fu_605_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Bcols_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, Bcols_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bcols_blk_n <= Bcols_empty_n;
        else 
            Bcols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bcols_read <= ap_const_logic_1;
        else 
            Bcols_read <= ap_const_logic_0;
        end if; 
    end process;

    add_12961_out <= add_12961_fu_128;

    add_12961_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_12961_out_ap_vld <= ap_const_logic_1;
        else 
            add_12961_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_164_out <= add_164_fu_140;

    add_164_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_164_out_ap_vld <= ap_const_logic_1;
        else 
            add_164_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_1_165_out <= add_1_165_fu_144;

    add_1_165_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_1_165_out_ap_vld <= ap_const_logic_1;
        else 
            add_1_165_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_1_266_out <= add_1_266_fu_148;

    add_1_266_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_1_266_out_ap_vld <= ap_const_logic_1;
        else 
            add_1_266_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_1_367_out <= add_1_367_fu_152;

    add_1_367_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_1_367_out_ap_vld <= ap_const_logic_1;
        else 
            add_1_367_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_23462_out <= add_23462_fu_132;

    add_23462_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_23462_out_ap_vld <= ap_const_logic_1;
        else 
            add_23462_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_268_out <= add_268_fu_156;

    add_268_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_268_out_ap_vld <= ap_const_logic_1;
        else 
            add_268_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_2_169_out <= add_2_169_fu_160;

    add_2_169_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_2_169_out_ap_vld <= ap_const_logic_1;
        else 
            add_2_169_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_2_270_out <= add_2_270_fu_164;

    add_2_270_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_2_270_out_ap_vld <= ap_const_logic_1;
        else 
            add_2_270_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_2_371_out <= add_2_371_fu_168;

    add_2_371_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_2_371_out_ap_vld <= ap_const_logic_1;
        else 
            add_2_371_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_33963_out <= add_33963_fu_136;

    add_33963_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_33963_out_ap_vld <= ap_const_logic_1;
        else 
            add_33963_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_372_out <= add_372_fu_172;

    add_372_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_372_out_ap_vld <= ap_const_logic_1;
        else 
            add_372_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_3_173_out <= add_3_173_fu_176;

    add_3_173_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_3_173_out_ap_vld <= ap_const_logic_1;
        else 
            add_3_173_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_3_274_out <= add_3_274_fu_180;

    add_3_274_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_3_274_out_ap_vld <= ap_const_logic_1;
        else 
            add_3_274_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_3_375_out <= add_3_375_fu_184;

    add_3_375_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            add_3_375_out_ap_vld <= ap_const_logic_1;
        else 
            add_3_375_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln43_fu_552_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv4_1));
    add_ln48_10_fu_767_p2 <= std_logic_vector(unsigned(mul_ln48_10_reg_1214) + unsigned(add_2_270_fu_164));
    add_ln48_11_fu_772_p2 <= std_logic_vector(unsigned(mul_ln48_11_reg_1219) + unsigned(add_2_371_fu_168));
    add_ln48_12_fu_777_p2 <= std_logic_vector(unsigned(mul_ln48_12_reg_1224) + unsigned(add_372_fu_172));
    add_ln48_13_fu_782_p2 <= std_logic_vector(unsigned(mul_ln48_13_reg_1229) + unsigned(add_3_173_fu_176));
    add_ln48_14_fu_787_p2 <= std_logic_vector(unsigned(mul_ln48_14_reg_1234) + unsigned(add_3_274_fu_180));
    add_ln48_15_fu_792_p2 <= std_logic_vector(unsigned(mul_ln48_15_reg_1239) + unsigned(add_3_375_fu_184));
    add_ln48_1_fu_722_p2 <= std_logic_vector(unsigned(mul_ln48_1_reg_1169) + unsigned(add_12961_fu_128));
    add_ln48_2_fu_727_p2 <= std_logic_vector(unsigned(mul_ln48_2_reg_1174) + unsigned(add_23462_fu_132));
    add_ln48_3_fu_732_p2 <= std_logic_vector(unsigned(mul_ln48_3_reg_1179) + unsigned(add_33963_fu_136));
    add_ln48_4_fu_737_p2 <= std_logic_vector(unsigned(mul_ln48_4_reg_1184) + unsigned(add_164_fu_140));
    add_ln48_5_fu_742_p2 <= std_logic_vector(unsigned(mul_ln48_5_reg_1189) + unsigned(add_1_165_fu_144));
    add_ln48_6_fu_747_p2 <= std_logic_vector(unsigned(mul_ln48_6_reg_1194) + unsigned(add_1_266_fu_148));
    add_ln48_7_fu_752_p2 <= std_logic_vector(unsigned(mul_ln48_7_reg_1199) + unsigned(add_1_367_fu_152));
    add_ln48_8_fu_757_p2 <= std_logic_vector(unsigned(mul_ln48_8_reg_1204) + unsigned(add_268_fu_156));
    add_ln48_9_fu_762_p2 <= std_logic_vector(unsigned(mul_ln48_9_reg_1209) + unsigned(add_2_169_fu_160));
    add_ln48_fu_717_p2 <= std_logic_vector(unsigned(mul_ln48_reg_1164) + unsigned(empty_fu_124));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, Bcols_empty_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = Bcols_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, Bcols_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = Bcols_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, Bcols_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = Bcols_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(Bcols_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = Bcols_empty_n);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln43_fu_546_p2)
    begin
        if (((icmp_ln43_fu_546_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_188)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_188;
        end if; 
    end process;

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_address0 <= zext_ln43_fu_558_p1(3 - 1 downto 0);

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0 <= ap_const_logic_1;
        else 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_address0 <= zext_ln43_fu_558_p1(3 - 1 downto 0);

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0 <= ap_const_logic_1;
        else 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_address0 <= zext_ln43_fu_558_p1(3 - 1 downto 0);

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0 <= ap_const_logic_1;
        else 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_address0 <= zext_ln43_fu_558_p1(3 - 1 downto 0);

    block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0 <= ap_const_logic_1;
        else 
            block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln43_fu_546_p2 <= "1" when (ap_sig_allocacmp_k_1 = ap_const_lv4_8) else "0";
    p_out <= empty_fu_124;

    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_reg_1076_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_1076_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempB_a_fu_571_p1 <= Bcols_dout(32 - 1 downto 0);
    zext_ln43_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_1),64));
end behav;
