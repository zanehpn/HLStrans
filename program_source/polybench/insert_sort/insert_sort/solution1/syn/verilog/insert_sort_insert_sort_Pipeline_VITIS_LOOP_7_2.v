// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module insert_sort_insert_sort_Pipeline_VITIS_LOOP_7_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln4_1,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_load,
        icmp_ln7_4,
        item,
        j_1_out,
        j_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] zext_ln4_1;
output  [13:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
input  [30:0] A_load;
input  [0:0] icmp_ln7_4;
input  [31:0] item;
output  [13:0] j_1_out;
output   j_1_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] A_address0;
reg A_ce0;
reg A_we0;
reg[13:0] j_1_out;
reg j_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] empty_fu_155_p1;
reg   [13:0] empty_reg_318;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln7_fu_159_p2;
reg   [0:0] icmp_ln7_reg_324;
wire   [14:0] add_ln9_fu_165_p2;
reg   [14:0] add_ln9_reg_328;
wire   [0:0] addr_cmp_fu_183_p2;
reg   [0:0] addr_cmp_reg_338;
wire   [0:0] icmp_ln7_3_fu_198_p2;
reg   [0:0] icmp_ln7_3_reg_343;
wire   [31:0] reuse_select_fu_207_p3;
reg   [31:0] reuse_select_reg_348;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln7_1_fu_233_p2;
reg   [0:0] icmp_ln7_1_reg_359;
wire   [0:0] icmp_ln7_2_fu_239_p2;
reg   [0:0] icmp_ln7_2_reg_364;
wire   [63:0] zext_ln7_fu_175_p1;
wire   [63:0] j_1_cast_cast_fu_245_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln7_1_fu_263_p2;
reg   [63:0] reuse_addr_reg_fu_64;
reg   [31:0] reuse_reg_fu_68;
reg   [14:0] j_fu_72;
wire   [14:0] zext_ln4_1_cast_fu_133_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_129_p0;
wire   [13:0] trunc_ln7_fu_171_p1;
wire   [7:0] tmp_1_fu_189_p4;
wire   [7:0] tmp_fu_219_p4;
wire   [22:0] trunc_ln7_1_fu_229_p1;
wire   [0:0] or_ln7_fu_249_p2;
wire   [0:0] or_ln7_1_fu_253_p2;
wire   [0:0] and_ln7_fu_257_p2;
wire   [0:0] grp_fu_129_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

insert_sort_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_129_p0),
    .din1(item),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_129_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_72 <= zext_ln4_1_cast_fu_133_p1;
    end else if (((1'd1 == and_ln7_1_fu_263_p2) & (icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_fu_72 <= add_ln9_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reuse_addr_reg_fu_64 <= 64'd18446744073709551615;
    end else if (((1'd1 == and_ln7_1_fu_263_p2) & (icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        reuse_addr_reg_fu_64 <= j_1_cast_cast_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        reuse_reg_fu_68 <= 32'd0;
    end else if (((1'd1 == and_ln7_1_fu_263_p2) & (icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        reuse_reg_fu_68 <= reuse_select_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln9_reg_328 <= add_ln9_fu_165_p2;
        addr_cmp_reg_338 <= addr_cmp_fu_183_p2;
        icmp_ln7_3_reg_343 <= icmp_ln7_3_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_318 <= empty_fu_155_p1;
        icmp_ln7_reg_324 <= icmp_ln7_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln7_1_reg_359 <= icmp_ln7_1_fu_233_p2;
        icmp_ln7_2_reg_364 <= icmp_ln7_2_fu_239_p2;
        reuse_select_reg_348 <= reuse_select_fu_207_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = j_1_cast_cast_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln7_fu_175_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln7_1_fu_263_p2) & (icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_out = 14'd0;
    end else if (((icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_1_out = empty_reg_318;
    end else begin
        j_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        j_1_out_ap_vld = 1'b1;
    end else begin
        j_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'd1 == and_ln7_1_fu_263_p2) & (icmp_ln7_reg_324 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln7_reg_324 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = reuse_select_reg_348;

assign add_ln9_fu_165_p2 = ($signed(j_fu_72) + $signed(15'd32767));

assign addr_cmp_fu_183_p2 = ((reuse_addr_reg_fu_64 == zext_ln7_fu_175_p1) ? 1'b1 : 1'b0);

assign and_ln7_1_fu_263_p2 = (grp_fu_129_p2 & and_ln7_fu_257_p2);

assign and_ln7_fu_257_p2 = (or_ln7_fu_249_p2 & or_ln7_1_fu_253_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_fu_155_p1 = j_fu_72[13:0];

assign grp_fu_129_p0 = reuse_select_fu_207_p3;

assign icmp_ln7_1_fu_233_p2 = ((tmp_fu_219_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_239_p2 = ((trunc_ln7_1_fu_229_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_3_fu_198_p2 = ((tmp_1_fu_189_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_159_p2 = ((j_fu_72 == 15'd0) ? 1'b1 : 1'b0);

assign j_1_cast_cast_fu_245_p1 = empty_reg_318;

assign or_ln7_1_fu_253_p2 = (icmp_ln7_4 | icmp_ln7_3_reg_343);

assign or_ln7_fu_249_p2 = (icmp_ln7_2_reg_364 | icmp_ln7_1_reg_359);

assign reuse_select_fu_207_p3 = ((addr_cmp_reg_338[0:0] == 1'b1) ? reuse_reg_fu_68 : A_q0);

assign tmp_1_fu_189_p4 = {{A_load[30:23]}};

assign tmp_fu_219_p4 = {{reuse_select_fu_207_p3[30:23]}};

assign trunc_ln7_1_fu_229_p1 = reuse_select_fu_207_p3[22:0];

assign trunc_ln7_fu_171_p1 = add_ln9_fu_165_p2[13:0];

assign zext_ln4_1_cast_fu_133_p1 = zext_ln4_1;

assign zext_ln7_fu_175_p1 = trunc_ln7_fu_171_p1;

endmodule //insert_sort_insert_sort_Pipeline_VITIS_LOOP_7_2
