-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seidel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tsteps : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of seidel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "seidel_seidel,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.394000,HLS_SYN_LAT=34588161,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1670,HLS_SYN_LUT=1828,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1270 : STD_LOGIC_VECTOR (12 downto 0) := "1001001110000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_77 : STD_LOGIC_VECTOR (6 downto 0) := "1110111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal select_ln4_fu_125_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln4_reg_258 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln8_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_fu_153_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_10_reg_264 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal A_load_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln13_fu_193_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln13_reg_280 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln13_1_fu_225_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln13_1_reg_285 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_12_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_12_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_done : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_idle : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_ready : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce0 : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_we0 : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce1 : STD_LOGIC;
    signal grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_cast_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_next16_fu_200_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_64 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln8_fu_110_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln10_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_141_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_133_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_cast_fu_149_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_11_fu_168_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_181_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_173_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_fu_189_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_213_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_205_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_11_fu_221_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component seidel_seidel_Pipeline_VITIS_LOOP_12_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty_5 : IN STD_LOGIC_VECTOR (63 downto 0);
        sub_ln13 : IN STD_LOGIC_VECTOR (13 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        empty : IN STD_LOGIC_VECTOR (13 downto 0);
        sub_ln13_1 : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81 : component seidel_seidel_Pipeline_VITIS_LOOP_12_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start,
        ap_done => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_done,
        ap_idle => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_idle,
        ap_ready => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_ready,
        empty_5 => empty_12_reg_290,
        sub_ln13 => sub_ln13_reg_280,
        A_address0 => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address0,
        A_ce0 => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce0,
        A_we0 => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_we0,
        A_d0 => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_d0,
        A_q0 => A_q0,
        A_address1 => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address1,
        A_ce1 => grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce1,
        A_q1 => A_q1,
        empty => empty_10_reg_264,
        sub_ln13_1 => sub_ln13_1_reg_285);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_ready = ap_const_logic_1)) then 
                    grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_60 <= ap_const_lv7_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_fu_60 <= indvars_iv_next16_fu_200_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_64 <= ap_const_lv13_0;
            elsif (((icmp_ln8_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_64 <= add_ln8_fu_110_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                A_load_reg_275 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    empty_10_reg_264(13 downto 3) <= empty_10_fu_153_p2(13 downto 3);
                select_ln4_reg_258 <= select_ln4_fu_125_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_12_reg_290 <= empty_12_fu_232_p1;
                    sub_ln13_1_reg_285(13 downto 3) <= sub_ln13_1_fu_225_p2(13 downto 3);
                    sub_ln13_reg_280(13 downto 3) <= sub_ln13_fu_193_p2(13 downto 3);
            end if;
        end if;
    end process;
    empty_10_reg_264(2 downto 0) <= "000";
    sub_ln13_reg_280(2 downto 0) <= "000";
    sub_ln13_1_reg_285(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_104_p2, grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address0, ap_CS_fsm_state6, p_cast_fu_164_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= p_cast_fu_164_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address0;
        else 
            A_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    A_address1 <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_address1;

    A_ce0_assign_proc : process(ap_CS_fsm_state3, grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce0 <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce0;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce1 <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_ce1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_d0;

    A_we0_assign_proc : process(grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_we0 <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_A_we0;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln8_fu_110_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_64) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_done)
    begin
        if ((grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_104_p2)
    begin
        if (((icmp_ln8_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_104_p2)
    begin
        if (((icmp_ln8_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_153_p2 <= std_logic_vector(unsigned(tmp_fu_133_p3) - unsigned(tmp_1_cast_fu_149_p1));
    empty_11_fu_168_p2 <= std_logic_vector(unsigned(select_ln4_reg_258) + unsigned(ap_const_lv7_7F));
    empty_12_fu_232_p1 <= A_load_reg_275;
    grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start <= grp_seidel_Pipeline_VITIS_LOOP_12_3_fu_81_ap_start_reg;
    icmp_ln10_fu_119_p2 <= "1" when (i_fu_60 = ap_const_lv7_77) else "0";
    icmp_ln8_fu_104_p2 <= "1" when (indvar_flatten_fu_64 = ap_const_lv13_1270) else "0";
    indvars_iv_next16_fu_200_p2 <= std_logic_vector(unsigned(select_ln4_reg_258) + unsigned(ap_const_lv7_1));
    p_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_10_reg_264),64));
    select_ln4_fu_125_p3 <= 
        ap_const_lv7_1 when (icmp_ln10_fu_119_p2(0) = '1') else 
        i_fu_60;
    sub_ln13_1_fu_225_p2 <= std_logic_vector(unsigned(tmp_4_fu_205_p3) - unsigned(zext_ln13_11_fu_221_p1));
    sub_ln13_fu_193_p2 <= std_logic_vector(unsigned(tmp_2_fu_173_p3) - unsigned(zext_ln13_fu_189_p1));
    tmp_1_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_141_p3),14));
    tmp_1_fu_141_p3 <= (select_ln4_fu_125_p3 & ap_const_lv3_0);
    tmp_2_fu_173_p3 <= (empty_11_fu_168_p2 & ap_const_lv7_0);
    tmp_3_fu_181_p3 <= (empty_11_fu_168_p2 & ap_const_lv3_0);
    tmp_4_fu_205_p3 <= (indvars_iv_next16_fu_200_p2 & ap_const_lv7_0);
    tmp_5_fu_213_p3 <= (indvars_iv_next16_fu_200_p2 & ap_const_lv3_0);
    tmp_fu_133_p3 <= (select_ln4_fu_125_p3 & ap_const_lv7_0);
    zext_ln13_11_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_213_p3),14));
    zext_ln13_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_181_p3),14));
end behav;
