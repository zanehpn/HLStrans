-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_66_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    accum_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_ce0 : OUT STD_LOGIC;
    accum_V_we0 : OUT STD_LOGIC;
    accum_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_ce1 : OUT STD_LOGIC;
    accum_V_we1 : OUT STD_LOGIC;
    accum_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_1_ce0 : OUT STD_LOGIC;
    accum_V_1_we0 : OUT STD_LOGIC;
    accum_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_1_ce1 : OUT STD_LOGIC;
    accum_V_1_we1 : OUT STD_LOGIC;
    accum_V_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_2_ce0 : OUT STD_LOGIC;
    accum_V_2_we0 : OUT STD_LOGIC;
    accum_V_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_2_ce1 : OUT STD_LOGIC;
    accum_V_2_we1 : OUT STD_LOGIC;
    accum_V_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_3_ce0 : OUT STD_LOGIC;
    accum_V_3_we0 : OUT STD_LOGIC;
    accum_V_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_3_ce1 : OUT STD_LOGIC;
    accum_V_3_we1 : OUT STD_LOGIC;
    accum_V_3_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_66_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln66_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal tmp_fu_654_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_881 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln70_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln70_3_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_4_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln70_5_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_6_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln70_7_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_8_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln70_9_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_10_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln70_11_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_12_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln70_13_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_14_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_15_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln66_fu_648_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal trunc_ln66_fu_638_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln70_fu_670_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_1_fu_689_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_2_fu_702_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_3_fu_715_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_4_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_5_fu_741_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_6_fu_754_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_7_fu_767_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_8_fu_780_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_9_fu_793_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_10_fu_806_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_11_fu_819_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_12_fu_832_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_13_fu_845_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln70_14_fu_858_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln66_fu_642_p2 = ap_const_lv1_0)) then 
                    i_fu_70 <= add_ln66_fu_648_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_reg_881(9 downto 4) <= tmp_fu_654_p3(9 downto 4);
            end if;
        end if;
    end process;
    tmp_reg_881(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    accum_V_1_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_1_fu_676_p1, ap_CS_fsm_state2, zext_ln70_3_fu_707_p1, ap_CS_fsm_state3, zext_ln70_5_fu_733_p1, ap_CS_fsm_state4, zext_ln70_7_fu_759_p1, ap_CS_fsm_state5, zext_ln70_9_fu_785_p1, ap_CS_fsm_state6, zext_ln70_11_fu_811_p1, ap_CS_fsm_state7, zext_ln70_13_fu_837_p1, zext_ln70_15_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_1_address0 <= zext_ln70_15_fu_863_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_1_address0 <= zext_ln70_13_fu_837_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_1_address0 <= zext_ln70_11_fu_811_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_1_address0 <= zext_ln70_9_fu_785_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_1_address0 <= zext_ln70_7_fu_759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_1_address0 <= zext_ln70_5_fu_733_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_1_address0 <= zext_ln70_3_fu_707_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_1_address0 <= zext_ln70_1_fu_676_p1(10 - 1 downto 0);
        else 
            accum_V_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_1_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_fu_662_p1, zext_ln70_2_fu_694_p1, ap_CS_fsm_state2, zext_ln70_4_fu_720_p1, ap_CS_fsm_state3, zext_ln70_6_fu_746_p1, ap_CS_fsm_state4, zext_ln70_8_fu_772_p1, ap_CS_fsm_state5, zext_ln70_10_fu_798_p1, ap_CS_fsm_state6, zext_ln70_12_fu_824_p1, ap_CS_fsm_state7, zext_ln70_14_fu_850_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_1_address1 <= zext_ln70_14_fu_850_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_1_address1 <= zext_ln70_12_fu_824_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_1_address1 <= zext_ln70_10_fu_798_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_1_address1 <= zext_ln70_8_fu_772_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_1_address1 <= zext_ln70_6_fu_746_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_1_address1 <= zext_ln70_4_fu_720_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_1_address1 <= zext_ln70_2_fu_694_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_1_address1 <= zext_ln70_fu_662_p1(10 - 1 downto 0);
        else 
            accum_V_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_1_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_1_ce0 <= ap_const_logic_1;
        else 
            accum_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_1_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_1_ce1 <= ap_const_logic_1;
        else 
            accum_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    accum_V_1_d0 <= ap_const_lv16_0;
    accum_V_1_d1 <= ap_const_lv16_0;

    accum_V_1_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_1_we0 <= ap_const_logic_1;
        else 
            accum_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_1_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_1_we1 <= ap_const_logic_1;
        else 
            accum_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_2_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_1_fu_676_p1, ap_CS_fsm_state2, zext_ln70_3_fu_707_p1, ap_CS_fsm_state3, zext_ln70_5_fu_733_p1, ap_CS_fsm_state4, zext_ln70_7_fu_759_p1, ap_CS_fsm_state5, zext_ln70_9_fu_785_p1, ap_CS_fsm_state6, zext_ln70_11_fu_811_p1, ap_CS_fsm_state7, zext_ln70_13_fu_837_p1, zext_ln70_15_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_2_address0 <= zext_ln70_15_fu_863_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_2_address0 <= zext_ln70_13_fu_837_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_2_address0 <= zext_ln70_11_fu_811_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_2_address0 <= zext_ln70_9_fu_785_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_2_address0 <= zext_ln70_7_fu_759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_2_address0 <= zext_ln70_5_fu_733_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_2_address0 <= zext_ln70_3_fu_707_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_2_address0 <= zext_ln70_1_fu_676_p1(10 - 1 downto 0);
        else 
            accum_V_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_2_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_fu_662_p1, zext_ln70_2_fu_694_p1, ap_CS_fsm_state2, zext_ln70_4_fu_720_p1, ap_CS_fsm_state3, zext_ln70_6_fu_746_p1, ap_CS_fsm_state4, zext_ln70_8_fu_772_p1, ap_CS_fsm_state5, zext_ln70_10_fu_798_p1, ap_CS_fsm_state6, zext_ln70_12_fu_824_p1, ap_CS_fsm_state7, zext_ln70_14_fu_850_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_2_address1 <= zext_ln70_14_fu_850_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_2_address1 <= zext_ln70_12_fu_824_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_2_address1 <= zext_ln70_10_fu_798_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_2_address1 <= zext_ln70_8_fu_772_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_2_address1 <= zext_ln70_6_fu_746_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_2_address1 <= zext_ln70_4_fu_720_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_2_address1 <= zext_ln70_2_fu_694_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_2_address1 <= zext_ln70_fu_662_p1(10 - 1 downto 0);
        else 
            accum_V_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_2_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_2_ce0 <= ap_const_logic_1;
        else 
            accum_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_2_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_2_ce1 <= ap_const_logic_1;
        else 
            accum_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    accum_V_2_d0 <= ap_const_lv16_0;
    accum_V_2_d1 <= ap_const_lv16_0;

    accum_V_2_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_2_we0 <= ap_const_logic_1;
        else 
            accum_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_2_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_2_we1 <= ap_const_logic_1;
        else 
            accum_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_3_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_1_fu_676_p1, ap_CS_fsm_state2, zext_ln70_3_fu_707_p1, ap_CS_fsm_state3, zext_ln70_5_fu_733_p1, ap_CS_fsm_state4, zext_ln70_7_fu_759_p1, ap_CS_fsm_state5, zext_ln70_9_fu_785_p1, ap_CS_fsm_state6, zext_ln70_11_fu_811_p1, ap_CS_fsm_state7, zext_ln70_13_fu_837_p1, zext_ln70_15_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_3_address0 <= zext_ln70_15_fu_863_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_3_address0 <= zext_ln70_13_fu_837_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_3_address0 <= zext_ln70_11_fu_811_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_3_address0 <= zext_ln70_9_fu_785_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_3_address0 <= zext_ln70_7_fu_759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_3_address0 <= zext_ln70_5_fu_733_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_3_address0 <= zext_ln70_3_fu_707_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_3_address0 <= zext_ln70_1_fu_676_p1(10 - 1 downto 0);
        else 
            accum_V_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_3_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_fu_662_p1, zext_ln70_2_fu_694_p1, ap_CS_fsm_state2, zext_ln70_4_fu_720_p1, ap_CS_fsm_state3, zext_ln70_6_fu_746_p1, ap_CS_fsm_state4, zext_ln70_8_fu_772_p1, ap_CS_fsm_state5, zext_ln70_10_fu_798_p1, ap_CS_fsm_state6, zext_ln70_12_fu_824_p1, ap_CS_fsm_state7, zext_ln70_14_fu_850_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_3_address1 <= zext_ln70_14_fu_850_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_3_address1 <= zext_ln70_12_fu_824_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_3_address1 <= zext_ln70_10_fu_798_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_3_address1 <= zext_ln70_8_fu_772_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_3_address1 <= zext_ln70_6_fu_746_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_3_address1 <= zext_ln70_4_fu_720_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_3_address1 <= zext_ln70_2_fu_694_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_3_address1 <= zext_ln70_fu_662_p1(10 - 1 downto 0);
        else 
            accum_V_3_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_3_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_3_ce0 <= ap_const_logic_1;
        else 
            accum_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_3_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_3_ce1 <= ap_const_logic_1;
        else 
            accum_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    accum_V_3_d0 <= ap_const_lv16_0;
    accum_V_3_d1 <= ap_const_lv16_0;

    accum_V_3_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_3_we0 <= ap_const_logic_1;
        else 
            accum_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_3_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_3_we1 <= ap_const_logic_1;
        else 
            accum_V_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_1_fu_676_p1, ap_CS_fsm_state2, zext_ln70_3_fu_707_p1, ap_CS_fsm_state3, zext_ln70_5_fu_733_p1, ap_CS_fsm_state4, zext_ln70_7_fu_759_p1, ap_CS_fsm_state5, zext_ln70_9_fu_785_p1, ap_CS_fsm_state6, zext_ln70_11_fu_811_p1, ap_CS_fsm_state7, zext_ln70_13_fu_837_p1, zext_ln70_15_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_address0 <= zext_ln70_15_fu_863_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_address0 <= zext_ln70_13_fu_837_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_address0 <= zext_ln70_11_fu_811_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_address0 <= zext_ln70_9_fu_785_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_address0 <= zext_ln70_7_fu_759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_address0 <= zext_ln70_5_fu_733_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_address0 <= zext_ln70_3_fu_707_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_address0 <= zext_ln70_1_fu_676_p1(10 - 1 downto 0);
        else 
            accum_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, zext_ln70_fu_662_p1, zext_ln70_2_fu_694_p1, ap_CS_fsm_state2, zext_ln70_4_fu_720_p1, ap_CS_fsm_state3, zext_ln70_6_fu_746_p1, ap_CS_fsm_state4, zext_ln70_8_fu_772_p1, ap_CS_fsm_state5, zext_ln70_10_fu_798_p1, ap_CS_fsm_state6, zext_ln70_12_fu_824_p1, ap_CS_fsm_state7, zext_ln70_14_fu_850_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accum_V_address1 <= zext_ln70_14_fu_850_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accum_V_address1 <= zext_ln70_12_fu_824_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_V_address1 <= zext_ln70_10_fu_798_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_V_address1 <= zext_ln70_8_fu_772_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            accum_V_address1 <= zext_ln70_6_fu_746_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_V_address1 <= zext_ln70_4_fu_720_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accum_V_address1 <= zext_ln70_2_fu_694_p1(10 - 1 downto 0);
        elsif (((icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            accum_V_address1 <= zext_ln70_fu_662_p1(10 - 1 downto 0);
        else 
            accum_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_ce0 <= ap_const_logic_1;
        else 
            accum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_ce1 <= ap_const_logic_1;
        else 
            accum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    accum_V_d0 <= ap_const_lv16_0;
    accum_V_d1 <= ap_const_lv16_0;

    accum_V_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_we0 <= ap_const_logic_1;
        else 
            accum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            accum_V_we1 <= ap_const_logic_1;
        else 
            accum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln66_fu_648_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln66_fu_642_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln66_fu_642_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_70, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_70;
        end if; 
    end process;

    icmp_ln66_fu_642_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_40) else "0";
    or_ln70_10_fu_806_p2 <= (tmp_reg_881 or ap_const_lv10_B);
    or_ln70_11_fu_819_p2 <= (tmp_reg_881 or ap_const_lv10_C);
    or_ln70_12_fu_832_p2 <= (tmp_reg_881 or ap_const_lv10_D);
    or_ln70_13_fu_845_p2 <= (tmp_reg_881 or ap_const_lv10_E);
    or_ln70_14_fu_858_p2 <= (tmp_reg_881 or ap_const_lv10_F);
    or_ln70_1_fu_689_p2 <= (tmp_reg_881 or ap_const_lv10_2);
    or_ln70_2_fu_702_p2 <= (tmp_reg_881 or ap_const_lv10_3);
    or_ln70_3_fu_715_p2 <= (tmp_reg_881 or ap_const_lv10_4);
    or_ln70_4_fu_728_p2 <= (tmp_reg_881 or ap_const_lv10_5);
    or_ln70_5_fu_741_p2 <= (tmp_reg_881 or ap_const_lv10_6);
    or_ln70_6_fu_754_p2 <= (tmp_reg_881 or ap_const_lv10_7);
    or_ln70_7_fu_767_p2 <= (tmp_reg_881 or ap_const_lv10_8);
    or_ln70_8_fu_780_p2 <= (tmp_reg_881 or ap_const_lv10_9);
    or_ln70_9_fu_793_p2 <= (tmp_reg_881 or ap_const_lv10_A);
    or_ln70_fu_670_p2 <= (tmp_fu_654_p3 or ap_const_lv10_1);
    tmp_fu_654_p3 <= (trunc_ln66_fu_638_p1 & ap_const_lv4_0);
    trunc_ln66_fu_638_p1 <= ap_sig_allocacmp_i_1(6 - 1 downto 0);
    zext_ln70_10_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_9_fu_793_p2),64));
    zext_ln70_11_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_10_fu_806_p2),64));
    zext_ln70_12_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_11_fu_819_p2),64));
    zext_ln70_13_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_12_fu_832_p2),64));
    zext_ln70_14_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_13_fu_845_p2),64));
    zext_ln70_15_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_14_fu_858_p2),64));
    zext_ln70_1_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_fu_670_p2),64));
    zext_ln70_2_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_1_fu_689_p2),64));
    zext_ln70_3_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_2_fu_702_p2),64));
    zext_ln70_4_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_3_fu_715_p2),64));
    zext_ln70_5_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_4_fu_728_p2),64));
    zext_ln70_6_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_5_fu_741_p2),64));
    zext_ln70_7_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_6_fu_754_p2),64));
    zext_ln70_8_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_7_fu_767_p2),64));
    zext_ln70_9_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln70_8_fu_780_p2),64));
    zext_ln70_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_654_p3),64));
end behav;
