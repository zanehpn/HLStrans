-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_i : IN STD_LOGIC_VECTOR (767 downto 0);
    ctx_o : OUT STD_LOGIC_VECTOR (767 downto 0);
    ctx_o_ap_vld : OUT STD_LOGIC;
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes256_encrypt_ecb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes256_encrypt_ecb_aes256_encrypt_ecb,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.626500,HLS_SYN_LAT=693,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=220468,HLS_SYN_LUT=1124662,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce2 : STD_LOGIC;
    signal sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce3 : STD_LOGIC;
    signal sbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce4 : STD_LOGIC;
    signal sbox_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce5 : STD_LOGIC;
    signal sbox_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce6 : STD_LOGIC;
    signal sbox_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce7 : STD_LOGIC;
    signal sbox_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_290 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal buf_r_load_6_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal buf_r_load_8_reg_395 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal buf_r_load_10_reg_412 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_addr_3_reg_417 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_addr_12_reg_422 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_load_12_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal buf_r_load_14_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ctx_ret_reg_461 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_p_partset613_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_p_partset613_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ctx7_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ctx7_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce2 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce3 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce4 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce5 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce6 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce7 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_or_ln74_1_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_or_ln74_1_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_rcon_1_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_rcon_1_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ctx10_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ctx10_out_ap_vld : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce2 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce3 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce4 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce5 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce6 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce7 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_ce0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_ap_done : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce0 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce1 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce2 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce3 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce4 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce5 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce6 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_267_sbox_ce7 : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_267_ap_return_0 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_expandEncKey_fu_267_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal or_ln74_1_loc_fu_80 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_aes_expandEncKey_fu_267_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_load : IN STD_LOGIC_VECTOR (767 downto 0);
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_partset613_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        p_partset613_out_ap_vld : OUT STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_partset613_reload : IN STD_LOGIC_VECTOR (767 downto 0);
        ctx7_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        ctx7_out_ap_vld : OUT STD_LOGIC;
        sbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce0 : OUT STD_LOGIC;
        sbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce1 : OUT STD_LOGIC;
        sbox_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce2 : OUT STD_LOGIC;
        sbox_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce3 : OUT STD_LOGIC;
        sbox_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce4 : OUT STD_LOGIC;
        sbox_q4 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce5 : OUT STD_LOGIC;
        sbox_q5 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce6 : OUT STD_LOGIC;
        sbox_q6 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce7 : OUT STD_LOGIC;
        sbox_q7 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx7_reload : IN STD_LOGIC_VECTOR (767 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        or_ln74_1_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        or_ln74_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        or_ln74_1_reload : IN STD_LOGIC_VECTOR (767 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_we1 : OUT STD_LOGIC;
        buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rcon_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        rcon_1_out_ap_vld : OUT STD_LOGIC;
        ctx10_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        ctx10_out_ap_vld : OUT STD_LOGIC;
        sbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce0 : OUT STD_LOGIC;
        sbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce1 : OUT STD_LOGIC;
        sbox_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce2 : OUT STD_LOGIC;
        sbox_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce3 : OUT STD_LOGIC;
        sbox_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce4 : OUT STD_LOGIC;
        sbox_q4 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce5 : OUT STD_LOGIC;
        sbox_q5 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce6 : OUT STD_LOGIC;
        sbox_q6 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce7 : OUT STD_LOGIC;
        sbox_q7 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_sub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce0 : OUT STD_LOGIC;
        sbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (767 downto 0);
        k_idx : IN STD_LOGIC_VECTOR (9 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce0 : OUT STD_LOGIC;
        sbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce1 : OUT STD_LOGIC;
        sbox_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce2 : OUT STD_LOGIC;
        sbox_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce3 : OUT STD_LOGIC;
        sbox_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce4 : OUT STD_LOGIC;
        sbox_q4 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce5 : OUT STD_LOGIC;
        sbox_q5 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce6 : OUT STD_LOGIC;
        sbox_q6 : IN STD_LOGIC_VECTOR (7 downto 0);
        sbox_address7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sbox_ce7 : OUT STD_LOGIC;
        sbox_q7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (767 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_addkey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_ret : IN STD_LOGIC_VECTOR (767 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_sbox_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component aes256_encrypt_ecb_sbox_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1,
        address2 => sbox_address2,
        ce2 => sbox_ce2,
        q2 => sbox_q2,
        address3 => sbox_address3,
        ce3 => sbox_ce3,
        q3 => sbox_q3,
        address4 => sbox_address4,
        ce4 => sbox_ce4,
        q4 => sbox_q4,
        address5 => sbox_address5,
        ce5 => sbox_ce5,
        q5 => sbox_q5,
        address6 => sbox_address6,
        ce6 => sbox_ce6,
        q6 => sbox_q6,
        address7 => sbox_address7,
        ce7 => sbox_ce7,
        q7 => sbox_q7);

    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_ready,
        ctx_load => ctx_i,
        k_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_k_ce0,
        k_q0 => k_q0,
        p_partset613_out => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_p_partset613_out,
        p_partset613_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_p_partset613_out_ap_vld);

    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_ready,
        p_partset613_reload => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_p_partset613_out,
        ctx7_out => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ctx7_out,
        ctx7_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ctx7_out_ap_vld,
        sbox_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address0,
        sbox_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce0,
        sbox_q0 => sbox_q0,
        sbox_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address1,
        sbox_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce1,
        sbox_q1 => sbox_q1,
        sbox_address2 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address2,
        sbox_ce2 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce2,
        sbox_q2 => sbox_q2,
        sbox_address3 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address3,
        sbox_ce3 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce3,
        sbox_q3 => sbox_q3,
        sbox_address4 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address4,
        sbox_ce4 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce4,
        sbox_q4 => sbox_q4,
        sbox_address5 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address5,
        sbox_ce5 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce5,
        sbox_q5 => sbox_q5,
        sbox_address6 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address6,
        sbox_ce6 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce6,
        sbox_q6 => sbox_q6,
        sbox_address7 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address7,
        sbox_ce7 => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce7,
        sbox_q7 => sbox_q7);

    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_ready,
        ctx7_reload => grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ctx7_out,
        buf_r_address0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_d0,
        buf_r_address1 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce1,
        buf_r_q1 => buf_r_q1,
        or_ln74_1_out => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_or_ln74_1_out,
        or_ln74_1_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_or_ln74_1_out_ap_vld);

    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_ready,
        or_ln74_1_reload => or_ln74_1_loc_fu_80,
        buf_r_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d0,
        buf_r_q0 => buf_r_q0,
        buf_r_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce1,
        buf_r_we1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we1,
        buf_r_d1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d1,
        buf_r_q1 => buf_r_q1,
        rcon_1_out => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_rcon_1_out,
        rcon_1_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_rcon_1_out_ap_vld,
        ctx10_out => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ctx10_out,
        ctx10_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ctx10_out_ap_vld,
        sbox_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address0,
        sbox_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce0,
        sbox_q0 => sbox_q0,
        sbox_address1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address1,
        sbox_ce1 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce1,
        sbox_q1 => sbox_q1,
        sbox_address2 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address2,
        sbox_ce2 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce2,
        sbox_q2 => sbox_q2,
        sbox_address3 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address3,
        sbox_ce3 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce3,
        sbox_q3 => sbox_q3,
        sbox_address4 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address4,
        sbox_ce4 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce4,
        sbox_q4 => sbox_q4,
        sbox_address5 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address5,
        sbox_ce5 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce5,
        sbox_q5 => sbox_q5,
        sbox_address6 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address6,
        sbox_ce6 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce6,
        sbox_q6 => sbox_q6,
        sbox_address7 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address7,
        sbox_ce7 => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce7,
        sbox_q7 => sbox_q7);

    grp_aes256_encrypt_ecb_Pipeline_sub_fu_259 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_sub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_ready,
        buf_r_address0 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_d0,
        buf_r_address1 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce1,
        buf_r_q1 => buf_r_q1,
        sbox_address0 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_address0,
        sbox_ce0 => grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_ce0,
        sbox_q0 => sbox_q0);

    grp_aes_expandEncKey_fu_267 : component aes256_encrypt_ecb_aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_expandEncKey_fu_267_ap_start,
        ap_done => grp_aes_expandEncKey_fu_267_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_267_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_267_ap_ready,
        ap_ce => ap_const_logic_1,
        p_read => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ctx10_out,
        k_idx => ap_const_lv10_0,
        rc_read => grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_rcon_1_out,
        sbox_address0 => grp_aes_expandEncKey_fu_267_sbox_address0,
        sbox_ce0 => grp_aes_expandEncKey_fu_267_sbox_ce0,
        sbox_q0 => sbox_q0,
        sbox_address1 => grp_aes_expandEncKey_fu_267_sbox_address1,
        sbox_ce1 => grp_aes_expandEncKey_fu_267_sbox_ce1,
        sbox_q1 => sbox_q1,
        sbox_address2 => grp_aes_expandEncKey_fu_267_sbox_address2,
        sbox_ce2 => grp_aes_expandEncKey_fu_267_sbox_ce2,
        sbox_q2 => sbox_q2,
        sbox_address3 => grp_aes_expandEncKey_fu_267_sbox_address3,
        sbox_ce3 => grp_aes_expandEncKey_fu_267_sbox_ce3,
        sbox_q3 => sbox_q3,
        sbox_address4 => grp_aes_expandEncKey_fu_267_sbox_address4,
        sbox_ce4 => grp_aes_expandEncKey_fu_267_sbox_ce4,
        sbox_q4 => sbox_q4,
        sbox_address5 => grp_aes_expandEncKey_fu_267_sbox_address5,
        sbox_ce5 => grp_aes_expandEncKey_fu_267_sbox_ce5,
        sbox_q5 => sbox_q5,
        sbox_address6 => grp_aes_expandEncKey_fu_267_sbox_address6,
        sbox_ce6 => grp_aes_expandEncKey_fu_267_sbox_ce6,
        sbox_q6 => sbox_q6,
        sbox_address7 => grp_aes_expandEncKey_fu_267_sbox_address7,
        sbox_ce7 => grp_aes_expandEncKey_fu_267_sbox_ce7,
        sbox_q7 => sbox_q7,
        ap_return_0 => grp_aes_expandEncKey_fu_267_ap_return_0,
        ap_return_1 => grp_aes_expandEncKey_fu_267_ap_return_1);

    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_addkey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_ready,
        ctx_ret => ctx_ret_reg_461,
        buf_r_address0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_d0,
        buf_r_address1 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce1,
        buf_r_q1 => buf_r_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_expandEncKey_fu_267_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_expandEncKey_fu_267_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state11) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_aes_expandEncKey_fu_267_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_expandEncKey_fu_267_ap_ready = ap_const_logic_1)) then 
                    grp_aes_expandEncKey_fu_267_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                reg_290 <= buf_r_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_290 <= buf_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                buf_r_load_10_reg_412 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                buf_r_load_12_reg_427 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                buf_r_load_14_reg_438 <= buf_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                buf_r_load_6_reg_384 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                buf_r_load_8_reg_395 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                ctx_ret_reg_461 <= grp_aes_expandEncKey_fu_267_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_or_ln74_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                or_ln74_1_loc_fu_80 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_or_ln74_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_284 <= buf_r_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_done, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_done, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_done, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_done, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_done, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state39)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done, ap_CS_fsm_state39)
    begin
        if (((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done, ap_CS_fsm_state39)
    begin
        if (((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_addr_12_reg_422 <= ap_const_lv64_6(4 - 1 downto 0);
    buf_r_addr_3_reg_417 <= ap_const_lv64_9(4 - 1 downto 0);

    buf_r_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, buf_r_addr_3_reg_417, ap_CS_fsm_state17, ap_CS_fsm_state20, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address0, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buf_r_address0 <= buf_r_addr_3_reg_417;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buf_r_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buf_r_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf_r_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buf_r_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_r_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_r_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_r_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_r_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_r_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_r_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf_r_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_r_address0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_address0 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_r_address0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address0;
        else 
            buf_r_address0 <= "XXXX";
        end if; 
    end process;


    buf_r_address1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state15, buf_r_addr_12_reg_422, ap_CS_fsm_state17, ap_CS_fsm_state20, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address1, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address1, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address1, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state39, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_r_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf_r_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_r_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buf_r_address1 <= buf_r_addr_12_reg_422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buf_r_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buf_r_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf_r_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buf_r_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_r_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_r_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_r_address1 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_address1 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_r_address1 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_address1;
        else 
            buf_r_address1 <= "XXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state20, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce0, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_r_ce0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_ce0 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_r_ce0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce0;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state20, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce1, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce1, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce1, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state39, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_r_ce1 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_ce1 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_r_ce1 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_ce1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_d0_assign_proc : process(reg_284, ap_CS_fsm_state21, buf_r_load_6_reg_384, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_d0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d0, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_d0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buf_r_d0 <= buf_r_load_6_reg_384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buf_r_d0 <= reg_284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_r_d0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_d0 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_d0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_r_d0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_d0;
        else 
            buf_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_d1_assign_proc : process(buf_r_q0, reg_284, ap_CS_fsm_state21, reg_290, ap_CS_fsm_state18, ap_CS_fsm_state19, buf_r_load_8_reg_395, buf_r_load_10_reg_412, buf_r_load_12_reg_427, ap_CS_fsm_state17, buf_r_load_14_reg_438, ap_CS_fsm_state20, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d1, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_r_d1 <= buf_r_load_14_reg_438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf_r_d1 <= buf_r_load_12_reg_427;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_r_d1 <= buf_r_load_10_reg_412;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_r_d1 <= buf_r_load_8_reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buf_r_d1 <= reg_284;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_d1 <= reg_290;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            buf_r_d1 <= buf_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_d1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_d1;
        else 
            buf_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_we0_assign_proc : process(ap_CS_fsm_state21, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_we0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we0, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_we0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state39, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_r_we0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_buf_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_we0 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_buf_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_we0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_r_we0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_buf_r_we0;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_we1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we1, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_r_we1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_buf_r_we1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_o <= grp_aes_expandEncKey_fu_267_ap_return_0;

    ctx_o_ap_vld_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ctx_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_277_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_240_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_ap_start_reg;
    grp_aes_expandEncKey_fu_267_ap_start <= grp_aes_expandEncKey_fu_267_ap_start_reg;
    k_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_k_address0;
    k_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_223_k_ce0;

    sbox_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address0, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_address0, grp_aes_expandEncKey_fu_267_sbox_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address0 <= grp_aes_expandEncKey_fu_267_sbox_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address0 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address0;
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address1, grp_aes_expandEncKey_fu_267_sbox_address1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address1 <= grp_aes_expandEncKey_fu_267_sbox_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address1 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address1;
        else 
            sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address2_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address2, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address2, grp_aes_expandEncKey_fu_267_sbox_address2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address2 <= grp_aes_expandEncKey_fu_267_sbox_address2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address2 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address2 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address2;
        else 
            sbox_address2 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address3_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address3, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address3, grp_aes_expandEncKey_fu_267_sbox_address3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address3 <= grp_aes_expandEncKey_fu_267_sbox_address3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address3 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address3 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address3;
        else 
            sbox_address3 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address4_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address4, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address4, grp_aes_expandEncKey_fu_267_sbox_address4, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address4 <= grp_aes_expandEncKey_fu_267_sbox_address4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address4 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address4 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address4;
        else 
            sbox_address4 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address5_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address5, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address5, grp_aes_expandEncKey_fu_267_sbox_address5, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address5 <= grp_aes_expandEncKey_fu_267_sbox_address5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address5 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address5 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address5;
        else 
            sbox_address5 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address6_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address6, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address6, grp_aes_expandEncKey_fu_267_sbox_address6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address6 <= grp_aes_expandEncKey_fu_267_sbox_address6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address6 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address6 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address6;
        else 
            sbox_address6 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_address7_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address7, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address7, grp_aes_expandEncKey_fu_267_sbox_address7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_address7 <= grp_aes_expandEncKey_fu_267_sbox_address7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_address7 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_address7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_address7 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_address7;
        else 
            sbox_address7 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce0, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce0, grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_ce0, grp_aes_expandEncKey_fu_267_sbox_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce0 <= grp_aes_expandEncKey_fu_267_sbox_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_ce0 <= grp_aes256_encrypt_ecb_Pipeline_sub_fu_259_sbox_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce0;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce1, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce1, grp_aes_expandEncKey_fu_267_sbox_ce1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce1 <= grp_aes_expandEncKey_fu_267_sbox_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce1 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce2_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce2, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce2, grp_aes_expandEncKey_fu_267_sbox_ce2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce2 <= grp_aes_expandEncKey_fu_267_sbox_ce2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce2 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce2 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce2;
        else 
            sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce3_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce3, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce3, grp_aes_expandEncKey_fu_267_sbox_ce3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce3 <= grp_aes_expandEncKey_fu_267_sbox_ce3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce3 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce3 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce3;
        else 
            sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce4_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce4, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce4, grp_aes_expandEncKey_fu_267_sbox_ce4, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce4 <= grp_aes_expandEncKey_fu_267_sbox_ce4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce4 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce4 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce4;
        else 
            sbox_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce5_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce5, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce5, grp_aes_expandEncKey_fu_267_sbox_ce5, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce5 <= grp_aes_expandEncKey_fu_267_sbox_ce5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce5 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce5 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce5;
        else 
            sbox_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce6_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce6, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce6, grp_aes_expandEncKey_fu_267_sbox_ce6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce6 <= grp_aes_expandEncKey_fu_267_sbox_ce6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce6 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce6 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce6;
        else 
            sbox_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce7_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce7, grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce7, grp_aes_expandEncKey_fu_267_sbox_ce7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sbox_ce7 <= grp_aes_expandEncKey_fu_267_sbox_ce7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sbox_ce7 <= grp_aes256_encrypt_ecb_Pipeline_ecb3_fu_248_sbox_ce7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sbox_ce7 <= grp_aes256_encrypt_ecb_Pipeline_ecb2_fu_232_sbox_ce7;
        else 
            sbox_ce7 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
