-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gather_node_neighbors is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node : IN STD_LOGIC_VECTOR (31 downto 0);
    node_in_degree : IN STD_LOGIC_VECTOR (31 downto 0);
    node_neighbors_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    node_neighbors_ce0 : OUT STD_LOGIC;
    node_neighbors_we0 : OUT STD_LOGIC;
    node_neighbors_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_offsets_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    neighbor_table_offsets_ce0 : OUT STD_LOGIC;
    neighbor_table_offsets_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gather_node_neighbors is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gather_node_neighbors_gather_node_neighbors,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.128000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=113,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln21_fu_75_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln21_reg_90 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_idle : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_ready : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_neighbor_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_neighbor_table_ce0 : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_ce0 : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_we0 : STD_LOGIC;
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln15_fu_70_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        node_in_degree : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (9 downto 0);
        neighbor_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        neighbor_table_ce0 : OUT STD_LOGIC;
        neighbor_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_neighbors_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        node_neighbors_ce0 : OUT STD_LOGIC;
        node_neighbors_we0 : OUT STD_LOGIC;
        node_neighbors_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59 : component gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start,
        ap_done => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done,
        ap_idle => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_idle,
        ap_ready => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_ready,
        node_in_degree => node_in_degree,
        trunc_ln => trunc_ln21_reg_90,
        neighbor_table_address0 => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_neighbor_table_address0,
        neighbor_table_ce0 => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_neighbor_table_ce0,
        neighbor_table_q0 => neighbor_table_q0,
        node_neighbors_address0 => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_address0,
        node_neighbors_ce0 => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_ce0,
        node_neighbors_we0 => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_we0,
        node_neighbors_d0 => grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln21_reg_90 <= trunc_ln21_fu_75_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done)
    begin
        if ((grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_ap_start_reg;
    neighbor_table_address0 <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_neighbor_table_address0;
    neighbor_table_ce0 <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_neighbor_table_ce0;
    neighbor_table_offsets_address0 <= zext_ln15_fu_70_p1(11 - 1 downto 0);

    neighbor_table_offsets_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            neighbor_table_offsets_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_offsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_neighbors_address0 <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_address0;
    node_neighbors_ce0 <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_ce0;
    node_neighbors_d0 <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_d0;
    node_neighbors_we0 <= grp_gather_node_neighbors_Pipeline_VITIS_LOOP_21_1_fu_59_node_neighbors_we0;
    trunc_ln21_fu_75_p1 <= neighbor_table_offsets_q0(10 - 1 downto 0);
    zext_ln15_fu_70_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(node),64));
end behav;
