// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_25_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_edges,
        edge_list_address0,
        edge_list_ce0,
        edge_list_q0,
        edge_list_address1,
        edge_list_ce1,
        edge_list_q1,
        neightbor_table_offsets_temp_address0,
        neightbor_table_offsets_temp_ce0,
        neightbor_table_offsets_temp_we0,
        neightbor_table_offsets_temp_d0,
        neightbor_table_offsets_temp_q0,
        neightbor_table_offsets_temp_1_address0,
        neightbor_table_offsets_temp_1_ce0,
        neightbor_table_offsets_temp_1_we0,
        neightbor_table_offsets_temp_1_d0,
        neightbor_table_offsets_temp_1_q0,
        neightbor_table_offsets_temp_2_address0,
        neightbor_table_offsets_temp_2_ce0,
        neightbor_table_offsets_temp_2_we0,
        neightbor_table_offsets_temp_2_d0,
        neightbor_table_offsets_temp_2_q0,
        neightbor_table_offsets_temp_3_address0,
        neightbor_table_offsets_temp_3_ce0,
        neightbor_table_offsets_temp_3_we0,
        neightbor_table_offsets_temp_3_d0,
        neightbor_table_offsets_temp_3_q0,
        neighbor_table_address0,
        neighbor_table_ce0,
        neighbor_table_we0,
        neighbor_table_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_edges;
output  [10:0] edge_list_address0;
output   edge_list_ce0;
input  [31:0] edge_list_q0;
output  [10:0] edge_list_address1;
output   edge_list_ce1;
input  [31:0] edge_list_q1;
output  [4:0] neightbor_table_offsets_temp_address0;
output   neightbor_table_offsets_temp_ce0;
output   neightbor_table_offsets_temp_we0;
output  [31:0] neightbor_table_offsets_temp_d0;
input  [31:0] neightbor_table_offsets_temp_q0;
output  [4:0] neightbor_table_offsets_temp_1_address0;
output   neightbor_table_offsets_temp_1_ce0;
output   neightbor_table_offsets_temp_1_we0;
output  [31:0] neightbor_table_offsets_temp_1_d0;
input  [31:0] neightbor_table_offsets_temp_1_q0;
output  [4:0] neightbor_table_offsets_temp_2_address0;
output   neightbor_table_offsets_temp_2_ce0;
output   neightbor_table_offsets_temp_2_we0;
output  [31:0] neightbor_table_offsets_temp_2_d0;
input  [31:0] neightbor_table_offsets_temp_2_q0;
output  [4:0] neightbor_table_offsets_temp_3_address0;
output   neightbor_table_offsets_temp_3_ce0;
output   neightbor_table_offsets_temp_3_we0;
output  [31:0] neightbor_table_offsets_temp_3_d0;
input  [31:0] neightbor_table_offsets_temp_3_q0;
output  [9:0] neighbor_table_address0;
output   neighbor_table_ce0;
output   neighbor_table_we0;
output  [31:0] neighbor_table_d0;

reg ap_idle;
reg edge_list_ce0;
reg edge_list_ce1;
reg[4:0] neightbor_table_offsets_temp_address0;
reg neightbor_table_offsets_temp_ce0;
reg neightbor_table_offsets_temp_we0;
reg[4:0] neightbor_table_offsets_temp_1_address0;
reg neightbor_table_offsets_temp_1_ce0;
reg neightbor_table_offsets_temp_1_we0;
reg[4:0] neightbor_table_offsets_temp_2_address0;
reg neightbor_table_offsets_temp_2_ce0;
reg neightbor_table_offsets_temp_2_we0;
reg[4:0] neightbor_table_offsets_temp_3_address0;
reg neightbor_table_offsets_temp_3_ce0;
reg neightbor_table_offsets_temp_3_we0;
reg neighbor_table_ce0;
reg neighbor_table_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_state24_pp0_stage1_iter11;
wire    ap_block_state26_pp0_stage1_iter12;
wire    ap_block_state28_pp0_stage1_iter13;
wire    ap_block_state30_pp0_stage1_iter14;
wire    ap_block_state32_pp0_stage1_iter15;
wire    ap_block_state34_pp0_stage1_iter16;
wire    ap_block_state36_pp0_stage1_iter17;
wire    ap_block_state38_pp0_stage1_iter18;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln25_reg_289;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln25_fu_181_p2;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
wire    ap_block_state25_pp0_stage0_iter12;
wire    ap_block_state27_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state31_pp0_stage0_iter15;
wire    ap_block_state33_pp0_stage0_iter16;
wire    ap_block_state35_pp0_stage0_iter17;
wire    ap_block_state37_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] tmp_1_fu_193_p3;
reg   [10:0] tmp_1_reg_293;
reg   [10:0] tmp_1_reg_293_pp0_iter1_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter2_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter3_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter4_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter5_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter6_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter7_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter8_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter9_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter10_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter11_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter12_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter13_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter14_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter15_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter16_reg;
reg   [10:0] tmp_1_reg_293_pp0_iter17_reg;
reg   [31:0] dest_reg_303;
wire    ap_block_pp0_stage1_11001;
reg   [1:0] trunc_ln1_reg_309;
reg   [1:0] trunc_ln1_reg_309_pp0_iter2_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter3_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter4_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter5_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter6_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter7_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter8_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter9_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter10_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter11_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter12_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter13_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter14_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter15_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter16_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter17_reg;
reg   [1:0] trunc_ln1_reg_309_pp0_iter18_reg;
reg   [4:0] neightbor_table_offsets_temp_addr_reg_319;
reg   [4:0] neightbor_table_offsets_temp_1_addr_reg_324;
reg   [4:0] neightbor_table_offsets_temp_2_addr_reg_329;
reg   [4:0] neightbor_table_offsets_temp_3_addr_reg_334;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln28_fu_207_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln27_fu_242_p1;
wire   [63:0] zext_ln30_fu_246_p1;
wire   [63:0] zext_ln31_fu_267_p1;
wire    ap_block_pp0_stage1;
reg   [30:0] i_fu_64;
wire   [30:0] add_ln25_fu_187_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
wire   [31:0] add_ln32_fu_272_p2;
wire   [31:0] zext_ln25_fu_177_p1;
wire   [9:0] trunc_ln25_fu_173_p1;
wire   [10:0] or_ln28_fu_201_p2;
wire   [5:0] grp_fu_217_p1;
wire   [31:0] mul_ln30_fu_226_p0;
wire   [33:0] mul_ln30_fu_226_p1;
wire   [38:0] mul_ln30_fu_226_p2;
wire   [31:0] grp_fu_217_p2;
wire   [31:0] offset_fu_254_p6;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to18;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [38:0] mul_ln30_fu_226_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

compute_neighbor_tables_urem_32ns_6ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
urem_32ns_6ns_32_36_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(edge_list_q1),
    .din1(grp_fu_217_p1),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

compute_neighbor_tables_mul_32ns_34ns_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 39 ))
mul_32ns_34ns_39_1_1_U13(
    .din0(mul_ln30_fu_226_p0),
    .din1(mul_ln30_fu_226_p1),
    .dout(mul_ln30_fu_226_p2)
);

compute_neighbor_tables_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U14(
    .din0(neightbor_table_offsets_temp_q0),
    .din1(neightbor_table_offsets_temp_1_q0),
    .din2(neightbor_table_offsets_temp_2_q0),
    .din3(neightbor_table_offsets_temp_3_q0),
    .din4(trunc_ln1_reg_309_pp0_iter18_reg),
    .dout(offset_fu_254_p6)
);

compute_neighbor_tables_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_181_p2 == 1'd1))) begin
            i_fu_64 <= add_ln25_fu_187_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_289 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        dest_reg_303 <= edge_list_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_289 <= icmp_ln25_fu_181_p2;
        neightbor_table_offsets_temp_1_addr_reg_324 <= zext_ln30_fu_246_p1;
        neightbor_table_offsets_temp_2_addr_reg_329 <= zext_ln30_fu_246_p1;
        neightbor_table_offsets_temp_3_addr_reg_334 <= zext_ln30_fu_246_p1;
        neightbor_table_offsets_temp_addr_reg_319 <= zext_ln30_fu_246_p1;
        tmp_1_reg_293_pp0_iter10_reg[10 : 1] <= tmp_1_reg_293_pp0_iter9_reg[10 : 1];
        tmp_1_reg_293_pp0_iter11_reg[10 : 1] <= tmp_1_reg_293_pp0_iter10_reg[10 : 1];
        tmp_1_reg_293_pp0_iter12_reg[10 : 1] <= tmp_1_reg_293_pp0_iter11_reg[10 : 1];
        tmp_1_reg_293_pp0_iter13_reg[10 : 1] <= tmp_1_reg_293_pp0_iter12_reg[10 : 1];
        tmp_1_reg_293_pp0_iter14_reg[10 : 1] <= tmp_1_reg_293_pp0_iter13_reg[10 : 1];
        tmp_1_reg_293_pp0_iter15_reg[10 : 1] <= tmp_1_reg_293_pp0_iter14_reg[10 : 1];
        tmp_1_reg_293_pp0_iter16_reg[10 : 1] <= tmp_1_reg_293_pp0_iter15_reg[10 : 1];
        tmp_1_reg_293_pp0_iter17_reg[10 : 1] <= tmp_1_reg_293_pp0_iter16_reg[10 : 1];
        tmp_1_reg_293_pp0_iter1_reg[10 : 1] <= tmp_1_reg_293[10 : 1];
        tmp_1_reg_293_pp0_iter2_reg[10 : 1] <= tmp_1_reg_293_pp0_iter1_reg[10 : 1];
        tmp_1_reg_293_pp0_iter3_reg[10 : 1] <= tmp_1_reg_293_pp0_iter2_reg[10 : 1];
        tmp_1_reg_293_pp0_iter4_reg[10 : 1] <= tmp_1_reg_293_pp0_iter3_reg[10 : 1];
        tmp_1_reg_293_pp0_iter5_reg[10 : 1] <= tmp_1_reg_293_pp0_iter4_reg[10 : 1];
        tmp_1_reg_293_pp0_iter6_reg[10 : 1] <= tmp_1_reg_293_pp0_iter5_reg[10 : 1];
        tmp_1_reg_293_pp0_iter7_reg[10 : 1] <= tmp_1_reg_293_pp0_iter6_reg[10 : 1];
        tmp_1_reg_293_pp0_iter8_reg[10 : 1] <= tmp_1_reg_293_pp0_iter7_reg[10 : 1];
        tmp_1_reg_293_pp0_iter9_reg[10 : 1] <= tmp_1_reg_293_pp0_iter8_reg[10 : 1];
        trunc_ln1_reg_309 <= {{mul_ln30_fu_226_p2[38:37]}};
        trunc_ln1_reg_309_pp0_iter10_reg <= trunc_ln1_reg_309_pp0_iter9_reg;
        trunc_ln1_reg_309_pp0_iter11_reg <= trunc_ln1_reg_309_pp0_iter10_reg;
        trunc_ln1_reg_309_pp0_iter12_reg <= trunc_ln1_reg_309_pp0_iter11_reg;
        trunc_ln1_reg_309_pp0_iter13_reg <= trunc_ln1_reg_309_pp0_iter12_reg;
        trunc_ln1_reg_309_pp0_iter14_reg <= trunc_ln1_reg_309_pp0_iter13_reg;
        trunc_ln1_reg_309_pp0_iter15_reg <= trunc_ln1_reg_309_pp0_iter14_reg;
        trunc_ln1_reg_309_pp0_iter16_reg <= trunc_ln1_reg_309_pp0_iter15_reg;
        trunc_ln1_reg_309_pp0_iter17_reg <= trunc_ln1_reg_309_pp0_iter16_reg;
        trunc_ln1_reg_309_pp0_iter18_reg <= trunc_ln1_reg_309_pp0_iter17_reg;
        trunc_ln1_reg_309_pp0_iter2_reg <= trunc_ln1_reg_309;
        trunc_ln1_reg_309_pp0_iter3_reg <= trunc_ln1_reg_309_pp0_iter2_reg;
        trunc_ln1_reg_309_pp0_iter4_reg <= trunc_ln1_reg_309_pp0_iter3_reg;
        trunc_ln1_reg_309_pp0_iter5_reg <= trunc_ln1_reg_309_pp0_iter4_reg;
        trunc_ln1_reg_309_pp0_iter6_reg <= trunc_ln1_reg_309_pp0_iter5_reg;
        trunc_ln1_reg_309_pp0_iter7_reg <= trunc_ln1_reg_309_pp0_iter6_reg;
        trunc_ln1_reg_309_pp0_iter8_reg <= trunc_ln1_reg_309_pp0_iter7_reg;
        trunc_ln1_reg_309_pp0_iter9_reg <= trunc_ln1_reg_309_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_293[10 : 1] <= tmp_1_fu_193_p3[10 : 1];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln25_reg_289 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter17_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter14_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter13_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to18 = 1'b1;
    end else begin
        ap_idle_pp0_1to18 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_64;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        edge_list_ce0 = 1'b1;
    end else begin
        edge_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        edge_list_ce1 = 1'b1;
    end else begin
        edge_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        neighbor_table_ce0 = 1'b1;
    end else begin
        neighbor_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        neighbor_table_we0 = 1'b1;
    end else begin
        neighbor_table_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            neightbor_table_offsets_temp_1_address0 = neightbor_table_offsets_temp_1_addr_reg_324;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            neightbor_table_offsets_temp_1_address0 = zext_ln30_fu_246_p1;
        end else begin
            neightbor_table_offsets_temp_1_address0 = 'bx;
        end
    end else begin
        neightbor_table_offsets_temp_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        neightbor_table_offsets_temp_1_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln1_reg_309_pp0_iter18_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        neightbor_table_offsets_temp_1_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            neightbor_table_offsets_temp_2_address0 = neightbor_table_offsets_temp_2_addr_reg_329;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            neightbor_table_offsets_temp_2_address0 = zext_ln30_fu_246_p1;
        end else begin
            neightbor_table_offsets_temp_2_address0 = 'bx;
        end
    end else begin
        neightbor_table_offsets_temp_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        neightbor_table_offsets_temp_2_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln1_reg_309_pp0_iter18_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        neightbor_table_offsets_temp_2_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            neightbor_table_offsets_temp_3_address0 = neightbor_table_offsets_temp_3_addr_reg_334;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            neightbor_table_offsets_temp_3_address0 = zext_ln30_fu_246_p1;
        end else begin
            neightbor_table_offsets_temp_3_address0 = 'bx;
        end
    end else begin
        neightbor_table_offsets_temp_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        neightbor_table_offsets_temp_3_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln1_reg_309_pp0_iter18_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        neightbor_table_offsets_temp_3_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            neightbor_table_offsets_temp_address0 = neightbor_table_offsets_temp_addr_reg_319;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            neightbor_table_offsets_temp_address0 = zext_ln30_fu_246_p1;
        end else begin
            neightbor_table_offsets_temp_address0 = 'bx;
        end
    end else begin
        neightbor_table_offsets_temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        neightbor_table_offsets_temp_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln1_reg_309_pp0_iter18_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        neightbor_table_offsets_temp_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to18 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_187_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign add_ln32_fu_272_p2 = (offset_fu_254_p6 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign edge_list_address0 = zext_ln27_fu_242_p1;

assign edge_list_address1 = zext_ln28_fu_207_p1;

assign grp_fu_217_p1 = 32'd25;

assign icmp_ln25_fu_181_p2 = (($signed(zext_ln25_fu_177_p1) < $signed(num_edges)) ? 1'b1 : 1'b0);

assign mul_ln30_fu_226_p0 = mul_ln30_fu_226_p00;

assign mul_ln30_fu_226_p00 = dest_reg_303;

assign mul_ln30_fu_226_p1 = 39'd5497558139;

assign neighbor_table_address0 = zext_ln31_fu_267_p1;

assign neighbor_table_d0 = edge_list_q0;

assign neightbor_table_offsets_temp_1_d0 = add_ln32_fu_272_p2;

assign neightbor_table_offsets_temp_2_d0 = add_ln32_fu_272_p2;

assign neightbor_table_offsets_temp_3_d0 = add_ln32_fu_272_p2;

assign neightbor_table_offsets_temp_d0 = add_ln32_fu_272_p2;

assign or_ln28_fu_201_p2 = (tmp_1_fu_193_p3 | 11'd1);

assign tmp_1_fu_193_p3 = {{trunc_ln25_fu_173_p1}, {1'd0}};

assign trunc_ln25_fu_173_p1 = ap_sig_allocacmp_i_1[9:0];

assign zext_ln25_fu_177_p1 = ap_sig_allocacmp_i_1;

assign zext_ln27_fu_242_p1 = tmp_1_reg_293_pp0_iter17_reg;

assign zext_ln28_fu_207_p1 = or_ln28_fu_201_p2;

assign zext_ln30_fu_246_p1 = grp_fu_217_p2;

assign zext_ln31_fu_267_p1 = offset_fu_254_p6;

always @ (posedge ap_clk) begin
    tmp_1_reg_293[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter1_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter2_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter3_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter4_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter5_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter6_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter7_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter8_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter9_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter10_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter11_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter12_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter13_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter14_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter15_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter16_reg[0] <= 1'b0;
    tmp_1_reg_293_pp0_iter17_reg[0] <= 1'b0;
end

endmodule //compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_25_2
