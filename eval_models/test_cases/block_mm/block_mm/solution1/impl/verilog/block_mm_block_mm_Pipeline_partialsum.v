// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module block_mm_block_mm_Pipeline_partialsum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Bcols_dout,
        Bcols_empty_n,
        Bcols_read,
        AB_15_reload,
        AB_14_reload,
        AB_13_reload,
        AB_12_reload,
        AB_11_reload,
        AB_10_reload,
        AB_9_reload,
        AB_8_reload,
        AB_7_reload,
        AB_6_reload,
        AB_5_reload,
        AB_4_reload,
        AB_3_reload,
        AB_2_reload,
        AB_1_reload,
        AB_reload,
        add_3_375_out,
        add_3_375_out_ap_vld,
        add_3_274_out,
        add_3_274_out_ap_vld,
        add_3_173_out,
        add_3_173_out_ap_vld,
        add_372_out,
        add_372_out_ap_vld,
        add_2_371_out,
        add_2_371_out_ap_vld,
        add_2_270_out,
        add_2_270_out_ap_vld,
        add_2_169_out,
        add_2_169_out_ap_vld,
        add_268_out,
        add_268_out_ap_vld,
        add_1_367_out,
        add_1_367_out_ap_vld,
        add_1_266_out,
        add_1_266_out_ap_vld,
        add_1_165_out,
        add_1_165_out_ap_vld,
        add_164_out,
        add_164_out_ap_vld,
        add_33963_out,
        add_33963_out_ap_vld,
        add_23462_out,
        add_23462_out_ap_vld,
        add_12961_out,
        add_12961_out_ap_vld,
        p_out,
        p_out_ap_vld,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_address0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_q0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_address0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_q0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_address0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_q0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_address0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0,
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] Bcols_dout;
input   Bcols_empty_n;
output   Bcols_read;
input  [31:0] AB_15_reload;
input  [31:0] AB_14_reload;
input  [31:0] AB_13_reload;
input  [31:0] AB_12_reload;
input  [31:0] AB_11_reload;
input  [31:0] AB_10_reload;
input  [31:0] AB_9_reload;
input  [31:0] AB_8_reload;
input  [31:0] AB_7_reload;
input  [31:0] AB_6_reload;
input  [31:0] AB_5_reload;
input  [31:0] AB_4_reload;
input  [31:0] AB_3_reload;
input  [31:0] AB_2_reload;
input  [31:0] AB_1_reload;
input  [31:0] AB_reload;
output  [31:0] add_3_375_out;
output   add_3_375_out_ap_vld;
output  [31:0] add_3_274_out;
output   add_3_274_out_ap_vld;
output  [31:0] add_3_173_out;
output   add_3_173_out_ap_vld;
output  [31:0] add_372_out;
output   add_372_out_ap_vld;
output  [31:0] add_2_371_out;
output   add_2_371_out_ap_vld;
output  [31:0] add_2_270_out;
output   add_2_270_out_ap_vld;
output  [31:0] add_2_169_out;
output   add_2_169_out_ap_vld;
output  [31:0] add_268_out;
output   add_268_out_ap_vld;
output  [31:0] add_1_367_out;
output   add_1_367_out_ap_vld;
output  [31:0] add_1_266_out;
output   add_1_266_out_ap_vld;
output  [31:0] add_1_165_out;
output   add_1_165_out_ap_vld;
output  [31:0] add_164_out;
output   add_164_out_ap_vld;
output  [31:0] add_33963_out;
output   add_33963_out_ap_vld;
output  [31:0] add_23462_out;
output   add_23462_out_ap_vld;
output  [31:0] add_12961_out;
output   add_12961_out_ap_vld;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [2:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_address0;
output   block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0;
input  [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_q0;
output  [2:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_address0;
output   block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0;
input  [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_q0;
output  [2:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_address0;
output   block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0;
input  [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_q0;
output  [2:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_address0;
output   block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0;
input  [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_q0;

reg ap_idle;
reg Bcols_read;
reg add_3_375_out_ap_vld;
reg add_3_274_out_ap_vld;
reg add_3_173_out_ap_vld;
reg add_372_out_ap_vld;
reg add_2_371_out_ap_vld;
reg add_2_270_out_ap_vld;
reg add_2_169_out_ap_vld;
reg add_268_out_ap_vld;
reg add_1_367_out_ap_vld;
reg add_1_266_out_ap_vld;
reg add_1_165_out_ap_vld;
reg add_164_out_ap_vld;
reg add_33963_out_ap_vld;
reg add_23462_out_ap_vld;
reg add_12961_out_ap_vld;
reg p_out_ap_vld;
reg block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0;
reg block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0;
reg block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0;
reg block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_546_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Bcols_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln43_reg_1076;
reg   [0:0] icmp_ln43_reg_1076_pp0_iter1_reg;
wire  signed [31:0] tempB_a_fu_571_p1;
reg  signed [31:0] tempB_a_reg_1100;
reg  signed [31:0] tempB_a_1_reg_1108;
reg  signed [31:0] trunc_ln45_2_reg_1116;
reg  signed [31:0] trunc_ln45_3_reg_1124;
reg  signed [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132;
reg  signed [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140;
reg  signed [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148;
reg  signed [31:0] block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156;
wire   [31:0] mul_ln48_fu_605_p2;
reg   [31:0] mul_ln48_reg_1164;
wire   [31:0] mul_ln48_1_fu_609_p2;
reg   [31:0] mul_ln48_1_reg_1169;
wire   [31:0] mul_ln48_2_fu_613_p2;
reg   [31:0] mul_ln48_2_reg_1174;
wire   [31:0] mul_ln48_3_fu_617_p2;
reg   [31:0] mul_ln48_3_reg_1179;
wire   [31:0] mul_ln48_4_fu_621_p2;
reg   [31:0] mul_ln48_4_reg_1184;
wire   [31:0] mul_ln48_5_fu_625_p2;
reg   [31:0] mul_ln48_5_reg_1189;
wire   [31:0] mul_ln48_6_fu_629_p2;
reg   [31:0] mul_ln48_6_reg_1194;
wire   [31:0] mul_ln48_7_fu_633_p2;
reg   [31:0] mul_ln48_7_reg_1199;
wire   [31:0] mul_ln48_8_fu_637_p2;
reg   [31:0] mul_ln48_8_reg_1204;
wire   [31:0] mul_ln48_9_fu_641_p2;
reg   [31:0] mul_ln48_9_reg_1209;
wire   [31:0] mul_ln48_10_fu_645_p2;
reg   [31:0] mul_ln48_10_reg_1214;
wire   [31:0] mul_ln48_11_fu_649_p2;
reg   [31:0] mul_ln48_11_reg_1219;
wire   [31:0] mul_ln48_12_fu_653_p2;
reg   [31:0] mul_ln48_12_reg_1224;
wire   [31:0] mul_ln48_13_fu_657_p2;
reg   [31:0] mul_ln48_13_reg_1229;
wire   [31:0] mul_ln48_14_fu_661_p2;
reg   [31:0] mul_ln48_14_reg_1234;
wire   [31:0] mul_ln48_15_fu_665_p2;
reg   [31:0] mul_ln48_15_reg_1239;
wire   [63:0] zext_ln43_fu_558_p1;
reg   [31:0] empty_fu_124;
wire   [31:0] add_ln48_fu_717_p2;
wire    ap_loop_init;
reg   [31:0] add_12961_fu_128;
wire   [31:0] add_ln48_1_fu_722_p2;
reg   [31:0] add_23462_fu_132;
wire   [31:0] add_ln48_2_fu_727_p2;
reg   [31:0] add_33963_fu_136;
wire   [31:0] add_ln48_3_fu_732_p2;
reg   [31:0] add_164_fu_140;
wire   [31:0] add_ln48_4_fu_737_p2;
reg   [31:0] add_1_165_fu_144;
wire   [31:0] add_ln48_5_fu_742_p2;
reg   [31:0] add_1_266_fu_148;
wire   [31:0] add_ln48_6_fu_747_p2;
reg   [31:0] add_1_367_fu_152;
wire   [31:0] add_ln48_7_fu_752_p2;
reg   [31:0] add_268_fu_156;
wire   [31:0] add_ln48_8_fu_757_p2;
reg   [31:0] add_2_169_fu_160;
wire   [31:0] add_ln48_9_fu_762_p2;
reg   [31:0] add_2_270_fu_164;
wire   [31:0] add_ln48_10_fu_767_p2;
reg   [31:0] add_2_371_fu_168;
wire   [31:0] add_ln48_11_fu_772_p2;
reg   [31:0] add_372_fu_172;
wire   [31:0] add_ln48_12_fu_777_p2;
reg   [31:0] add_3_173_fu_176;
wire   [31:0] add_ln48_13_fu_782_p2;
reg   [31:0] add_3_274_fu_180;
wire   [31:0] add_ln48_14_fu_787_p2;
reg   [31:0] add_3_375_fu_184;
wire   [31:0] add_ln48_15_fu_792_p2;
reg   [3:0] k_fu_188;
wire   [3:0] add_ln43_fu_552_p2;
reg   [3:0] ap_sig_allocacmp_k_1;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U22(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132),
    .din1(tempB_a_reg_1100),
    .dout(mul_ln48_fu_605_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U23(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132),
    .din1(tempB_a_1_reg_1108),
    .dout(mul_ln48_1_fu_609_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U24(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132),
    .din1(trunc_ln45_2_reg_1116),
    .dout(mul_ln48_2_fu_613_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U25(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132),
    .din1(trunc_ln45_3_reg_1124),
    .dout(mul_ln48_3_fu_617_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140),
    .din1(tempB_a_reg_1100),
    .dout(mul_ln48_4_fu_621_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140),
    .din1(tempB_a_1_reg_1108),
    .dout(mul_ln48_5_fu_625_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140),
    .din1(trunc_ln45_2_reg_1116),
    .dout(mul_ln48_6_fu_629_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140),
    .din1(trunc_ln45_3_reg_1124),
    .dout(mul_ln48_7_fu_633_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148),
    .din1(tempB_a_reg_1100),
    .dout(mul_ln48_8_fu_637_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148),
    .din1(tempB_a_1_reg_1108),
    .dout(mul_ln48_9_fu_641_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148),
    .din1(trunc_ln45_2_reg_1116),
    .dout(mul_ln48_10_fu_645_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148),
    .din1(trunc_ln45_3_reg_1124),
    .dout(mul_ln48_11_fu_649_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156),
    .din1(tempB_a_reg_1100),
    .dout(mul_ln48_12_fu_653_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U35(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156),
    .din1(tempB_a_1_reg_1108),
    .dout(mul_ln48_13_fu_657_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156),
    .din1(trunc_ln45_2_reg_1116),
    .dout(mul_ln48_14_fu_661_p2)
);

block_mm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U37(
    .din0(block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156),
    .din1(trunc_ln45_3_reg_1124),
    .dout(mul_ln48_15_fu_665_p2)
);

block_mm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_12961_fu_128 <= AB_1_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_12961_fu_128 <= add_ln48_1_fu_722_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_164_fu_140 <= AB_4_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_164_fu_140 <= add_ln48_4_fu_737_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_1_165_fu_144 <= AB_5_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_1_165_fu_144 <= add_ln48_5_fu_742_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_1_266_fu_148 <= AB_6_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_1_266_fu_148 <= add_ln48_6_fu_747_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_1_367_fu_152 <= AB_7_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_1_367_fu_152 <= add_ln48_7_fu_752_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_23462_fu_132 <= AB_2_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_23462_fu_132 <= add_ln48_2_fu_727_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_268_fu_156 <= AB_8_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_268_fu_156 <= add_ln48_8_fu_757_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_2_169_fu_160 <= AB_9_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_2_169_fu_160 <= add_ln48_9_fu_762_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_2_270_fu_164 <= AB_10_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_2_270_fu_164 <= add_ln48_10_fu_767_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_2_371_fu_168 <= AB_11_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_2_371_fu_168 <= add_ln48_11_fu_772_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_33963_fu_136 <= AB_3_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_33963_fu_136 <= add_ln48_3_fu_732_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_372_fu_172 <= AB_12_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_372_fu_172 <= add_ln48_12_fu_777_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_3_173_fu_176 <= AB_13_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_3_173_fu_176 <= add_ln48_13_fu_782_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_3_274_fu_180 <= AB_14_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_3_274_fu_180 <= add_ln48_14_fu_787_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_3_375_fu_184 <= AB_15_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add_3_375_fu_184 <= add_ln48_15_fu_792_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_124 <= AB_reload;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            empty_fu_124 <= add_ln48_fu_717_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_546_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_188 <= add_ln43_fu_552_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_188 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_load_reg_1140 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_q0;
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_load_reg_1148 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_q0;
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_load_reg_1156 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_q0;
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_load_reg_1132 <= block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_q0;
        icmp_ln43_reg_1076 <= icmp_ln43_fu_546_p2;
        icmp_ln43_reg_1076_pp0_iter1_reg <= icmp_ln43_reg_1076;
        tempB_a_1_reg_1108 <= {{Bcols_dout[63:32]}};
        tempB_a_reg_1100 <= tempB_a_fu_571_p1;
        trunc_ln45_2_reg_1116 <= {{Bcols_dout[95:64]}};
        trunc_ln45_3_reg_1124 <= {{Bcols_dout[127:96]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        mul_ln48_10_reg_1214 <= mul_ln48_10_fu_645_p2;
        mul_ln48_11_reg_1219 <= mul_ln48_11_fu_649_p2;
        mul_ln48_12_reg_1224 <= mul_ln48_12_fu_653_p2;
        mul_ln48_13_reg_1229 <= mul_ln48_13_fu_657_p2;
        mul_ln48_14_reg_1234 <= mul_ln48_14_fu_661_p2;
        mul_ln48_15_reg_1239 <= mul_ln48_15_fu_665_p2;
        mul_ln48_1_reg_1169 <= mul_ln48_1_fu_609_p2;
        mul_ln48_2_reg_1174 <= mul_ln48_2_fu_613_p2;
        mul_ln48_3_reg_1179 <= mul_ln48_3_fu_617_p2;
        mul_ln48_4_reg_1184 <= mul_ln48_4_fu_621_p2;
        mul_ln48_5_reg_1189 <= mul_ln48_5_fu_625_p2;
        mul_ln48_6_reg_1194 <= mul_ln48_6_fu_629_p2;
        mul_ln48_7_reg_1199 <= mul_ln48_7_fu_633_p2;
        mul_ln48_8_reg_1204 <= mul_ln48_8_fu_637_p2;
        mul_ln48_9_reg_1209 <= mul_ln48_9_fu_641_p2;
        mul_ln48_reg_1164 <= mul_ln48_fu_605_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bcols_blk_n = Bcols_empty_n;
    end else begin
        Bcols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bcols_read = 1'b1;
    end else begin
        Bcols_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_12961_out_ap_vld = 1'b1;
    end else begin
        add_12961_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_164_out_ap_vld = 1'b1;
    end else begin
        add_164_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_1_165_out_ap_vld = 1'b1;
    end else begin
        add_1_165_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_1_266_out_ap_vld = 1'b1;
    end else begin
        add_1_266_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_1_367_out_ap_vld = 1'b1;
    end else begin
        add_1_367_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_23462_out_ap_vld = 1'b1;
    end else begin
        add_23462_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_268_out_ap_vld = 1'b1;
    end else begin
        add_268_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_2_169_out_ap_vld = 1'b1;
    end else begin
        add_2_169_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_2_270_out_ap_vld = 1'b1;
    end else begin
        add_2_270_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_2_371_out_ap_vld = 1'b1;
    end else begin
        add_2_371_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_33963_out_ap_vld = 1'b1;
    end else begin
        add_33963_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_372_out_ap_vld = 1'b1;
    end else begin
        add_372_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_3_173_out_ap_vld = 1'b1;
    end else begin
        add_3_173_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_3_274_out_ap_vld = 1'b1;
    end else begin
        add_3_274_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        add_3_375_out_ap_vld = 1'b1;
    end else begin
        add_3_375_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_546_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_188;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0 = 1'b1;
    end else begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0 = 1'b1;
    end else begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0 = 1'b1;
    end else begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0 = 1'b1;
    end else begin
        block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln43_reg_1076_pp0_iter1_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_12961_out = add_12961_fu_128;

assign add_164_out = add_164_fu_140;

assign add_1_165_out = add_1_165_fu_144;

assign add_1_266_out = add_1_266_fu_148;

assign add_1_367_out = add_1_367_fu_152;

assign add_23462_out = add_23462_fu_132;

assign add_268_out = add_268_fu_156;

assign add_2_169_out = add_2_169_fu_160;

assign add_2_270_out = add_2_270_fu_164;

assign add_2_371_out = add_2_371_fu_168;

assign add_33963_out = add_33963_fu_136;

assign add_372_out = add_372_fu_172;

assign add_3_173_out = add_3_173_fu_176;

assign add_3_274_out = add_3_274_fu_180;

assign add_3_375_out = add_3_375_fu_184;

assign add_ln43_fu_552_p2 = (ap_sig_allocacmp_k_1 + 4'd1);

assign add_ln48_10_fu_767_p2 = (mul_ln48_10_reg_1214 + add_2_270_fu_164);

assign add_ln48_11_fu_772_p2 = (mul_ln48_11_reg_1219 + add_2_371_fu_168);

assign add_ln48_12_fu_777_p2 = (mul_ln48_12_reg_1224 + add_372_fu_172);

assign add_ln48_13_fu_782_p2 = (mul_ln48_13_reg_1229 + add_3_173_fu_176);

assign add_ln48_14_fu_787_p2 = (mul_ln48_14_reg_1234 + add_3_274_fu_180);

assign add_ln48_15_fu_792_p2 = (mul_ln48_15_reg_1239 + add_3_375_fu_184);

assign add_ln48_1_fu_722_p2 = (mul_ln48_1_reg_1169 + add_12961_fu_128);

assign add_ln48_2_fu_727_p2 = (mul_ln48_2_reg_1174 + add_23462_fu_132);

assign add_ln48_3_fu_732_p2 = (mul_ln48_3_reg_1179 + add_33963_fu_136);

assign add_ln48_4_fu_737_p2 = (mul_ln48_4_reg_1184 + add_164_fu_140);

assign add_ln48_5_fu_742_p2 = (mul_ln48_5_reg_1189 + add_1_165_fu_144);

assign add_ln48_6_fu_747_p2 = (mul_ln48_6_reg_1194 + add_1_266_fu_148);

assign add_ln48_7_fu_752_p2 = (mul_ln48_7_reg_1199 + add_1_367_fu_152);

assign add_ln48_8_fu_757_p2 = (mul_ln48_8_reg_1204 + add_268_fu_156);

assign add_ln48_9_fu_762_p2 = (mul_ln48_9_reg_1209 + add_2_169_fu_160);

assign add_ln48_fu_717_p2 = (mul_ln48_reg_1164 + empty_fu_124);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == Bcols_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Bcols_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Bcols_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == Bcols_empty_n);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_1_address0 = zext_ln43_fu_558_p1;

assign block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_2_address0 = zext_ln43_fu_558_p1;

assign block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_3_address0 = zext_ln43_fu_558_p1;

assign block_mm_stream_blockvec_0_stream_blockvec_0_blockmat_int_A_address0 = zext_ln43_fu_558_p1;

assign icmp_ln43_fu_546_p2 = ((ap_sig_allocacmp_k_1 == 4'd8) ? 1'b1 : 1'b0);

assign p_out = empty_fu_124;

assign tempB_a_fu_571_p1 = Bcols_dout[31:0];

assign zext_ln43_fu_558_p1 = ap_sig_allocacmp_k_1;

endmodule //block_mm_block_mm_Pipeline_partialsum
