// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module latnrm_latnrm_Pipeline_VITIS_LOOP_19_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bottom,
        top,
        internal_state_address0,
        internal_state_ce0,
        internal_state_we0,
        internal_state_d0,
        internal_state_q0,
        coefficient_address0,
        coefficient_ce0,
        coefficient_q0,
        coefficient_address1,
        coefficient_ce1,
        coefficient_q1,
        bottom_1_out,
        bottom_1_out_ap_vld,
        left_out,
        left_out_ap_vld,
        grp_fu_1211_p_din0,
        grp_fu_1211_p_din1,
        grp_fu_1211_p_opcode,
        grp_fu_1211_p_dout0,
        grp_fu_1211_p_ce,
        grp_fu_1215_p_din0,
        grp_fu_1215_p_din1,
        grp_fu_1215_p_opcode,
        grp_fu_1215_p_dout0,
        grp_fu_1215_p_ce,
        grp_fu_1219_p_din0,
        grp_fu_1219_p_din1,
        grp_fu_1219_p_dout0,
        grp_fu_1219_p_ce,
        grp_fu_1223_p_din0,
        grp_fu_1223_p_din1,
        grp_fu_1223_p_dout0,
        grp_fu_1223_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bottom;
input  [31:0] top;
output  [5:0] internal_state_address0;
output   internal_state_ce0;
output   internal_state_we0;
output  [31:0] internal_state_d0;
input  [31:0] internal_state_q0;
output  [5:0] coefficient_address0;
output   coefficient_ce0;
input  [31:0] coefficient_q0;
output  [5:0] coefficient_address1;
output   coefficient_ce1;
input  [31:0] coefficient_q1;
output  [31:0] bottom_1_out;
output   bottom_1_out_ap_vld;
output  [31:0] left_out;
output   left_out_ap_vld;
output  [31:0] grp_fu_1211_p_din0;
output  [31:0] grp_fu_1211_p_din1;
output  [1:0] grp_fu_1211_p_opcode;
input  [31:0] grp_fu_1211_p_dout0;
output   grp_fu_1211_p_ce;
output  [31:0] grp_fu_1215_p_din0;
output  [31:0] grp_fu_1215_p_din1;
output  [1:0] grp_fu_1215_p_opcode;
input  [31:0] grp_fu_1215_p_dout0;
output   grp_fu_1215_p_ce;
output  [31:0] grp_fu_1219_p_din0;
output  [31:0] grp_fu_1219_p_din1;
input  [31:0] grp_fu_1219_p_dout0;
output   grp_fu_1219_p_ce;
output  [31:0] grp_fu_1223_p_din0;
output  [31:0] grp_fu_1223_p_din1;
input  [31:0] grp_fu_1223_p_dout0;
output   grp_fu_1223_p_ce;

reg ap_idle;
reg[5:0] internal_state_address0;
reg internal_state_ce0;
reg internal_state_we0;
reg coefficient_ce0;
reg coefficient_ce1;
reg bottom_1_out_ap_vld;
reg left_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln19_reg_294;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln19_fu_170_p2;
reg   [5:0] internal_state_addr_2_reg_298;
reg   [31:0] top_7_load_1_reg_313;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] right_fu_230_p1;
reg   [31:0] right_reg_319;
wire   [31:0] bitcast_ln25_fu_235_p1;
reg   [31:0] bitcast_ln25_reg_325;
wire   [31:0] bitcast_ln25_1_fu_240_p1;
reg   [31:0] bitcast_ln25_1_reg_330;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln19_fu_176_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln25_fu_210_p1;
reg   [31:0] top_7_fu_56;
reg   [31:0] ap_sig_allocacmp_top_7_load_1;
wire    ap_block_pp0_stage1;
wire    ap_loop_init;
wire    ap_block_pp0_stage3;
reg   [31:0] bottom_1_fu_60;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4;
reg   [5:0] j_fu_64;
wire   [5:0] add_ln19_fu_215_p2;
reg   [5:0] ap_sig_allocacmp_j_11;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_140_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_145_p0;
reg   [31:0] grp_fu_145_p1;
wire   [4:0] trunc_ln25_fu_182_p1;
wire   [6:0] shl_ln_fu_186_p3;
wire   [6:0] add_ln25_fu_194_p2;
wire   [4:0] lshr_ln_fu_200_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

latnrm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        bottom_1_fu_60 <= bottom;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bottom_1_fu_60 <= grp_fu_1215_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln19_fu_170_p2 == 1'd0))) begin
            j_fu_64 <= add_ln19_fu_215_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_64 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        top_7_fu_56 <= top;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        top_7_fu_56 <= grp_fu_1211_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bitcast_ln25_1_reg_330 <= bitcast_ln25_1_fu_240_p1;
        bitcast_ln25_reg_325 <= bitcast_ln25_fu_235_p1;
        right_reg_319 <= right_fu_230_p1;
        top_7_load_1_reg_313 <= ap_sig_allocacmp_top_7_load_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln19_reg_294 <= icmp_ln19_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_fu_170_p2 == 1'd0))) begin
        internal_state_addr_2_reg_298 <= zext_ln19_fu_176_p1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_294 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_11 = 6'd1;
    end else begin
        ap_sig_allocacmp_j_11 = j_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_top_7_load_1 = grp_fu_1211_p_dout0;
    end else begin
        ap_sig_allocacmp_top_7_load_1 = top_7_fu_56;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_294 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bottom_1_out_ap_vld = 1'b1;
    end else begin
        bottom_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coefficient_ce0 = 1'b1;
    end else begin
        coefficient_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coefficient_ce1 = 1'b1;
    end else begin
        coefficient_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_140_p0 = bitcast_ln25_reg_325;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = bitcast_ln25_fu_235_p1;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_140_p1 = right_reg_319;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p1 = ap_sig_allocacmp_top_7_load_1;
        end else begin
            grp_fu_140_p1 = 'bx;
        end
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_145_p0 = bitcast_ln25_1_reg_330;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_145_p0 = bitcast_ln25_1_fu_240_p1;
        end else begin
            grp_fu_145_p0 = 'bx;
        end
    end else begin
        grp_fu_145_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_145_p1 = top_7_load_1_reg_313;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_145_p1 = right_fu_230_p1;
        end else begin
            grp_fu_145_p1 = 'bx;
        end
    end else begin
        grp_fu_145_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            internal_state_address0 = internal_state_addr_2_reg_298;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            internal_state_address0 = zext_ln19_fu_176_p1;
        end else begin
            internal_state_address0 = 'bx;
        end
    end else begin
        internal_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        internal_state_ce0 = 1'b1;
    end else begin
        internal_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        internal_state_we0 = 1'b1;
    end else begin
        internal_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_294 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        left_out_ap_vld = 1'b1;
    end else begin
        left_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_215_p2 = (ap_sig_allocacmp_j_11 + 6'd1);

assign add_ln25_fu_194_p2 = ($signed(shl_ln_fu_186_p3) + $signed(7'd124));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln25_1_fu_240_p1 = coefficient_q0;

assign bitcast_ln25_fu_235_p1 = coefficient_q1;

assign bottom_1_out = bottom_1_fu_60;

assign coefficient_address0 = zext_ln19_fu_176_p1;

assign coefficient_address1 = zext_ln25_fu_210_p1;

assign grp_fu_1211_p_ce = 1'b1;

assign grp_fu_1211_p_din0 = grp_fu_1219_p_dout0;

assign grp_fu_1211_p_din1 = grp_fu_1223_p_dout0;

assign grp_fu_1211_p_opcode = 2'd1;

assign grp_fu_1215_p_ce = 1'b1;

assign grp_fu_1215_p_din0 = grp_fu_1219_p_dout0;

assign grp_fu_1215_p_din1 = grp_fu_1223_p_dout0;

assign grp_fu_1215_p_opcode = 2'd0;

assign grp_fu_1219_p_ce = 1'b1;

assign grp_fu_1219_p_din0 = grp_fu_140_p0;

assign grp_fu_1219_p_din1 = grp_fu_140_p1;

assign grp_fu_1223_p_ce = 1'b1;

assign grp_fu_1223_p_din0 = grp_fu_145_p0;

assign grp_fu_1223_p_din1 = grp_fu_145_p1;

assign icmp_ln19_fu_170_p2 = ((ap_sig_allocacmp_j_11 == 6'd32) ? 1'b1 : 1'b0);

assign internal_state_d0 = bottom_1_fu_60;

assign left_out = top_7_fu_56;

assign lshr_ln_fu_200_p4 = {{add_ln25_fu_194_p2[6:2]}};

assign right_fu_230_p1 = internal_state_q0;

assign shl_ln_fu_186_p3 = {{trunc_ln25_fu_182_p1}, {2'd0}};

assign trunc_ln25_fu_182_p1 = ap_sig_allocacmp_j_11[4:0];

assign zext_ln19_fu_176_p1 = ap_sig_allocacmp_j_11;

assign zext_ln25_fu_210_p1 = lshr_ln_fu_200_p4;

endmodule //latnrm_latnrm_Pipeline_VITIS_LOOP_19_2
