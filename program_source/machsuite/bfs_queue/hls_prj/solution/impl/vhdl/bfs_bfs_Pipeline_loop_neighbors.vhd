-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bfs_bfs_Pipeline_loop_neighbors is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    e : IN STD_LOGIC_VECTOR (63 downto 0);
    level_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_ce0 : OUT STD_LOGIC;
    level_we0 : OUT STD_LOGIC;
    level_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln18 : IN STD_LOGIC_VECTOR (7 downto 0);
    tmp_end : IN STD_LOGIC_VECTOR (63 downto 0);
    edges_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    edges_ce0 : OUT STD_LOGIC;
    edges_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    level_counts_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    level_counts_ce0 : OUT STD_LOGIC;
    level_counts_we0 : OUT STD_LOGIC;
    level_counts_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    level_counts_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    queue_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    queue_ce0 : OUT STD_LOGIC;
    queue_we0 : OUT STD_LOGIC;
    queue_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    q_in_2_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    q_in_2_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    q_in_2_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of bfs_bfs_Pipeline_loop_neighbors is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln39_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln18_cast_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_cast_reg_307 : STD_LOGIC_VECTOR (63 downto 0);
    signal level_addr_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln39_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_321_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_1_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_1_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal level_addr_1_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln44_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal level_counts_addr_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln41_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln48_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln47_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_1_fu_58 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_4_fu_190_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_62 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_170_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_level_1_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_fu_181_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_10_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln48_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln48_fu_240_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_in_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bfs_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component bfs_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    e_1_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                e_1_fu_58 <= e;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln39_fu_164_p2 = ap_const_lv1_0))) then 
                e_1_fu_58 <= e_4_fu_190_p2;
            end if; 
        end if;
    end process;

    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_62 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln39_fu_164_p2 = ap_const_lv1_0))) then 
                i_fu_62 <= i_2_fu_170_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln39_reg_317 <= icmp_ln39_fu_164_p2;
                icmp_ln40_reg_321_pp0_iter1_reg <= icmp_ln40_reg_321;
                level_addr_reg_312 <= zext_ln18_cast_reg_307(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln39_fu_164_p2 = ap_const_lv1_0))) then
                icmp_ln40_reg_321 <= icmp_ln40_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then
                icmp_ln44_reg_340 <= icmp_ln44_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then
                level_addr_1_reg_335 <= edges_q0(8 - 1 downto 0);
                trunc_ln41_1_reg_330 <= trunc_ln41_1_fu_206_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_reg_340 = ap_const_lv1_1) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then
                level_counts_addr_reg_344 <= zext_ln47_fu_276_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln18_cast_reg_307(7 downto 0) <= zext_ln18_cast_fu_144_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln18_cast_reg_307(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln48_fu_234_p2 <= std_logic_vector(unsigned(empty_10_fu_214_p1) + unsigned(ap_const_lv8_FF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln39_reg_317)
    begin
        if (((icmp_ln39_reg_317 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    e_4_fu_190_p2 <= std_logic_vector(unsigned(e_1_fu_58) + unsigned(ap_const_lv64_1));
    edges_address0 <= zext_ln41_fu_185_p1(12 - 1 downto 0);

    edges_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            edges_ce0 <= ap_const_logic_1;
        else 
            edges_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_214_p1 <= q_in_2_out_i(8 - 1 downto 0);
    i_2_fu_170_p2 <= std_logic_vector(unsigned(i_fu_62) + unsigned(ap_const_lv8_1));
    icmp_ln39_fu_164_p2 <= "1" when (i_fu_62 = ap_const_lv8_9E) else "0";
    icmp_ln40_fu_176_p2 <= "1" when (unsigned(e_1_fu_58) < unsigned(tmp_end)) else "0";
    icmp_ln44_fu_218_p2 <= "1" when (level_q0 = ap_const_lv8_7F) else "0";
    icmp_ln48_fu_228_p2 <= "1" when (q_in_2_out_i = ap_const_lv64_0) else "0";

    level_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, edges_q0, level_addr_reg_312, ap_CS_fsm_pp0_stage1, level_addr_1_reg_335, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            level_address0 <= level_addr_1_reg_335;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            level_address0 <= level_addr_reg_312;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            level_address0 <= edges_q0(8 - 1 downto 0);
        else 
            level_address0 <= "XXXXXXXX";
        end if; 
    end process;


    level_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            level_ce0 <= ap_const_logic_1;
        else 
            level_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, level_counts_addr_reg_344, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln47_fu_276_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                level_counts_address0 <= level_counts_addr_reg_344;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                level_counts_address0 <= zext_ln47_fu_276_p1(4 - 1 downto 0);
            else 
                level_counts_address0 <= "XXXX";
            end if;
        else 
            level_counts_address0 <= "XXXX";
        end if; 
    end process;


    level_counts_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            level_counts_ce0 <= ap_const_logic_1;
        else 
            level_counts_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    level_counts_d0 <= std_logic_vector(unsigned(level_counts_q0) + unsigned(ap_const_lv64_1));

    level_counts_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln40_reg_321_pp0_iter1_reg, ap_block_pp0_stage2_11001, icmp_ln44_reg_340)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln44_reg_340 = ap_const_lv1_1) and (icmp_ln40_reg_321_pp0_iter1_reg = ap_const_lv1_1))) then 
            level_counts_we0 <= ap_const_logic_1;
        else 
            level_counts_we0 <= ap_const_logic_0;
        end if; 
    end process;

    level_d0 <= tmp_level_1_fu_269_p2;

    level_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln40_reg_321, icmp_ln44_reg_340)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_reg_340 = ap_const_lv1_1) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then 
            level_we0 <= ap_const_logic_1;
        else 
            level_we0 <= ap_const_logic_0;
        end if; 
    end process;


    q_in_2_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln39_reg_317, q_in_2_out_i, icmp_ln40_reg_321, icmp_ln44_fu_218_p2, ap_block_pp0_stage0, zext_ln16_fu_259_p1)
    begin
        if (((icmp_ln39_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln44_fu_218_p2 = ap_const_lv1_1) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then 
            q_in_2_out_o <= zext_ln16_fu_259_p1;
        else 
            q_in_2_out_o <= q_in_2_out_i;
        end if; 
    end process;


    q_in_2_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln39_reg_317, ap_block_pp0_stage0_11001, icmp_ln40_reg_321, icmp_ln44_fu_218_p2)
    begin
        if (((icmp_ln39_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln44_fu_218_p2 = ap_const_lv1_1) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then 
            q_in_2_out_o_ap_vld <= ap_const_logic_1;
        else 
            q_in_2_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    q_in_fu_253_p2 <= std_logic_vector(unsigned(empty_10_fu_214_p1) + unsigned(ap_const_lv8_1));
    queue_address0 <= zext_ln48_fu_248_p1(8 - 1 downto 0);

    queue_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            queue_ce0 <= ap_const_logic_1;
        else 
            queue_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    queue_d0 <= trunc_ln41_1_reg_330;

    queue_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln39_reg_317, ap_block_pp0_stage0_11001, icmp_ln40_reg_321, icmp_ln44_fu_218_p2)
    begin
        if (((icmp_ln39_reg_317 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln44_fu_218_p2 = ap_const_lv1_1) and (icmp_ln40_reg_321 = ap_const_lv1_1))) then 
            queue_we0 <= ap_const_logic_1;
        else 
            queue_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln48_fu_240_p3 <= 
        ap_const_lv8_FF when (icmp_ln48_fu_228_p2(0) = '1') else 
        add_ln48_fu_234_p2;
    tmp_level_1_fu_269_p2 <= std_logic_vector(unsigned(level_q0) + unsigned(ap_const_lv8_1));
    trunc_ln41_1_fu_206_p1 <= edges_q0(8 - 1 downto 0);
    trunc_ln41_fu_181_p1 <= e_1_fu_58(12 - 1 downto 0);
    zext_ln16_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_in_fu_253_p2),64));
    zext_ln18_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln18),64));
    zext_ln41_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_fu_181_p1),64));
    zext_ln47_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_level_1_fu_269_p2),64));
    zext_ln48_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_240_p3),64));
end behav;
