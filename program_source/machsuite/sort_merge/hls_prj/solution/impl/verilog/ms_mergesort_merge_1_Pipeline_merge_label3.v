// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ms_mergesort_merge_1_Pipeline_merge_label3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln7,
        stop,
        start_r,
        sext_ln12_1,
        temp_address0,
        temp_ce0,
        temp_q0,
        temp_address1,
        temp_ce1,
        temp_q1,
        a_address0,
        a_ce0,
        a_we0,
        a_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sext_ln7;
input  [31:0] stop;
input  [31:0] start_r;
input  [31:0] sext_ln12_1;
output  [10:0] temp_address0;
output   temp_ce0;
input  [31:0] temp_q0;
output  [10:0] temp_address1;
output   temp_ce1;
input  [31:0] temp_q1;
output  [10:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;

reg ap_idle;
reg temp_ce0;
reg temp_ce1;
reg a_ce0;
reg a_we0;
reg[31:0] a_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln20_fu_152_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln12_1_cast_fu_120_p1;
reg  signed [63:0] sext_ln12_1_cast_reg_233;
reg   [31:0] i_3_reg_238;
reg   [31:0] j_1_reg_243;
wire   [10:0] trunc_ln28_fu_167_p1;
reg   [10:0] trunc_ln28_reg_261;
wire   [63:0] zext_ln22_fu_157_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln23_fu_162_p1;
wire   [63:0] zext_ln28_fu_188_p1;
reg   [63:0] k_fu_44;
wire   [63:0] add_ln20_fu_171_p2;
wire  signed [63:0] sext_ln7_cast_fu_124_p1;
wire    ap_loop_init;
reg   [31:0] i_fu_48;
wire   [31:0] i_4_fu_192_p2;
wire   [0:0] icmp_ln24_fu_182_p2;
reg   [31:0] ap_sig_allocacmp_i_3;
reg   [31:0] j_fu_52;
wire   [31:0] j_2_fu_202_p2;
reg   [31:0] ap_sig_allocacmp_j_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ms_mergesort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_48 <= start_r;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd0))) begin
            i_fu_48 <= i_4_fu_192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            j_fu_52 <= stop;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd1))) begin
            j_fu_52 <= j_2_fu_202_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_44 <= sext_ln7_cast_fu_124_p1;
        end else if (((icmp_ln20_fu_152_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_44 <= add_ln20_fu_171_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_238 <= ap_sig_allocacmp_i_3;
        j_1_reg_243 <= ap_sig_allocacmp_j_1;
        sext_ln12_1_cast_reg_233 <= sext_ln12_1_cast_fu_120_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln28_reg_261 <= trunc_ln28_fu_167_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd0)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((icmp_ln24_fu_182_p2 == 1'd1)) begin
            a_d0 = temp_q1;
        end else if ((icmp_ln24_fu_182_p2 == 1'd0)) begin
            a_d0 = temp_q0;
        end else begin
            a_d0 = 'bx;
        end
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd0)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd0))) begin
        ap_sig_allocacmp_i_3 = i_4_fu_192_p2;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_fu_182_p2 == 1'd1))) begin
        ap_sig_allocacmp_j_1 = j_2_fu_202_p2;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln28_fu_188_p1;

assign add_ln20_fu_171_p2 = (k_fu_44 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_4_fu_192_p2 = (i_3_reg_238 + 32'd1);

assign icmp_ln20_fu_152_p2 = (($signed(k_fu_44) < $signed(sext_ln12_1_cast_reg_233)) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_182_p2 = (($signed(temp_q1) < $signed(temp_q0)) ? 1'b1 : 1'b0);

assign j_2_fu_202_p2 = ($signed(j_1_reg_243) + $signed(32'd4294967295));

assign sext_ln12_1_cast_fu_120_p1 = $signed(sext_ln12_1);

assign sext_ln7_cast_fu_124_p1 = $signed(sext_ln7);

assign temp_address0 = zext_ln23_fu_162_p1;

assign temp_address1 = zext_ln22_fu_157_p1;

assign trunc_ln28_fu_167_p1 = k_fu_44[10:0];

assign zext_ln22_fu_157_p1 = ap_sig_allocacmp_j_1;

assign zext_ln23_fu_162_p1 = ap_sig_allocacmp_i_3;

assign zext_ln28_fu_188_p1 = trunc_ln28_reg_261;

endmodule //ms_mergesort_merge_1_Pipeline_merge_label3
