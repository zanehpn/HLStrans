-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needwun_needwun_Pipeline_trace is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SEQA_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    SEQA_ce0 : OUT STD_LOGIC;
    SEQA_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    SEQB_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    SEQB_ce0 : OUT STD_LOGIC;
    SEQB_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ptr_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ptr_ce0 : OUT STD_LOGIC;
    ptr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    alignedA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedA_ce0 : OUT STD_LOGIC;
    alignedA_we0 : OUT STD_LOGIC;
    alignedA_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedA_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedA_ce1 : OUT STD_LOGIC;
    alignedA_we1 : OUT STD_LOGIC;
    alignedA_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedB_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedB_ce0 : OUT STD_LOGIC;
    alignedB_we0 : OUT STD_LOGIC;
    alignedB_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedB_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    alignedB_ce1 : OUT STD_LOGIC;
    alignedB_we1 : OUT STD_LOGIC;
    alignedB_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_str_idx_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_str_idx_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of needwun_needwun_Pipeline_trace is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_3C : STD_LOGIC_VECTOR (7 downto 0) := "00111100";
    constant ap_const_lv8_5C : STD_LOGIC_VECTOR (7 downto 0) := "01011100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal or_ln62_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal b_idx_1_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_idx_1_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln62_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptr_load_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal alignedA_addr_reg_355 : STD_LOGIC_VECTOR (7 downto 0);
    signal alignedB_addr_reg_360 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln64_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln71_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_str_idx_fu_50 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln66_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal b_idx_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_b_idx_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_idx_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_a_idx_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln62_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln63_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_16_fu_211_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_17_fu_215_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln64_1_fu_231_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_223_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln64_fu_237_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_164 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component needwun_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component needwun_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    a_idx_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                a_idx_fu_58 <= ap_const_lv32_80;
            elsif ((((ptr_q0 = ap_const_lv8_5C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)) or ((ptr_q0 = ap_const_lv8_3C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)))) then 
                a_idx_fu_58 <= grp_fu_162_p2;
            end if; 
        end if;
    end process;

    a_str_idx_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    a_str_idx_fu_50 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1))) then 
                    a_str_idx_fu_50 <= add_ln66_fu_258_p2;
                end if;
            end if; 
        end if;
    end process;

    b_idx_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                b_idx_fu_54 <= ap_const_lv32_80;
            elsif (((not((ptr_q0 = ap_const_lv8_5C)) and not((ptr_q0 = ap_const_lv8_3C)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)) or ((ptr_q0 = ap_const_lv8_5C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)))) then 
                b_idx_fu_54 <= grp_fu_167_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_idx_1_reg_337 <= ap_sig_allocacmp_a_idx_1;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                b_idx_1_reg_332 <= ap_sig_allocacmp_b_idx_1;
                or_ln62_reg_342 <= or_ln62_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln62_reg_342 = ap_const_lv1_1))) then
                alignedA_addr_reg_355 <= a_str_idx_fu_50(8 - 1 downto 0);
                alignedB_addr_reg_360 <= a_str_idx_fu_50(8 - 1 downto 0);
                ptr_load_reg_351 <= ptr_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    SEQA_address0_assign_proc : process(ptr_q0, zext_ln71_fu_264_p1, zext_ln65_fu_274_p1, ap_condition_164)
    begin
        if ((ap_const_boolean_1 = ap_condition_164)) then
            if ((ptr_q0 = ap_const_lv8_5C)) then 
                SEQA_address0 <= zext_ln65_fu_274_p1(7 - 1 downto 0);
            elsif ((ptr_q0 = ap_const_lv8_3C)) then 
                SEQA_address0 <= zext_ln71_fu_264_p1(7 - 1 downto 0);
            else 
                SEQA_address0 <= "XXXXXXX";
            end if;
        else 
            SEQA_address0 <= "XXXXXXX";
        end if; 
    end process;


    SEQA_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ptr_q0, ap_block_pp0_stage0_11001, or_ln62_reg_342)
    begin
        if ((((ptr_q0 = ap_const_lv8_5C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)) or ((ptr_q0 = ap_const_lv8_3C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)))) then 
            SEQA_ce0 <= ap_const_logic_1;
        else 
            SEQA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SEQB_address0_assign_proc : process(ptr_q0, zext_ln66_fu_279_p1, zext_ln77_fu_294_p1, ap_condition_164)
    begin
        if ((ap_const_boolean_1 = ap_condition_164)) then
            if ((not((ptr_q0 = ap_const_lv8_5C)) and not((ptr_q0 = ap_const_lv8_3C)))) then 
                SEQB_address0 <= zext_ln77_fu_294_p1(7 - 1 downto 0);
            elsif ((ptr_q0 = ap_const_lv8_5C)) then 
                SEQB_address0 <= zext_ln66_fu_279_p1(7 - 1 downto 0);
            else 
                SEQB_address0 <= "XXXXXXX";
            end if;
        else 
            SEQB_address0 <= "XXXXXXX";
        end if; 
    end process;


    SEQB_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ptr_q0, ap_block_pp0_stage0_11001, or_ln62_reg_342)
    begin
        if (((not((ptr_q0 = ap_const_lv8_5C)) and not((ptr_q0 = ap_const_lv8_3C)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)) or ((ptr_q0 = ap_const_lv8_5C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)))) then 
            SEQB_ce0 <= ap_const_logic_1;
        else 
            SEQB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln64_1_fu_231_p2 <= std_logic_vector(unsigned(empty_16_fu_211_p1) + unsigned(empty_17_fu_215_p1));
    add_ln64_fu_237_p2 <= std_logic_vector(unsigned(add_ln64_1_fu_231_p2) + unsigned(shl_ln1_fu_223_p3));
    add_ln66_fu_258_p2 <= std_logic_vector(unsigned(a_str_idx_fu_50) + unsigned(ap_const_lv64_1));
    alignedA_address0 <= alignedA_addr_reg_355;
    alignedA_address1 <= a_str_idx_fu_50(8 - 1 downto 0);

    alignedA_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ptr_load_reg_351)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ptr_load_reg_351 = ap_const_lv8_3C)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ptr_load_reg_351 = ap_const_lv8_5C)))) then 
            alignedA_ce0 <= ap_const_logic_1;
        else 
            alignedA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedA_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            alignedA_ce1 <= ap_const_logic_1;
        else 
            alignedA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alignedA_d0 <= SEQA_q0;
    alignedA_d1 <= ap_const_lv8_2D;

    alignedA_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ptr_load_reg_351)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ptr_load_reg_351 = ap_const_lv8_3C)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ptr_load_reg_351 = ap_const_lv8_5C)))) then 
            alignedA_we0 <= ap_const_logic_1;
        else 
            alignedA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedA_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ptr_q0, ap_block_pp0_stage0_11001, or_ln62_reg_342)
    begin
        if ((not((ptr_q0 = ap_const_lv8_5C)) and not((ptr_q0 = ap_const_lv8_3C)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1))) then 
            alignedA_we1 <= ap_const_logic_1;
        else 
            alignedA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    alignedB_address0 <= alignedB_addr_reg_360;
    alignedB_address1 <= a_str_idx_fu_50(8 - 1 downto 0);

    alignedB_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ptr_load_reg_351)
    begin
        if (((not((ptr_load_reg_351 = ap_const_lv8_3C)) and not((ptr_load_reg_351 = ap_const_lv8_5C)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ptr_load_reg_351 = ap_const_lv8_5C)))) then 
            alignedB_ce0 <= ap_const_logic_1;
        else 
            alignedB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedB_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            alignedB_ce1 <= ap_const_logic_1;
        else 
            alignedB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alignedB_d0 <= SEQB_q0;
    alignedB_d1 <= ap_const_lv8_2D;

    alignedB_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ptr_load_reg_351)
    begin
        if (((not((ptr_load_reg_351 = ap_const_lv8_3C)) and not((ptr_load_reg_351 = ap_const_lv8_5C)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ptr_load_reg_351 = ap_const_lv8_5C)))) then 
            alignedB_we0 <= ap_const_logic_1;
        else 
            alignedB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alignedB_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ptr_q0, ap_block_pp0_stage0_11001, or_ln62_reg_342)
    begin
        if (((ptr_q0 = ap_const_lv8_3C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1))) then 
            alignedB_we1 <= ap_const_logic_1;
        else 
            alignedB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_164_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln62_reg_342, ap_block_pp0_stage0)
    begin
                ap_condition_164 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, or_ln62_fu_205_p2)
    begin
        if (((or_ln62_fu_205_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, or_ln62_reg_342)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_a_idx_1_assign_proc : process(ap_enable_reg_pp0_iter2, ptr_q0, or_ln62_reg_342, ap_block_pp0_stage0, a_idx_fu_58, grp_fu_162_p2)
    begin
        if ((((ptr_q0 = ap_const_lv8_5C) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)) or ((ptr_q0 = ap_const_lv8_3C) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)))) then 
            ap_sig_allocacmp_a_idx_1 <= grp_fu_162_p2;
        else 
            ap_sig_allocacmp_a_idx_1 <= a_idx_fu_58;
        end if; 
    end process;


    ap_sig_allocacmp_b_idx_1_assign_proc : process(ap_enable_reg_pp0_iter2, ptr_q0, or_ln62_reg_342, ap_block_pp0_stage0, b_idx_fu_54, grp_fu_167_p2)
    begin
        if (((not((ptr_q0 = ap_const_lv8_5C)) and not((ptr_q0 = ap_const_lv8_3C)) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)) or ((ptr_q0 = ap_const_lv8_5C) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_ln62_reg_342 = ap_const_lv1_1)))) then 
            ap_sig_allocacmp_b_idx_1 <= grp_fu_167_p2;
        else 
            ap_sig_allocacmp_b_idx_1 <= b_idx_fu_54;
        end if; 
    end process;

    b_str_idx_2_out <= a_str_idx_fu_50(32 - 1 downto 0);

    b_str_idx_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, or_ln62_reg_342)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln62_reg_342 = ap_const_lv1_0))) then 
            b_str_idx_2_out_ap_vld <= ap_const_logic_1;
        else 
            b_str_idx_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_16_fu_211_p1 <= ap_sig_allocacmp_a_idx_1(15 - 1 downto 0);
    empty_17_fu_215_p1 <= ap_sig_allocacmp_b_idx_1(15 - 1 downto 0);
    grp_fu_162_p2 <= std_logic_vector(unsigned(a_idx_1_reg_337) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_fu_167_p2 <= std_logic_vector(unsigned(b_idx_1_reg_332) + unsigned(ap_const_lv32_FFFFFFFF));
    icmp_ln62_1_fu_199_p2 <= "1" when (signed(ap_sig_allocacmp_b_idx_1) > signed(ap_const_lv32_0)) else "0";
    icmp_ln62_fu_193_p2 <= "1" when (signed(ap_sig_allocacmp_a_idx_1) > signed(ap_const_lv32_0)) else "0";
    or_ln62_fu_205_p2 <= (icmp_ln62_fu_193_p2 or icmp_ln62_1_fu_199_p2);
    ptr_address0 <= zext_ln64_fu_243_p1(15 - 1 downto 0);

    ptr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ptr_ce0 <= ap_const_logic_1;
        else 
            ptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_223_p3 <= (trunc_ln63_fu_219_p1 & ap_const_lv7_0);
    trunc_ln63_fu_219_p1 <= ap_sig_allocacmp_b_idx_1(8 - 1 downto 0);
    zext_ln64_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_fu_237_p2),64));
    zext_ln65_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_162_p2),64));
    zext_ln66_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_167_p2),64));
    zext_ln71_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_162_p2),64));
    zext_ln77_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_167_p2),64));
end behav;
