-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edge_detect is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_out_r_AWVALID : OUT STD_LOGIC;
    m_axi_out_r_AWREADY : IN STD_LOGIC;
    m_axi_out_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_out_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_out_r_WVALID : OUT STD_LOGIC;
    m_axi_out_r_WREADY : IN STD_LOGIC;
    m_axi_out_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_out_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_out_r_WLAST : OUT STD_LOGIC;
    m_axi_out_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_out_r_ARVALID : OUT STD_LOGIC;
    m_axi_out_r_ARREADY : IN STD_LOGIC;
    m_axi_out_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_out_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_out_r_RVALID : IN STD_LOGIC;
    m_axi_out_r_RREADY : OUT STD_LOGIC;
    m_axi_out_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_out_r_RLAST : IN STD_LOGIC;
    m_axi_out_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_out_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BVALID : IN STD_LOGIC;
    m_axi_out_r_BREADY : OUT STD_LOGIC;
    m_axi_out_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    EDGE_THRESHOLD : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of edge_detect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "edge_detect_edge_detect,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=4241,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2653,HLS_SYN_LUT=3571,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1080 : STD_LOGIC_VECTOR (12 downto 0) := "1000010000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_41 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inputImage : STD_LOGIC_VECTOR (63 downto 0);
    signal outputImage : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln24_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln24_reg_899_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal or_ln51_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal or_ln51_reg_924_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal or_ln51_reg_924_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal outputImage_read_reg_889 : STD_LOGIC_VECTOR (63 downto 0);
    signal inputImage_read_reg_894 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal in_r_AWREADY : STD_LOGIC;
    signal in_r_WREADY : STD_LOGIC;
    signal in_r_ARVALID : STD_LOGIC;
    signal in_r_ARREADY : STD_LOGIC;
    signal in_r_RVALID : STD_LOGIC;
    signal in_r_RREADY : STD_LOGIC;
    signal in_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal in_r_BVALID : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op102_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_predicate_op113_read_state10 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal out_r_AWVALID : STD_LOGIC;
    signal out_r_AWREADY : STD_LOGIC;
    signal out_r_WVALID : STD_LOGIC;
    signal out_r_WREADY : STD_LOGIC;
    signal out_r_ARREADY : STD_LOGIC;
    signal out_r_RVALID : STD_LOGIC;
    signal out_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal out_r_BVALID : STD_LOGIC;
    signal out_r_BREADY : STD_LOGIC;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_899_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_899_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_899_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_899_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_899_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_899_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_899_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_reg_903_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_addr_reg_907 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuffer1_addr_reg_913 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_addr_reg_918_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln51_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_924_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_2_fu_501_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln67_2_reg_928_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lineBuffer2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer2_load_reg_933_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_load_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal lineBuffer1_load_reg_939_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_load_reg_939_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_load_reg_939_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_load_reg_939_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_load_reg_939_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer1_load_reg_939_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal newPixel_2_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal newPixel_2_reg_945 : STD_LOGIC_VECTOR (7 downto 0);
    signal Gx_fu_625_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Gx_reg_950 : STD_LOGIC_VECTOR (10 downto 0);
    signal Gy_fu_686_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Gy_reg_957 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_r_addr_reg_964 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln57_fu_819_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter9_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal lineBuffer1_ce1 : STD_LOGIC;
    signal lineBuffer1_we1 : STD_LOGIC;
    signal lineBuffer2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal lineBuffer2_ce0 : STD_LOGIC;
    signal lineBuffer2_ce1 : STD_LOGIC;
    signal lineBuffer2_we1 : STD_LOGIC;
    signal ap_phi_mux_newPixel_1_phi_fu_270_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter9_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter5_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter6_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter7_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter8_newPixel_1_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln51_cast12_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_19_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_20_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_fu_156 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_fu_507_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_fu_160 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_2_fu_354_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_164 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln24_fu_302_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newPixel_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_21_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_22_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln25_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_1_fu_328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal cmp50_not_mid1_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp50_not11_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_fu_362_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_mid2_v_fu_366_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln24_fu_320_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_25_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln29_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln32_1_fu_416_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln24_1_fu_378_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_1_fu_420_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_426_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_2_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_2_fu_438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_443_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln51_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_469_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln51_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln67_1_fu_497_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln24_fu_374_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_558_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_581_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_2_fu_566_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_1_fu_554_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln52_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_4_fu_603_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln53_2_fu_577_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln52_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln53_3_fu_589_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln53_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_3_fu_593_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln53_1_fu_619_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln53_fu_570_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln2_fu_631_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln3_fu_643_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_fu_550_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln53_1_fu_573_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln54_fu_654_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_1_fu_660_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_fu_639_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_1_fu_664_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_1_fu_670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln55_fu_674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln55_1_fu_680_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln54_fu_650_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_692_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln67_2_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_1_fu_703_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_708_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal abscond_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs_fu_766_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond28_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg27_fu_777_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs29_fu_787_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln57_fu_794_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal abs_cast_fu_773_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal gradient_fu_798_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln57_1_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gradient_1_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_651 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component edge_detect_lineBuffer1_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edge_detect_lineBuffer2_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edge_detect_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        inputImage : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputImage : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edge_detect_in_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component edge_detect_out_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    lineBuffer1_U : component edge_detect_lineBuffer1_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 66,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address1 => lineBuffer1_addr_reg_913,
        ce1 => lineBuffer1_ce1,
        we1 => lineBuffer1_we1,
        d1 => lineBuffer2_q0,
        q1 => lineBuffer1_q1);

    lineBuffer2_U : component edge_detect_lineBuffer2_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 66,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuffer2_address0,
        ce0 => lineBuffer2_ce0,
        q0 => lineBuffer2_q0,
        address1 => lineBuffer2_addr_reg_918_pp0_iter8_reg,
        ce1 => lineBuffer2_ce1,
        we1 => lineBuffer2_we1,
        d1 => ap_phi_mux_newPixel_1_phi_fu_270_p4);

    control_s_axi_U : component edge_detect_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        inputImage => inputImage,
        outputImage => outputImage);

    in_r_m_axi_U : component edge_detect_in_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_in_r_AWVALID,
        AWREADY => m_axi_in_r_AWREADY,
        AWADDR => m_axi_in_r_AWADDR,
        AWID => m_axi_in_r_AWID,
        AWLEN => m_axi_in_r_AWLEN,
        AWSIZE => m_axi_in_r_AWSIZE,
        AWBURST => m_axi_in_r_AWBURST,
        AWLOCK => m_axi_in_r_AWLOCK,
        AWCACHE => m_axi_in_r_AWCACHE,
        AWPROT => m_axi_in_r_AWPROT,
        AWQOS => m_axi_in_r_AWQOS,
        AWREGION => m_axi_in_r_AWREGION,
        AWUSER => m_axi_in_r_AWUSER,
        WVALID => m_axi_in_r_WVALID,
        WREADY => m_axi_in_r_WREADY,
        WDATA => m_axi_in_r_WDATA,
        WSTRB => m_axi_in_r_WSTRB,
        WLAST => m_axi_in_r_WLAST,
        WID => m_axi_in_r_WID,
        WUSER => m_axi_in_r_WUSER,
        ARVALID => m_axi_in_r_ARVALID,
        ARREADY => m_axi_in_r_ARREADY,
        ARADDR => m_axi_in_r_ARADDR,
        ARID => m_axi_in_r_ARID,
        ARLEN => m_axi_in_r_ARLEN,
        ARSIZE => m_axi_in_r_ARSIZE,
        ARBURST => m_axi_in_r_ARBURST,
        ARLOCK => m_axi_in_r_ARLOCK,
        ARCACHE => m_axi_in_r_ARCACHE,
        ARPROT => m_axi_in_r_ARPROT,
        ARQOS => m_axi_in_r_ARQOS,
        ARREGION => m_axi_in_r_ARREGION,
        ARUSER => m_axi_in_r_ARUSER,
        RVALID => m_axi_in_r_RVALID,
        RREADY => m_axi_in_r_RREADY,
        RDATA => m_axi_in_r_RDATA,
        RLAST => m_axi_in_r_RLAST,
        RID => m_axi_in_r_RID,
        RUSER => m_axi_in_r_RUSER,
        RRESP => m_axi_in_r_RRESP,
        BVALID => m_axi_in_r_BVALID,
        BREADY => m_axi_in_r_BREADY,
        BRESP => m_axi_in_r_BRESP,
        BID => m_axi_in_r_BID,
        BUSER => m_axi_in_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => in_r_ARVALID,
        I_ARREADY => in_r_ARREADY,
        I_ARADDR => in_r_addr_reg_907,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => in_r_RVALID,
        I_RREADY => in_r_RREADY,
        I_RDATA => in_r_RDATA,
        I_RFIFONUM => in_r_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => in_r_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => in_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => in_r_BVALID,
        I_BREADY => ap_const_logic_0);

    out_r_m_axi_U : component edge_detect_out_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_out_r_AWVALID,
        AWREADY => m_axi_out_r_AWREADY,
        AWADDR => m_axi_out_r_AWADDR,
        AWID => m_axi_out_r_AWID,
        AWLEN => m_axi_out_r_AWLEN,
        AWSIZE => m_axi_out_r_AWSIZE,
        AWBURST => m_axi_out_r_AWBURST,
        AWLOCK => m_axi_out_r_AWLOCK,
        AWCACHE => m_axi_out_r_AWCACHE,
        AWPROT => m_axi_out_r_AWPROT,
        AWQOS => m_axi_out_r_AWQOS,
        AWREGION => m_axi_out_r_AWREGION,
        AWUSER => m_axi_out_r_AWUSER,
        WVALID => m_axi_out_r_WVALID,
        WREADY => m_axi_out_r_WREADY,
        WDATA => m_axi_out_r_WDATA,
        WSTRB => m_axi_out_r_WSTRB,
        WLAST => m_axi_out_r_WLAST,
        WID => m_axi_out_r_WID,
        WUSER => m_axi_out_r_WUSER,
        ARVALID => m_axi_out_r_ARVALID,
        ARREADY => m_axi_out_r_ARREADY,
        ARADDR => m_axi_out_r_ARADDR,
        ARID => m_axi_out_r_ARID,
        ARLEN => m_axi_out_r_ARLEN,
        ARSIZE => m_axi_out_r_ARSIZE,
        ARBURST => m_axi_out_r_ARBURST,
        ARLOCK => m_axi_out_r_ARLOCK,
        ARCACHE => m_axi_out_r_ARCACHE,
        ARPROT => m_axi_out_r_ARPROT,
        ARQOS => m_axi_out_r_ARQOS,
        ARREGION => m_axi_out_r_ARREGION,
        ARUSER => m_axi_out_r_ARUSER,
        RVALID => m_axi_out_r_RVALID,
        RREADY => m_axi_out_r_RREADY,
        RDATA => m_axi_out_r_RDATA,
        RLAST => m_axi_out_r_RLAST,
        RID => m_axi_out_r_RID,
        RUSER => m_axi_out_r_RUSER,
        RRESP => m_axi_out_r_RRESP,
        BVALID => m_axi_out_r_BVALID,
        BREADY => m_axi_out_r_BREADY,
        BRESP => m_axi_out_r_BRESP,
        BID => m_axi_out_r_BID,
        BUSER => m_axi_out_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => out_r_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => out_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => out_r_RDATA,
        I_RFIFONUM => out_r_RFIFONUM,
        I_AWVALID => out_r_AWVALID,
        I_AWREADY => out_r_AWREADY,
        I_AWADDR => out_r_addr_reg_964,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => out_r_WVALID,
        I_WREADY => out_r_WREADY,
        I_WDATA => select_ln57_reg_970,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => out_r_BVALID,
        I_BREADY => out_r_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter9_state11)) then 
                        ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter8;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_newPixel_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_651)) then
                if (((empty_26_fu_404_p2 = ap_const_lv1_1) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_newPixel_1_reg_266 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter0_newPixel_1_reg_266;
                end if;
            end if; 
        end if;
    end process;

    col_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_fu_156 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_fu_156 <= add_ln25_fu_507_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_164 <= ap_const_lv13_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_164 <= add_ln24_fu_302_p2;
            end if; 
        end if;
    end process;

    row_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_fu_160 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_fu_160 <= select_ln24_2_fu_354_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln51_reg_924_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln24_reg_899_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Gx_reg_950 <= Gx_fu_625_p2;
                Gy_reg_957 <= Gy_fu_686_p2;
                out_r_addr_reg_964 <= sext_ln67_fu_718_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln51_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln67_2_reg_928 <= add_ln67_2_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln67_2_reg_928_pp0_iter1_reg <= add_ln67_2_reg_928;
                empty_26_reg_903_pp0_iter1_reg <= empty_26_reg_903;
                icmp_ln24_reg_899 <= icmp_ln24_fu_296_p2;
                icmp_ln24_reg_899_pp0_iter1_reg <= icmp_ln24_reg_899;
                lineBuffer2_addr_reg_918_pp0_iter1_reg <= lineBuffer2_addr_reg_918;
                or_ln51_reg_924_pp0_iter1_reg <= or_ln51_reg_924;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln67_2_reg_928_pp0_iter2_reg <= add_ln67_2_reg_928_pp0_iter1_reg;
                add_ln67_2_reg_928_pp0_iter3_reg <= add_ln67_2_reg_928_pp0_iter2_reg;
                add_ln67_2_reg_928_pp0_iter4_reg <= add_ln67_2_reg_928_pp0_iter3_reg;
                add_ln67_2_reg_928_pp0_iter5_reg <= add_ln67_2_reg_928_pp0_iter4_reg;
                add_ln67_2_reg_928_pp0_iter6_reg <= add_ln67_2_reg_928_pp0_iter5_reg;
                add_ln67_2_reg_928_pp0_iter7_reg <= add_ln67_2_reg_928_pp0_iter6_reg;
                add_ln67_2_reg_928_pp0_iter8_reg <= add_ln67_2_reg_928_pp0_iter7_reg;
                empty_26_reg_903_pp0_iter2_reg <= empty_26_reg_903_pp0_iter1_reg;
                empty_26_reg_903_pp0_iter3_reg <= empty_26_reg_903_pp0_iter2_reg;
                empty_26_reg_903_pp0_iter4_reg <= empty_26_reg_903_pp0_iter3_reg;
                empty_26_reg_903_pp0_iter5_reg <= empty_26_reg_903_pp0_iter4_reg;
                empty_26_reg_903_pp0_iter6_reg <= empty_26_reg_903_pp0_iter5_reg;
                empty_26_reg_903_pp0_iter7_reg <= empty_26_reg_903_pp0_iter6_reg;
                empty_26_reg_903_pp0_iter8_reg <= empty_26_reg_903_pp0_iter7_reg;
                icmp_ln24_reg_899_pp0_iter2_reg <= icmp_ln24_reg_899_pp0_iter1_reg;
                icmp_ln24_reg_899_pp0_iter3_reg <= icmp_ln24_reg_899_pp0_iter2_reg;
                icmp_ln24_reg_899_pp0_iter4_reg <= icmp_ln24_reg_899_pp0_iter3_reg;
                icmp_ln24_reg_899_pp0_iter5_reg <= icmp_ln24_reg_899_pp0_iter4_reg;
                icmp_ln24_reg_899_pp0_iter6_reg <= icmp_ln24_reg_899_pp0_iter5_reg;
                icmp_ln24_reg_899_pp0_iter7_reg <= icmp_ln24_reg_899_pp0_iter6_reg;
                icmp_ln24_reg_899_pp0_iter8_reg <= icmp_ln24_reg_899_pp0_iter7_reg;
                lineBuffer1_load_reg_939_pp0_iter3_reg <= lineBuffer1_load_reg_939;
                lineBuffer1_load_reg_939_pp0_iter4_reg <= lineBuffer1_load_reg_939_pp0_iter3_reg;
                lineBuffer1_load_reg_939_pp0_iter5_reg <= lineBuffer1_load_reg_939_pp0_iter4_reg;
                lineBuffer1_load_reg_939_pp0_iter6_reg <= lineBuffer1_load_reg_939_pp0_iter5_reg;
                lineBuffer1_load_reg_939_pp0_iter7_reg <= lineBuffer1_load_reg_939_pp0_iter6_reg;
                lineBuffer1_load_reg_939_pp0_iter8_reg <= lineBuffer1_load_reg_939_pp0_iter7_reg;
                lineBuffer2_addr_reg_918_pp0_iter2_reg <= lineBuffer2_addr_reg_918_pp0_iter1_reg;
                lineBuffer2_addr_reg_918_pp0_iter3_reg <= lineBuffer2_addr_reg_918_pp0_iter2_reg;
                lineBuffer2_addr_reg_918_pp0_iter4_reg <= lineBuffer2_addr_reg_918_pp0_iter3_reg;
                lineBuffer2_addr_reg_918_pp0_iter5_reg <= lineBuffer2_addr_reg_918_pp0_iter4_reg;
                lineBuffer2_addr_reg_918_pp0_iter6_reg <= lineBuffer2_addr_reg_918_pp0_iter5_reg;
                lineBuffer2_addr_reg_918_pp0_iter7_reg <= lineBuffer2_addr_reg_918_pp0_iter6_reg;
                lineBuffer2_addr_reg_918_pp0_iter8_reg <= lineBuffer2_addr_reg_918_pp0_iter7_reg;
                lineBuffer2_load_reg_933_pp0_iter2_reg <= lineBuffer2_load_reg_933;
                lineBuffer2_load_reg_933_pp0_iter3_reg <= lineBuffer2_load_reg_933_pp0_iter2_reg;
                lineBuffer2_load_reg_933_pp0_iter4_reg <= lineBuffer2_load_reg_933_pp0_iter3_reg;
                lineBuffer2_load_reg_933_pp0_iter5_reg <= lineBuffer2_load_reg_933_pp0_iter4_reg;
                lineBuffer2_load_reg_933_pp0_iter6_reg <= lineBuffer2_load_reg_933_pp0_iter5_reg;
                lineBuffer2_load_reg_933_pp0_iter7_reg <= lineBuffer2_load_reg_933_pp0_iter6_reg;
                lineBuffer2_load_reg_933_pp0_iter8_reg <= lineBuffer2_load_reg_933_pp0_iter7_reg;
                or_ln51_reg_924_pp0_iter10_reg <= or_ln51_reg_924_pp0_iter9_reg;
                or_ln51_reg_924_pp0_iter11_reg <= or_ln51_reg_924_pp0_iter10_reg;
                or_ln51_reg_924_pp0_iter12_reg <= or_ln51_reg_924_pp0_iter11_reg;
                or_ln51_reg_924_pp0_iter13_reg <= or_ln51_reg_924_pp0_iter12_reg;
                or_ln51_reg_924_pp0_iter14_reg <= or_ln51_reg_924_pp0_iter13_reg;
                or_ln51_reg_924_pp0_iter15_reg <= or_ln51_reg_924_pp0_iter14_reg;
                or_ln51_reg_924_pp0_iter2_reg <= or_ln51_reg_924_pp0_iter1_reg;
                or_ln51_reg_924_pp0_iter3_reg <= or_ln51_reg_924_pp0_iter2_reg;
                or_ln51_reg_924_pp0_iter4_reg <= or_ln51_reg_924_pp0_iter3_reg;
                or_ln51_reg_924_pp0_iter5_reg <= or_ln51_reg_924_pp0_iter4_reg;
                or_ln51_reg_924_pp0_iter6_reg <= or_ln51_reg_924_pp0_iter5_reg;
                or_ln51_reg_924_pp0_iter7_reg <= or_ln51_reg_924_pp0_iter6_reg;
                or_ln51_reg_924_pp0_iter8_reg <= or_ln51_reg_924_pp0_iter7_reg;
                or_ln51_reg_924_pp0_iter9_reg <= or_ln51_reg_924_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter2_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter1_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter2_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter3_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter4_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter5_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter6_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter7_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter8_newPixel_1_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln24_reg_899_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_19_fu_148 <= empty_21_fu_172;
                empty_20_fu_152 <= empty_22_fu_176;
                empty_21_fu_172 <= lineBuffer2_load_reg_933_pp0_iter8_reg;
                empty_22_fu_176 <= lineBuffer1_load_reg_939_pp0_iter8_reg;
                empty_fu_144 <= newPixel_fu_168;
                newPixel_fu_168 <= ap_phi_mux_newPixel_1_phi_fu_270_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_26_reg_903 <= empty_26_fu_404_p2;
                lineBuffer1_addr_reg_913 <= trunc_ln51_cast12_fu_382_p1(7 - 1 downto 0);
                lineBuffer2_addr_reg_918 <= trunc_ln51_cast12_fu_382_p1(7 - 1 downto 0);
                or_ln51_reg_924 <= or_ln51_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_26_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_r_addr_reg_907 <= sext_ln32_fu_453_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                inputImage_read_reg_894 <= inputImage;
                outputImage_read_reg_889 <= outputImage;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln24_reg_899_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lineBuffer1_load_reg_939 <= lineBuffer1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_899 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lineBuffer2_load_reg_933 <= lineBuffer2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_26_reg_903_pp0_iter7_reg = ap_const_lv1_0) and (icmp_ln24_reg_899_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                newPixel_2_reg_945 <= newPixel_2_fu_528_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln51_reg_924_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    select_ln57_reg_970(7 downto 0) <= select_ln57_fu_819_p3(7 downto 0);
            end if;
        end if;
    end process;
    select_ln57_reg_970(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Gx_fu_625_p2 <= std_logic_vector(unsigned(sub_ln53_1_fu_619_p2) + unsigned(zext_ln53_fu_570_p1));
    Gy_fu_686_p2 <= std_logic_vector(unsigned(sub_ln55_1_fu_680_p2) - unsigned(zext_ln54_fu_650_p1));
    abs29_fu_787_p3 <= 
        Gy_reg_957 when (abscond28_fu_782_p2(0) = '1') else 
        neg27_fu_777_p2;
        abs_cast_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs_fu_766_p3),12));

    abs_fu_766_p3 <= 
        Gx_reg_950 when (abscond_fu_761_p2(0) = '1') else 
        neg_fu_756_p2;
    abscond28_fu_782_p2 <= "1" when (signed(Gy_reg_957) > signed(ap_const_lv11_0)) else "0";
    abscond_fu_761_p2 <= "1" when (signed(Gx_reg_950) > signed(ap_const_lv11_0)) else "0";
    add_ln24_1_fu_328_p2 <= std_logic_vector(unsigned(row_fu_160) + unsigned(ap_const_lv7_1));
    add_ln24_fu_302_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_164) + unsigned(ap_const_lv13_1));
    add_ln25_fu_507_p2 <= std_logic_vector(unsigned(select_ln24_fu_320_p3) + unsigned(ap_const_lv7_1));
    add_ln32_1_fu_420_p2 <= std_logic_vector(signed(sext_ln32_1_fu_416_p1) + signed(zext_ln24_1_fu_378_p1));
    add_ln32_2_fu_438_p2 <= std_logic_vector(signed(sext_ln32_2_fu_434_p1) + signed(inputImage_read_reg_894));
    add_ln32_fu_410_p2 <= std_logic_vector(unsigned(zext_ln29_fu_388_p1) + unsigned(ap_const_lv8_FF));
    add_ln51_fu_463_p2 <= std_logic_vector(unsigned(zext_ln29_fu_388_p1) + unsigned(ap_const_lv8_FF));
    add_ln52_fu_597_p2 <= std_logic_vector(unsigned(zext_ln52_2_fu_566_p1) + unsigned(zext_ln52_1_fu_554_p1));
    add_ln54_1_fu_664_p2 <= std_logic_vector(unsigned(zext_ln54_1_fu_660_p1) + unsigned(zext_ln55_fu_639_p1));
    add_ln54_fu_654_p2 <= std_logic_vector(unsigned(zext_ln52_fu_550_p1) + unsigned(zext_ln53_1_fu_573_p1));
    add_ln67_1_fu_703_p2 <= std_logic_vector(signed(sext_ln67_2_fu_699_p1) + signed(outputImage_read_reg_889));
    add_ln67_2_fu_501_p2 <= std_logic_vector(signed(sext_ln67_1_fu_497_p1) + signed(zext_ln24_fu_374_p1));
    add_ln67_fu_491_p2 <= std_logic_vector(unsigned(zext_ln29_fu_388_p1) + unsigned(ap_const_lv8_BF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(2);
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter16, or_ln51_reg_924_pp0_iter15_reg, in_r_RVALID, ap_predicate_op113_read_state10, out_r_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((out_r_BVALID = ap_const_logic_0) and (or_ln51_reg_924_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_predicate_op113_read_state10 = ap_const_boolean_1) and (in_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter16, or_ln51_reg_924_pp0_iter15_reg, in_r_RVALID, ap_block_state3_io, ap_predicate_op113_read_state10, out_r_BVALID, ap_block_state12_io, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_11001 <= (((out_r_BVALID = ap_const_logic_0) and (or_ln51_reg_924_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_predicate_op113_read_state10 = ap_const_boolean_1) and (in_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter16, or_ln51_reg_924_pp0_iter15_reg, in_r_RVALID, ap_block_state3_io, ap_predicate_op113_read_state10, out_r_BVALID, ap_block_state12_io, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_subdone <= (((out_r_BVALID = ap_const_logic_0) and (or_ln51_reg_924_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_predicate_op113_read_state10 = ap_const_boolean_1) and (in_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(in_r_RVALID, ap_predicate_op113_read_state10)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((ap_predicate_op113_read_state10 = ap_const_boolean_1) and (in_r_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(or_ln51_reg_924_pp0_iter9_reg, out_r_AWREADY)
    begin
                ap_block_state12_io <= ((out_r_AWREADY = ap_const_logic_0) and (or_ln51_reg_924_pp0_iter9_reg = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(or_ln51_reg_924_pp0_iter10_reg, out_r_WREADY)
    begin
                ap_block_state13_io <= ((out_r_WREADY = ap_const_logic_0) and (or_ln51_reg_924_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp0_stage0_iter16_assign_proc : process(or_ln51_reg_924_pp0_iter15_reg, out_r_BVALID)
    begin
                ap_block_state18_pp0_stage0_iter16 <= ((out_r_BVALID = ap_const_logic_0) and (or_ln51_reg_924_pp0_iter15_reg = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(in_r_ARREADY, ap_predicate_op102_readreq_state3)
    begin
                ap_block_state3_io <= ((ap_predicate_op102_readreq_state3 = ap_const_boolean_1) and (in_r_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_651_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_651 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter9_state11_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter9_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter9_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln24_fu_296_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_296_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_newPixel_1_phi_fu_270_p4_assign_proc : process(icmp_ln24_reg_899_pp0_iter8_reg, empty_26_reg_903_pp0_iter8_reg, newPixel_2_reg_945, ap_phi_reg_pp0_iter9_newPixel_1_reg_266)
    begin
        if (((empty_26_reg_903_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln24_reg_899_pp0_iter8_reg = ap_const_lv1_0))) then 
            ap_phi_mux_newPixel_1_phi_fu_270_p4 <= newPixel_2_reg_945;
        else 
            ap_phi_mux_newPixel_1_phi_fu_270_p4 <= ap_phi_reg_pp0_iter9_newPixel_1_reg_266;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_newPixel_1_reg_266 <= "XXXXXXXX";

    ap_predicate_op102_readreq_state3_assign_proc : process(icmp_ln24_reg_899, empty_26_reg_903)
    begin
                ap_predicate_op102_readreq_state3 <= ((empty_26_reg_903 = ap_const_lv1_0) and (icmp_ln24_reg_899 = ap_const_lv1_0));
    end process;


    ap_predicate_op113_read_state10_assign_proc : process(icmp_ln24_reg_899_pp0_iter7_reg, empty_26_reg_903_pp0_iter7_reg)
    begin
                ap_predicate_op113_read_state10 <= ((empty_26_reg_903_pp0_iter7_reg = ap_const_lv1_0) and (icmp_ln24_reg_899_pp0_iter7_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp50_not11_fu_340_p2 <= "1" when (row_fu_160 = ap_const_lv7_0) else "0";
    cmp50_not_mid1_fu_334_p2 <= "1" when (add_ln24_1_fu_328_p2 = ap_const_lv7_0) else "0";
    empty_24_fu_392_p2 <= "1" when (select_ln24_fu_320_p3 = ap_const_lv7_41) else "0";
    empty_25_fu_398_p2 <= "1" when (select_ln24_fu_320_p3 = ap_const_lv7_0) else "0";
    empty_26_fu_404_p2 <= (empty_25_fu_398_p2 or empty_24_fu_392_p2);
    gradient_1_fu_813_p2 <= (icmp_ln60_fu_808_p2 xor ap_const_lv1_1);
    gradient_fu_798_p2 <= std_logic_vector(signed(sext_ln57_fu_794_p1) + signed(abs_cast_fu_773_p1));
    icmp_ln24_fu_296_p2 <= "1" when (indvar_flatten_fu_164 = ap_const_lv13_1080) else "0";
    icmp_ln25_fu_314_p2 <= "1" when (col_fu_156 = ap_const_lv7_42) else "0";
    icmp_ln51_fu_479_p2 <= "0" when (tmp_fu_469_p4 = ap_const_lv2_0) else "1";
    icmp_ln60_fu_808_p2 <= "1" when (signed(sext_ln57_1_fu_804_p1) < signed(EDGE_THRESHOLD)) else "0";

    in_r_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op102_readreq_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op102_readreq_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            in_r_ARVALID <= ap_const_logic_1;
        else 
            in_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    in_r_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_predicate_op113_read_state10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op113_read_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_r_RREADY <= ap_const_logic_1;
        else 
            in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_blk_n_AR_assign_proc : process(m_axi_in_r_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln24_reg_899, empty_26_reg_903)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_26_reg_903 = ap_const_lv1_0) and (icmp_ln24_reg_899 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            in_r_blk_n_AR <= m_axi_in_r_ARREADY;
        else 
            in_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_r_blk_n_R_assign_proc : process(m_axi_in_r_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln24_reg_899_pp0_iter7_reg, empty_26_reg_903_pp0_iter7_reg)
    begin
        if (((empty_26_reg_903_pp0_iter7_reg = ap_const_lv1_0) and (icmp_ln24_reg_899_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    lineBuffer1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_899, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_899 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuffer1_ce1 <= ap_const_logic_1;
        else 
            lineBuffer1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuffer1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_899, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_899 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuffer1_we1 <= ap_const_logic_1;
        else 
            lineBuffer1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lineBuffer2_address0 <= trunc_ln51_cast12_fu_382_p1(7 - 1 downto 0);

    lineBuffer2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lineBuffer2_ce0 <= ap_const_logic_1;
        else 
            lineBuffer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuffer2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lineBuffer2_ce1 <= ap_const_logic_1;
        else 
            lineBuffer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuffer2_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln24_reg_899_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln24_reg_899_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lineBuffer2_we1 <= ap_const_logic_1;
        else 
            lineBuffer2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    neg27_fu_777_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(Gy_reg_957));
    neg_fu_756_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(Gx_reg_950));
    newPixel_2_fu_528_p1 <= in_r_RDATA(8 - 1 downto 0);
    or_ln51_fu_485_p2 <= (select_ln24_1_fu_346_p3 or icmp_ln51_fu_479_p2);

    out_r_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter10, or_ln51_reg_924_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln51_reg_924_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_r_AWVALID <= ap_const_logic_1;
        else 
            out_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_BREADY_assign_proc : process(ap_enable_reg_pp0_iter16, or_ln51_reg_924_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln51_reg_924_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_r_BREADY <= ap_const_logic_1;
        else 
            out_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    out_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter11, or_ln51_reg_924_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln51_reg_924_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_r_WVALID <= ap_const_logic_1;
        else 
            out_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_AW_assign_proc : process(m_axi_out_r_AWREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, or_ln51_reg_924_pp0_iter9_reg)
    begin
        if (((or_ln51_reg_924_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_r_blk_n_AW <= m_axi_out_r_AWREADY;
        else 
            out_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_B_assign_proc : process(m_axi_out_r_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter16, or_ln51_reg_924_pp0_iter15_reg)
    begin
        if (((or_ln51_reg_924_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_r_blk_n_B <= m_axi_out_r_BVALID;
        else 
            out_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_W_assign_proc : process(m_axi_out_r_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11, or_ln51_reg_924_pp0_iter10_reg)
    begin
        if (((or_ln51_reg_924_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_r_blk_n_W <= m_axi_out_r_WREADY;
        else 
            out_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    select_ln24_1_fu_346_p3 <= 
        cmp50_not_mid1_fu_334_p2 when (icmp_ln25_fu_314_p2(0) = '1') else 
        cmp50_not11_fu_340_p2;
    select_ln24_2_fu_354_p3 <= 
        add_ln24_1_fu_328_p2 when (icmp_ln25_fu_314_p2(0) = '1') else 
        row_fu_160;
    select_ln24_fu_320_p3 <= 
        ap_const_lv7_0 when (icmp_ln25_fu_314_p2(0) = '1') else 
        col_fu_156;
    select_ln57_fu_819_p3 <= 
        ap_const_lv32_FF when (gradient_1_fu_813_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln32_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln32_fu_410_p2),14));

        sext_ln32_2_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_426_p3),64));

        sext_ln32_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_443_p4),64));

        sext_ln57_1_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gradient_fu_798_p2),32));

        sext_ln57_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs29_fu_787_p3),12));

        sext_ln67_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_fu_491_p2),13));

        sext_ln67_2_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_692_p3),64));

        sext_ln67_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_708_p4),64));

    shl_ln1_fu_581_p3 <= (newPixel_fu_168 & ap_const_lv1_0);
    shl_ln2_fu_631_p3 <= (empty_19_fu_148 & ap_const_lv1_0);
    shl_ln3_fu_643_p3 <= (lineBuffer2_load_reg_933_pp0_iter8_reg & ap_const_lv1_0);
    shl_ln_fu_558_p3 <= (empty_22_fu_176 & ap_const_lv1_0);
    sub_ln52_fu_607_p2 <= std_logic_vector(unsigned(zext_ln52_4_fu_603_p1) - unsigned(zext_ln53_2_fu_577_p1));
    sub_ln53_1_fu_619_p2 <= std_logic_vector(unsigned(sub_ln53_fu_613_p2) - unsigned(zext_ln52_3_fu_593_p1));
    sub_ln53_fu_613_p2 <= std_logic_vector(unsigned(sub_ln52_fu_607_p2) - unsigned(zext_ln53_3_fu_589_p1));
    sub_ln55_1_fu_680_p2 <= std_logic_vector(unsigned(sub_ln55_fu_674_p2) - unsigned(zext_ln53_fu_570_p1));
    sub_ln55_fu_674_p2 <= std_logic_vector(unsigned(zext_ln55_1_fu_670_p1) - unsigned(zext_ln52_3_fu_593_p1));
    tmp_1_fu_426_p3 <= (add_ln32_1_fu_420_p2 & ap_const_lv2_0);
    tmp_2_fu_692_p3 <= (add_ln67_2_reg_928_pp0_iter8_reg & ap_const_lv2_0);
    tmp_fu_469_p4 <= add_ln51_fu_463_p2(7 downto 6);
    trunc_ln1_fu_708_p4 <= add_ln67_1_fu_703_p2(63 downto 2);
    trunc_ln24_fu_362_p1 <= select_ln24_2_fu_354_p3(6 - 1 downto 0);
    trunc_ln51_cast12_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_320_p3),64));
    trunc_ln_fu_443_p4 <= add_ln32_2_fu_438_p2(63 downto 2);
    zext_ln24_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln25_mid2_v_fu_366_p3),14));
    zext_ln24_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln25_mid2_v_fu_366_p3),13));
    zext_ln25_mid2_v_fu_366_p3 <= (trunc_ln24_fu_362_p1 & ap_const_lv6_0);
    zext_ln29_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_320_p3),8));
    zext_ln52_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_fu_152),10));
    zext_ln52_2_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_558_p3),10));
    zext_ln52_3_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_newPixel_1_phi_fu_270_p4),11));
    zext_ln52_4_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_597_p2),11));
    zext_ln52_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_fu_152),9));
    zext_ln53_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_144),9));
    zext_ln53_2_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_144),11));
    zext_ln53_3_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_581_p3),11));
    zext_ln53_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuffer1_load_reg_939_pp0_iter8_reg),11));
    zext_ln54_1_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_654_p2),10));
    zext_ln54_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_643_p3),11));
    zext_ln55_1_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_664_p2),11));
    zext_ln55_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_631_p3),10));
end behav;
