// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module viterbi_viterbi_Pipeline_L_end (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        min_p,
        llike_address0,
        llike_ce0,
        llike_q0,
        min_s_out,
        min_s_out_ap_vld,
        grp_fu_167_p_din0,
        grp_fu_167_p_din1,
        grp_fu_167_p_opcode,
        grp_fu_167_p_dout0,
        grp_fu_167_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] min_p;
output  [13:0] llike_address0;
output   llike_ce0;
input  [63:0] llike_q0;
output  [7:0] min_s_out;
output   min_s_out_ap_vld;
output  [63:0] grp_fu_167_p_din0;
output  [63:0] grp_fu_167_p_din1;
output  [4:0] grp_fu_167_p_opcode;
input  [0:0] grp_fu_167_p_dout0;
output   grp_fu_167_p_ce;

reg ap_idle;
reg llike_ce0;
reg min_s_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln40_fu_108_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln40_reg_282;
reg   [0:0] icmp_ln40_reg_282_pp0_iter1_reg;
reg   [0:0] icmp_ln40_reg_282_pp0_iter2_reg;
wire   [13:0] add_ln41_fu_118_p2;
reg   [13:0] add_ln41_reg_286;
wire   [5:0] trunc_ln42_2_fu_124_p1;
reg   [5:0] trunc_ln42_2_reg_291;
reg   [5:0] trunc_ln42_2_reg_291_pp0_iter1_reg;
reg   [5:0] trunc_ln42_2_reg_291_pp0_iter2_reg;
reg   [5:0] trunc_ln42_2_reg_291_pp0_iter3_reg;
reg   [63:0] p_reg_301;
reg   [63:0] p_reg_301_pp0_iter3_reg;
reg   [63:0] min_p_1_load_reg_308;
wire   [0:0] icmp_ln42_fu_182_p2;
reg   [0:0] icmp_ln42_reg_314;
wire   [0:0] icmp_ln42_1_fu_188_p2;
reg   [0:0] icmp_ln42_1_reg_319;
wire   [0:0] icmp_ln42_2_fu_194_p2;
reg   [0:0] icmp_ln42_2_reg_324;
wire   [0:0] icmp_ln42_3_fu_200_p2;
reg   [0:0] icmp_ln42_3_reg_329;
wire   [63:0] zext_ln41_1_fu_139_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] min_p_1_fu_48;
wire   [63:0] min_p_3_fu_229_p3;
reg   [63:0] ap_sig_allocacmp_min_p_1_load;
wire    ap_loop_init;
reg   [7:0] min_s_fu_52;
wire   [7:0] min_s_4_fu_238_p3;
reg   [6:0] min_s_1_fu_56;
wire   [6:0] add_ln40_fu_128_p2;
reg   [6:0] ap_sig_allocacmp_s;
wire    ap_block_pp0_stage0_01001;
wire   [13:0] zext_ln41_fu_114_p1;
wire   [63:0] bitcast_ln42_fu_147_p1;
wire   [63:0] bitcast_ln42_1_fu_164_p1;
wire   [10:0] tmp_fu_150_p4;
wire   [51:0] trunc_ln42_fu_160_p1;
wire   [10:0] tmp_1_fu_168_p4;
wire   [51:0] trunc_ln42_1_fu_178_p1;
wire   [0:0] or_ln42_1_fu_213_p2;
wire   [0:0] and_ln42_fu_217_p2;
wire   [0:0] or_ln42_fu_209_p2;
wire   [0:0] and_ln42_1_fu_223_p2;
wire   [7:0] zext_ln42_fu_235_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

viterbi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_p_1_fu_48 <= min_p;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            min_p_1_fu_48 <= min_p_3_fu_229_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_108_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            min_s_1_fu_56 <= add_ln40_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            min_s_1_fu_56 <= 7'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_s_fu_52 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            min_s_fu_52 <= min_s_4_fu_238_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_108_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln41_reg_286 <= add_ln41_fu_118_p2;
        trunc_ln42_2_reg_291 <= trunc_ln42_2_fu_124_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln40_reg_282 <= icmp_ln40_fu_108_p2;
        icmp_ln40_reg_282_pp0_iter1_reg <= icmp_ln40_reg_282;
        trunc_ln42_2_reg_291_pp0_iter1_reg <= trunc_ln42_2_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln40_reg_282_pp0_iter2_reg <= icmp_ln40_reg_282_pp0_iter1_reg;
        icmp_ln42_1_reg_319 <= icmp_ln42_1_fu_188_p2;
        icmp_ln42_2_reg_324 <= icmp_ln42_2_fu_194_p2;
        icmp_ln42_3_reg_329 <= icmp_ln42_3_fu_200_p2;
        icmp_ln42_reg_314 <= icmp_ln42_fu_182_p2;
        min_p_1_load_reg_308 <= ap_sig_allocacmp_min_p_1_load;
        p_reg_301 <= llike_q0;
        p_reg_301_pp0_iter3_reg <= p_reg_301;
        trunc_ln42_2_reg_291_pp0_iter2_reg <= trunc_ln42_2_reg_291_pp0_iter1_reg;
        trunc_ln42_2_reg_291_pp0_iter3_reg <= trunc_ln42_2_reg_291_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_108_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_min_p_1_load = min_p_3_fu_229_p3;
    end else begin
        ap_sig_allocacmp_min_p_1_load = min_p_1_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_s = 7'd1;
    end else begin
        ap_sig_allocacmp_s = min_s_1_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        llike_ce0 = 1'b1;
    end else begin
        llike_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_reg_282_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        min_s_out_ap_vld = 1'b1;
    end else begin
        min_s_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_128_p2 = (ap_sig_allocacmp_s + 7'd1);

assign add_ln41_fu_118_p2 = ($signed(zext_ln41_fu_114_p1) + $signed(14'd8896));

assign and_ln42_1_fu_223_p2 = (or_ln42_fu_209_p2 & and_ln42_fu_217_p2);

assign and_ln42_fu_217_p2 = (or_ln42_1_fu_213_p2 & grp_fu_167_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln42_1_fu_164_p1 = ap_sig_allocacmp_min_p_1_load;

assign bitcast_ln42_fu_147_p1 = p_reg_301;

assign grp_fu_167_p_ce = 1'b1;

assign grp_fu_167_p_din0 = p_reg_301;

assign grp_fu_167_p_din1 = ap_sig_allocacmp_min_p_1_load;

assign grp_fu_167_p_opcode = 5'd4;

assign icmp_ln40_fu_108_p2 = ((ap_sig_allocacmp_s == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_188_p2 = ((trunc_ln42_fu_160_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_2_fu_194_p2 = ((tmp_1_fu_168_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln42_3_fu_200_p2 = ((trunc_ln42_1_fu_178_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_182_p2 = ((tmp_fu_150_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign llike_address0 = zext_ln41_1_fu_139_p1;

assign min_p_3_fu_229_p3 = ((and_ln42_1_fu_223_p2[0:0] == 1'b1) ? p_reg_301_pp0_iter3_reg : min_p_1_load_reg_308);

assign min_s_4_fu_238_p3 = ((and_ln42_1_fu_223_p2[0:0] == 1'b1) ? zext_ln42_fu_235_p1 : min_s_fu_52);

assign min_s_out = min_s_fu_52;

assign or_ln42_1_fu_213_p2 = (icmp_ln42_3_reg_329 | icmp_ln42_2_reg_324);

assign or_ln42_fu_209_p2 = (icmp_ln42_reg_314 | icmp_ln42_1_reg_319);

assign tmp_1_fu_168_p4 = {{bitcast_ln42_1_fu_164_p1[62:52]}};

assign tmp_fu_150_p4 = {{bitcast_ln42_fu_147_p1[62:52]}};

assign trunc_ln42_1_fu_178_p1 = bitcast_ln42_1_fu_164_p1[51:0];

assign trunc_ln42_2_fu_124_p1 = ap_sig_allocacmp_s[5:0];

assign trunc_ln42_fu_160_p1 = bitcast_ln42_fu_147_p1[51:0];

assign zext_ln41_1_fu_139_p1 = add_ln41_reg_286;

assign zext_ln41_fu_114_p1 = ap_sig_allocacmp_s;

assign zext_ln42_fu_235_p1 = trunc_ln42_2_reg_291_pp0_iter3_reg;

endmodule //viterbi_viterbi_Pipeline_L_end
