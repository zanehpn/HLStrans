// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fdtd_2d_fdtd_2d_Pipeline_VITIS_LOOP_27_5_VITIS_LOOP_29_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ex_address0,
        ex_ce0,
        ex_we0,
        ex_d0,
        ex_address1,
        ex_ce1,
        ex_q1,
        hz_address0,
        hz_ce0,
        hz_q0,
        hz_address1,
        hz_ce1,
        hz_q1,
        grp_fu_158_p_din0,
        grp_fu_158_p_din1,
        grp_fu_158_p_opcode,
        grp_fu_158_p_dout0,
        grp_fu_158_p_ce,
        grp_fu_162_p_din0,
        grp_fu_162_p_din1,
        grp_fu_162_p_opcode,
        grp_fu_162_p_dout0,
        grp_fu_162_p_ce,
        grp_fu_166_p_din0,
        grp_fu_166_p_din1,
        grp_fu_166_p_dout0,
        grp_fu_166_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] ex_address0;
output   ex_ce0;
output   ex_we0;
output  [63:0] ex_d0;
output  [12:0] ex_address1;
output   ex_ce1;
input  [63:0] ex_q1;
output  [12:0] hz_address0;
output   hz_ce0;
input  [63:0] hz_q0;
output  [12:0] hz_address1;
output   hz_ce1;
input  [63:0] hz_q1;
output  [63:0] grp_fu_158_p_din0;
output  [63:0] grp_fu_158_p_din1;
output  [1:0] grp_fu_158_p_opcode;
input  [63:0] grp_fu_158_p_dout0;
output   grp_fu_158_p_ce;
output  [63:0] grp_fu_162_p_din0;
output  [63:0] grp_fu_162_p_din1;
output  [0:0] grp_fu_162_p_opcode;
input  [63:0] grp_fu_162_p_dout0;
output   grp_fu_162_p_ce;
output  [63:0] grp_fu_166_p_din0;
output  [63:0] grp_fu_166_p_din1;
input  [63:0] grp_fu_166_p_dout0;
output   grp_fu_166_p_ce;

reg ap_idle;
reg ex_ce0;
reg ex_we0;
reg ex_ce1;
reg hz_ce0;
reg hz_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln27_fu_140_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln30_2_fu_220_p2;
reg   [12:0] add_ln30_2_reg_313;
wire   [12:0] add_ln30_3_fu_236_p2;
reg   [12:0] add_ln30_3_reg_318;
reg   [12:0] ex_addr_reg_323;
reg   [12:0] ex_addr_reg_323_pp0_iter2_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter3_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter4_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter5_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter6_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter7_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter8_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter9_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter10_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter11_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter12_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter13_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter14_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter15_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter16_reg;
reg   [12:0] ex_addr_reg_323_pp0_iter17_reg;
reg   [63:0] hz_load_reg_339;
reg   [63:0] hz_load_1_reg_344;
wire   [63:0] bitcast_ln30_1_fu_272_p1;
wire   [63:0] bitcast_ln30_2_fu_276_p1;
reg   [63:0] sub2_reg_359;
reg   [63:0] ex_load_reg_364;
reg   [63:0] mul1_reg_369;
wire   [63:0] bitcast_ln30_fu_280_p1;
reg   [63:0] sub3_reg_379;
wire   [63:0] zext_ln30_3_fu_263_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln30_5_fu_268_p1;
reg   [6:0] j_fu_56;
wire   [6:0] add_ln29_fu_242_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_60;
wire   [5:0] select_ln27_1_fu_178_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [12:0] indvar_flatten6_fu_64;
wire   [12:0] add_ln27_1_fu_146_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [0:0] icmp_ln29_fu_164_p2;
wire   [5:0] add_ln27_fu_158_p2;
wire   [11:0] tmp_4_fu_186_p3;
wire   [9:0] tmp_5_fu_198_p3;
wire   [12:0] zext_ln30_fu_194_p1;
wire   [12:0] zext_ln30_1_fu_206_p1;
wire   [6:0] select_ln27_fu_170_p3;
wire   [12:0] add_ln30_1_fu_210_p2;
wire   [12:0] zext_ln30_2_fu_216_p1;
wire   [6:0] add_ln30_fu_226_p2;
wire   [12:0] zext_ln30_4_fu_232_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fdtd_2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln27_fu_140_p2 == 1'd0))) begin
            i_fu_60 <= select_ln27_1_fu_178_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln27_fu_140_p2 == 1'd0))) begin
            indvar_flatten6_fu_64 <= add_ln27_1_fu_146_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_64 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln27_fu_140_p2 == 1'd0))) begin
            j_fu_56 <= add_ln29_fu_242_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 7'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln27_fu_140_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln30_2_reg_313 <= add_ln30_2_fu_220_p2;
        add_ln30_3_reg_318 <= add_ln30_3_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ex_addr_reg_323_pp0_iter10_reg <= ex_addr_reg_323_pp0_iter9_reg;
        ex_addr_reg_323_pp0_iter11_reg <= ex_addr_reg_323_pp0_iter10_reg;
        ex_addr_reg_323_pp0_iter12_reg <= ex_addr_reg_323_pp0_iter11_reg;
        ex_addr_reg_323_pp0_iter13_reg <= ex_addr_reg_323_pp0_iter12_reg;
        ex_addr_reg_323_pp0_iter14_reg <= ex_addr_reg_323_pp0_iter13_reg;
        ex_addr_reg_323_pp0_iter15_reg <= ex_addr_reg_323_pp0_iter14_reg;
        ex_addr_reg_323_pp0_iter16_reg <= ex_addr_reg_323_pp0_iter15_reg;
        ex_addr_reg_323_pp0_iter17_reg <= ex_addr_reg_323_pp0_iter16_reg;
        ex_addr_reg_323_pp0_iter2_reg <= ex_addr_reg_323;
        ex_addr_reg_323_pp0_iter3_reg <= ex_addr_reg_323_pp0_iter2_reg;
        ex_addr_reg_323_pp0_iter4_reg <= ex_addr_reg_323_pp0_iter3_reg;
        ex_addr_reg_323_pp0_iter5_reg <= ex_addr_reg_323_pp0_iter4_reg;
        ex_addr_reg_323_pp0_iter6_reg <= ex_addr_reg_323_pp0_iter5_reg;
        ex_addr_reg_323_pp0_iter7_reg <= ex_addr_reg_323_pp0_iter6_reg;
        ex_addr_reg_323_pp0_iter8_reg <= ex_addr_reg_323_pp0_iter7_reg;
        ex_addr_reg_323_pp0_iter9_reg <= ex_addr_reg_323_pp0_iter8_reg;
        mul1_reg_369 <= grp_fu_166_p_dout0;
        sub2_reg_359 <= grp_fu_158_p_dout0;
        sub3_reg_379 <= grp_fu_162_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ex_addr_reg_323 <= zext_ln30_3_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ex_load_reg_364 <= ex_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hz_load_1_reg_344 <= hz_q0;
        hz_load_reg_339 <= hz_q1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln27_fu_140_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 7'd1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ex_ce0 = 1'b1;
    end else begin
        ex_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ex_ce1 = 1'b1;
    end else begin
        ex_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ex_we0 = 1'b1;
    end else begin
        ex_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hz_ce0 = 1'b1;
    end else begin
        hz_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hz_ce1 = 1'b1;
    end else begin
        hz_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_146_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 13'd1);

assign add_ln27_fu_158_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln29_fu_242_p2 = (select_ln27_fu_170_p3 + 7'd1);

assign add_ln30_1_fu_210_p2 = (zext_ln30_fu_194_p1 + zext_ln30_1_fu_206_p1);

assign add_ln30_2_fu_220_p2 = (add_ln30_1_fu_210_p2 + zext_ln30_2_fu_216_p1);

assign add_ln30_3_fu_236_p2 = (add_ln30_1_fu_210_p2 + zext_ln30_4_fu_232_p1);

assign add_ln30_fu_226_p2 = ($signed(select_ln27_fu_170_p3) + $signed(7'd127));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln30_1_fu_272_p1 = hz_load_reg_339;

assign bitcast_ln30_2_fu_276_p1 = hz_load_1_reg_344;

assign bitcast_ln30_fu_280_p1 = ex_load_reg_364;

assign ex_address0 = ex_addr_reg_323_pp0_iter17_reg;

assign ex_address1 = ex_addr_reg_323_pp0_iter10_reg;

assign ex_d0 = sub3_reg_379;

assign grp_fu_158_p_ce = 1'b1;

assign grp_fu_158_p_din0 = bitcast_ln30_1_fu_272_p1;

assign grp_fu_158_p_din1 = bitcast_ln30_2_fu_276_p1;

assign grp_fu_158_p_opcode = 2'd1;

assign grp_fu_162_p_ce = 1'b1;

assign grp_fu_162_p_din0 = bitcast_ln30_fu_280_p1;

assign grp_fu_162_p_din1 = mul1_reg_369;

assign grp_fu_162_p_opcode = 2'd1;

assign grp_fu_166_p_ce = 1'b1;

assign grp_fu_166_p_din0 = sub2_reg_359;

assign grp_fu_166_p_din1 = 64'd4602678819172646912;

assign hz_address0 = zext_ln30_5_fu_268_p1;

assign hz_address1 = zext_ln30_3_fu_263_p1;

assign icmp_ln27_fu_140_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 13'd4740) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_164_p2 = ((ap_sig_allocacmp_j_load == 7'd80) ? 1'b1 : 1'b0);

assign select_ln27_1_fu_178_p3 = ((icmp_ln29_fu_164_p2[0:0] == 1'b1) ? add_ln27_fu_158_p2 : ap_sig_allocacmp_i_load);

assign select_ln27_fu_170_p3 = ((icmp_ln29_fu_164_p2[0:0] == 1'b1) ? 7'd1 : ap_sig_allocacmp_j_load);

assign tmp_4_fu_186_p3 = {{select_ln27_1_fu_178_p3}, {6'd0}};

assign tmp_5_fu_198_p3 = {{select_ln27_1_fu_178_p3}, {4'd0}};

assign zext_ln30_1_fu_206_p1 = tmp_5_fu_198_p3;

assign zext_ln30_2_fu_216_p1 = select_ln27_fu_170_p3;

assign zext_ln30_3_fu_263_p1 = add_ln30_2_reg_313;

assign zext_ln30_4_fu_232_p1 = add_ln30_fu_226_p2;

assign zext_ln30_5_fu_268_p1 = add_ln30_3_reg_318;

assign zext_ln30_fu_194_p1 = tmp_4_fu_186_p3;

endmodule //fdtd_2d_fdtd_2d_Pipeline_VITIS_LOOP_27_5_VITIS_LOOP_29_6
