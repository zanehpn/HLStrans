-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_45_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node_in_degree : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce1 : OUT STD_LOGIC;
    neighbor_table_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_neighbors_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    node_neighbors_ce0 : OUT STD_LOGIC;
    node_neighbors_we0 : OUT STD_LOGIC;
    node_neighbors_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_neighbors_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    node_neighbors_ce1 : OUT STD_LOGIC;
    node_neighbors_we1 : OUT STD_LOGIC;
    node_neighbors_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_45_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln45_1_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_1_reg_200 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_141_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln45_reg_214 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln45_1_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln49_1_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_2_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_40 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln45_fu_174_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln45_1_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln48_fu_126_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_fu_130_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln45_2_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln48_fu_157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_1_fu_163_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_208 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gather_node_neighbors_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gather_node_neighbors_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    i_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_208)) then 
                    i_fu_40 <= add_ln45_fu_174_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_40 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_200 <= ap_sig_allocacmp_i_1;
                icmp_ln45_reg_205 <= icmp_ln45_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_120_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln45_1_reg_219 <= icmp_ln45_1_fu_151_p2;
                    or_ln45_reg_214(10 downto 1) <= or_ln45_fu_141_p2(10 downto 1);
            end if;
        end if;
    end process;
    or_ln45_reg_214(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln45_fu_174_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv11_2));
    add_ln49_1_fu_163_p2 <= std_logic_vector(unsigned(or_ln48_fu_157_p2) + unsigned(trunc_ln));
    add_ln49_fu_130_p2 <= std_logic_vector(unsigned(trunc_ln48_fu_126_p1) + unsigned(trunc_ln));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_208_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln45_1_fu_151_p2, icmp_ln45_fu_120_p2)
    begin
                ap_condition_208 <= ((icmp_ln45_fu_120_p2 = ap_const_lv1_1) and (icmp_ln45_1_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln45_1_fu_151_p2, icmp_ln45_fu_120_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln45_fu_120_p2 = ap_const_lv1_0) or (icmp_ln45_1_fu_151_p2 = ap_const_lv1_0)))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_40, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_40;
        end if; 
    end process;

    icmp_ln45_1_fu_151_p2 <= "1" when (signed(zext_ln45_2_fu_147_p1) < signed(node_in_degree)) else "0";
    icmp_ln45_fu_120_p2 <= "1" when (signed(zext_ln45_1_fu_116_p1) < signed(node_in_degree)) else "0";
    neighbor_table_address0 <= zext_ln49_1_fu_169_p1(10 - 1 downto 0);
    neighbor_table_address1 <= zext_ln49_fu_136_p1(10 - 1 downto 0);

    neighbor_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neighbor_table_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    neighbor_table_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neighbor_table_ce1 <= ap_const_logic_1;
        else 
            neighbor_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    node_neighbors_address0 <= zext_ln49_2_fu_189_p1(11 - 1 downto 0);
    node_neighbors_address1 <= zext_ln45_fu_185_p1(11 - 1 downto 0);

    node_neighbors_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_neighbors_ce0 <= ap_const_logic_1;
        else 
            node_neighbors_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_neighbors_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_neighbors_ce1 <= ap_const_logic_1;
        else 
            node_neighbors_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    node_neighbors_d0 <= neighbor_table_q0;
    node_neighbors_d1 <= neighbor_table_q1;

    node_neighbors_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln45_reg_205, icmp_ln45_1_reg_219)
    begin
        if (((icmp_ln45_1_reg_219 = ap_const_lv1_1) and (icmp_ln45_reg_205 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_neighbors_we0 <= ap_const_logic_1;
        else 
            node_neighbors_we0 <= ap_const_logic_0;
        end if; 
    end process;


    node_neighbors_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln45_reg_205)
    begin
        if (((icmp_ln45_reg_205 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_neighbors_we1 <= ap_const_logic_1;
        else 
            node_neighbors_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln45_fu_141_p2 <= (ap_sig_allocacmp_i_1 or ap_const_lv11_1);
    or_ln48_fu_157_p2 <= (trunc_ln48_fu_126_p1 or ap_const_lv10_1);
    trunc_ln48_fu_126_p1 <= ap_sig_allocacmp_i_1(10 - 1 downto 0);
    zext_ln45_1_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    zext_ln45_2_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_fu_141_p2),32));
    zext_ln45_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_200),64));
    zext_ln49_1_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_1_fu_163_p2),64));
    zext_ln49_2_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_reg_214),64));
    zext_ln49_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_130_p2),64));
end behav;
