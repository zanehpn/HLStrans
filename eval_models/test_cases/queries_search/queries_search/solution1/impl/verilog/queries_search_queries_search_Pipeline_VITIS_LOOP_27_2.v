// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module queries_search_queries_search_Pipeline_VITIS_LOOP_27_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bitcast_ln29,
        icmp_ln29_1,
        dist_reload,
        min_index_out,
        min_index_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] bitcast_ln29;
input  [0:0] icmp_ln29_1;
input  [31:0] dist_reload;
output  [31:0] min_index_out;
output   min_index_out_ap_vld;

reg ap_idle;
reg min_index_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln27_fu_113_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [11:0] t_1_reg_272;
reg   [31:0] min_dist_load_reg_280;
wire   [0:0] icmp_ln29_fu_138_p2;
reg   [0:0] icmp_ln29_reg_287;
reg   [31:0] min_dist_fu_54;
wire   [31:0] min_dist_1_fu_206_p3;
reg   [31:0] ap_sig_allocacmp_min_dist_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [31:0] min_index_fu_58;
wire   [31:0] min_index_4_fu_212_p3;
reg   [11:0] min_index_1_fu_62;
wire   [11:0] t_fu_119_p2;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_fu_129_p4;
wire   [31:0] bitcast_ln29_1_fu_155_p1;
wire   [7:0] tmp_1_fu_158_p4;
wire   [22:0] trunc_ln29_fu_168_p1;
wire   [0:0] icmp_ln29_3_fu_182_p2;
wire   [0:0] icmp_ln29_2_fu_176_p2;
wire   [0:0] grp_fu_91_p2;
wire   [0:0] or_ln29_fu_172_p2;
wire   [0:0] and_ln29_fu_194_p2;
wire   [0:0] or_ln29_1_fu_188_p2;
wire   [0:0] and_ln29_1_fu_200_p2;
wire   [31:0] t_2_cast_fu_152_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

queries_search_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dist_reload),
    .din1(ap_sig_allocacmp_min_dist_load),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_91_p2)
);

queries_search_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            min_dist_fu_54 <= 32'd2139095039;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_dist_fu_54 <= min_dist_1_fu_206_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            min_index_1_fu_62 <= 12'd0;
        end else if (((icmp_ln27_fu_113_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            min_index_1_fu_62 <= t_fu_119_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            min_index_fu_58 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_index_fu_58 <= min_index_4_fu_212_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_113_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln29_reg_287 <= icmp_ln29_fu_138_p2;
        min_dist_load_reg_280 <= ap_sig_allocacmp_min_dist_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_1_reg_272 <= min_index_1_fu_62;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_min_dist_load = min_dist_1_fu_206_p3;
    end else begin
        ap_sig_allocacmp_min_dist_load = min_dist_fu_54;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_113_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_index_out_ap_vld = 1'b1;
    end else begin
        min_index_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln29_1_fu_200_p2 = (or_ln29_1_fu_188_p2 & and_ln29_fu_194_p2);

assign and_ln29_fu_194_p2 = (or_ln29_fu_172_p2 & grp_fu_91_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln29_1_fu_155_p1 = min_dist_load_reg_280;

assign icmp_ln27_fu_113_p2 = ((min_index_1_fu_62 == 12'd3000) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_176_p2 = ((tmp_1_fu_158_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_182_p2 = ((trunc_ln29_fu_168_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_138_p2 = ((tmp_fu_129_p4 != 8'd255) ? 1'b1 : 1'b0);

assign min_dist_1_fu_206_p3 = ((and_ln29_1_fu_200_p2[0:0] == 1'b1) ? dist_reload : min_dist_load_reg_280);

assign min_index_4_fu_212_p3 = ((and_ln29_1_fu_200_p2[0:0] == 1'b1) ? t_2_cast_fu_152_p1 : min_index_fu_58);

assign min_index_out = min_index_fu_58;

assign or_ln29_1_fu_188_p2 = (icmp_ln29_3_fu_182_p2 | icmp_ln29_2_fu_176_p2);

assign or_ln29_fu_172_p2 = (icmp_ln29_reg_287 | icmp_ln29_1);

assign t_2_cast_fu_152_p1 = t_1_reg_272;

assign t_fu_119_p2 = (min_index_1_fu_62 + 12'd1);

assign tmp_1_fu_158_p4 = {{bitcast_ln29_1_fu_155_p1[30:23]}};

assign tmp_fu_129_p4 = {{bitcast_ln29[30:23]}};

assign trunc_ln29_fu_168_p1 = bitcast_ln29_1_fu_155_p1[22:0];

endmodule //queries_search_queries_search_Pipeline_VITIS_LOOP_27_2
