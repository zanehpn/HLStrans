// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_28_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_edges,
        edge_list_address0,
        edge_list_ce0,
        edge_list_q0,
        edge_list_address1,
        edge_list_ce1,
        edge_list_q1,
        neightbor_table_offsets_temp_address0,
        neightbor_table_offsets_temp_ce0,
        neightbor_table_offsets_temp_we0,
        neightbor_table_offsets_temp_d0,
        neightbor_table_offsets_temp_q0,
        neightbor_table_offsets_temp_1_address0,
        neightbor_table_offsets_temp_1_ce0,
        neightbor_table_offsets_temp_1_we0,
        neightbor_table_offsets_temp_1_d0,
        neightbor_table_offsets_temp_1_q0,
        neightbor_table_offsets_temp_2_address0,
        neightbor_table_offsets_temp_2_ce0,
        neightbor_table_offsets_temp_2_we0,
        neightbor_table_offsets_temp_2_d0,
        neightbor_table_offsets_temp_2_q0,
        neightbor_table_offsets_temp_3_address0,
        neightbor_table_offsets_temp_3_ce0,
        neightbor_table_offsets_temp_3_we0,
        neightbor_table_offsets_temp_3_d0,
        neightbor_table_offsets_temp_3_q0,
        neighbor_table_address0,
        neighbor_table_ce0,
        neighbor_table_we0,
        neighbor_table_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_edges;
output  [10:0] edge_list_address0;
output   edge_list_ce0;
input  [31:0] edge_list_q0;
output  [10:0] edge_list_address1;
output   edge_list_ce1;
input  [31:0] edge_list_q1;
output  [4:0] neightbor_table_offsets_temp_address0;
output   neightbor_table_offsets_temp_ce0;
output   neightbor_table_offsets_temp_we0;
output  [31:0] neightbor_table_offsets_temp_d0;
input  [31:0] neightbor_table_offsets_temp_q0;
output  [4:0] neightbor_table_offsets_temp_1_address0;
output   neightbor_table_offsets_temp_1_ce0;
output   neightbor_table_offsets_temp_1_we0;
output  [31:0] neightbor_table_offsets_temp_1_d0;
input  [31:0] neightbor_table_offsets_temp_1_q0;
output  [4:0] neightbor_table_offsets_temp_2_address0;
output   neightbor_table_offsets_temp_2_ce0;
output   neightbor_table_offsets_temp_2_we0;
output  [31:0] neightbor_table_offsets_temp_2_d0;
input  [31:0] neightbor_table_offsets_temp_2_q0;
output  [4:0] neightbor_table_offsets_temp_3_address0;
output   neightbor_table_offsets_temp_3_ce0;
output   neightbor_table_offsets_temp_3_we0;
output  [31:0] neightbor_table_offsets_temp_3_d0;
input  [31:0] neightbor_table_offsets_temp_3_q0;
output  [9:0] neighbor_table_address0;
output   neighbor_table_ce0;
output   neighbor_table_we0;
output  [31:0] neighbor_table_d0;

reg ap_idle;
reg edge_list_ce0;
reg edge_list_ce1;
reg[4:0] neightbor_table_offsets_temp_address0;
reg neightbor_table_offsets_temp_ce0;
reg neightbor_table_offsets_temp_we0;
reg[4:0] neightbor_table_offsets_temp_1_address0;
reg neightbor_table_offsets_temp_1_ce0;
reg neightbor_table_offsets_temp_1_we0;
reg[4:0] neightbor_table_offsets_temp_2_address0;
reg neightbor_table_offsets_temp_2_ce0;
reg neightbor_table_offsets_temp_2_we0;
reg[4:0] neightbor_table_offsets_temp_3_address0;
reg neightbor_table_offsets_temp_3_ce0;
reg neightbor_table_offsets_temp_3_we0;
reg neighbor_table_ce0;
reg neighbor_table_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_176_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln28_reg_274;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] source_reg_288;
wire    ap_block_pp0_stage1_11001;
reg   [4:0] neightbor_table_offsets_temp_addr_reg_293;
reg   [4:0] neightbor_table_offsets_temp_1_addr_reg_298;
reg   [4:0] neightbor_table_offsets_temp_2_addr_reg_303;
reg   [4:0] neightbor_table_offsets_temp_3_addr_reg_308;
wire   [1:0] trunc_ln33_fu_235_p1;
reg   [1:0] trunc_ln33_reg_313;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln30_fu_196_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln31_fu_207_p1;
wire   [63:0] zext_ln33_fu_227_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln34_fu_252_p1;
reg   [30:0] i_fu_60;
wire   [30:0] add_ln28_fu_182_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
wire   [31:0] add_ln35_fu_257_p2;
wire   [31:0] zext_ln28_fu_172_p1;
wire   [9:0] trunc_ln28_fu_168_p1;
wire   [10:0] tmp_1_fu_188_p3;
wire   [10:0] or_ln31_fu_201_p2;
wire   [4:0] lshr_ln2_fu_217_p4;
wire   [31:0] offset_fu_239_p6;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

compute_neighbor_tables_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U8(
    .din0(neightbor_table_offsets_temp_q0),
    .din1(neightbor_table_offsets_temp_1_q0),
    .din2(neightbor_table_offsets_temp_2_q0),
    .din3(neightbor_table_offsets_temp_3_q0),
    .din4(trunc_ln33_reg_313),
    .dout(offset_fu_239_p6)
);

compute_neighbor_tables_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_176_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= add_ln28_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln28_reg_274 <= icmp_ln28_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln28_reg_274 == 1'd1))) begin
        neightbor_table_offsets_temp_1_addr_reg_298 <= zext_ln33_fu_227_p1;
        neightbor_table_offsets_temp_2_addr_reg_303 <= zext_ln33_fu_227_p1;
        neightbor_table_offsets_temp_3_addr_reg_308 <= zext_ln33_fu_227_p1;
        neightbor_table_offsets_temp_addr_reg_293 <= zext_ln33_fu_227_p1;
        trunc_ln33_reg_313 <= trunc_ln33_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln28_reg_274 == 1'd1))) begin
        source_reg_288 <= edge_list_q1;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_176_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edge_list_ce0 = 1'b1;
    end else begin
        edge_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edge_list_ce1 = 1'b1;
    end else begin
        edge_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_ce0 = 1'b1;
    end else begin
        neighbor_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_we0 = 1'b1;
    end else begin
        neighbor_table_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neightbor_table_offsets_temp_1_address0 = neightbor_table_offsets_temp_1_addr_reg_298;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neightbor_table_offsets_temp_1_address0 = zext_ln33_fu_227_p1;
    end else begin
        neightbor_table_offsets_temp_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        neightbor_table_offsets_temp_1_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln33_reg_313 == 2'd1))) begin
        neightbor_table_offsets_temp_1_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neightbor_table_offsets_temp_2_address0 = neightbor_table_offsets_temp_2_addr_reg_303;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neightbor_table_offsets_temp_2_address0 = zext_ln33_fu_227_p1;
    end else begin
        neightbor_table_offsets_temp_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        neightbor_table_offsets_temp_2_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln33_reg_313 == 2'd2))) begin
        neightbor_table_offsets_temp_2_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neightbor_table_offsets_temp_3_address0 = neightbor_table_offsets_temp_3_addr_reg_308;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neightbor_table_offsets_temp_3_address0 = zext_ln33_fu_227_p1;
    end else begin
        neightbor_table_offsets_temp_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        neightbor_table_offsets_temp_3_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln33_reg_313 == 2'd3))) begin
        neightbor_table_offsets_temp_3_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neightbor_table_offsets_temp_address0 = neightbor_table_offsets_temp_addr_reg_293;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neightbor_table_offsets_temp_address0 = zext_ln33_fu_227_p1;
    end else begin
        neightbor_table_offsets_temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        neightbor_table_offsets_temp_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln33_reg_313 == 2'd0))) begin
        neightbor_table_offsets_temp_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_182_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign add_ln35_fu_257_p2 = (offset_fu_239_p6 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign edge_list_address0 = zext_ln31_fu_207_p1;

assign edge_list_address1 = zext_ln30_fu_196_p1;

assign icmp_ln28_fu_176_p2 = (($signed(zext_ln28_fu_172_p1) < $signed(num_edges)) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_217_p4 = {{edge_list_q0[6:2]}};

assign neighbor_table_address0 = zext_ln34_fu_252_p1;

assign neighbor_table_d0 = source_reg_288;

assign neightbor_table_offsets_temp_1_d0 = add_ln35_fu_257_p2;

assign neightbor_table_offsets_temp_2_d0 = add_ln35_fu_257_p2;

assign neightbor_table_offsets_temp_3_d0 = add_ln35_fu_257_p2;

assign neightbor_table_offsets_temp_d0 = add_ln35_fu_257_p2;

assign or_ln31_fu_201_p2 = (tmp_1_fu_188_p3 | 11'd1);

assign tmp_1_fu_188_p3 = {{trunc_ln28_fu_168_p1}, {1'd0}};

assign trunc_ln28_fu_168_p1 = ap_sig_allocacmp_i_1[9:0];

assign trunc_ln33_fu_235_p1 = edge_list_q0[1:0];

assign zext_ln28_fu_172_p1 = ap_sig_allocacmp_i_1;

assign zext_ln30_fu_196_p1 = tmp_1_fu_188_p3;

assign zext_ln31_fu_207_p1 = or_ln31_fu_201_p2;

assign zext_ln33_fu_227_p1 = lshr_ln2_fu_217_p4;

assign zext_ln34_fu_252_p1 = offset_fu_239_p6;

endmodule //compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_28_2
