-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_i : IN STD_LOGIC_VECTOR (767 downto 0);
    ctx_o : OUT STD_LOGIC_VECTOR (767 downto 0);
    ctx_o_ap_vld : OUT STD_LOGIC;
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes256_encrypt_ecb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes256_encrypt_ecb_aes256_encrypt_ecb,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.649000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=26819,HLS_SYN_LUT=213492,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_411 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln148_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln148_fu_593_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_417 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln142_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_440 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_482 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal buf_r_addr_12_reg_1047 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln102_fu_572_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln102_reg_1052 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_addr_13_reg_1058 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln100_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln100_reg_1063 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln148_reg_1068 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_addr_14_reg_1072 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_addr_15_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln105_1_fu_762_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_1_reg_1082 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln105_3_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_3_reg_1087 : STD_LOGIC_VECTOR (7 downto 0);
    signal rcon_3_reg_1092 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_addr_17_reg_1097 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln71_1_fu_813_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_1_reg_1103 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_addr_16_reg_1111 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln71_fu_878_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_reg_1117 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_p_partset613_out_o : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_p_partset613_out_o_ap_vld : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_362_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_362_ap_done : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_362_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_362_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_362_p_read : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_expandEncKey_fu_362_k_idx : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aes_expandEncKey_fu_362_rc_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_362_ap_return_0 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_expandEncKey_fu_362_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce1 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_or_ln79_1_out : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_or_ln79_1_out_ap_vld : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_ap_start : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_ap_done : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_ap_idle : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_ap_ready : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_1_fu_380_buf_r_ce0 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_buf_r_we0 : STD_LOGIC;
    signal grp_aes_subBytes_1_fu_380_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_we0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce1 : STD_LOGIC;
    signal i_15_reg_318 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_16_reg_329 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln71_1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln71_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ctx7_fu_132 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_expandEncKey_fu_362_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_ln79_1_loc_fu_136 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_aes_subBytes_1_fu_380_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln100_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_1_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_2_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_3_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_fu_124 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln142_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal rcon_2_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_fu_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_23_fu_863_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_24_fu_144 : STD_LOGIC_VECTOR (767 downto 0);
    signal rcon_1_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal xor_ln104_1_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_4_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln71_1_fu_841_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln71_fu_911_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal or_ln102_fu_576_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln102_1_fu_596_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln102_2_fu_606_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln103_fu_616_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln103_1_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln55_fu_642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln55_fu_654_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_fu_662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_2_fu_675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln55_1_fu_689_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_1_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln55_1_fu_701_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln104_3_fu_709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_2_fu_722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln55_2_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_2_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln55_2_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_fu_756_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln105_4_fu_768_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln55_3_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_774_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_3_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln55_3_fu_794_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln71_1_fu_819_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln71_1_fu_827_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln71_1_fu_831_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln71_1_fu_837_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln71_2_cast_fu_887_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln71_2_fu_897_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln71_fu_901_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln71_fu_907_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_load : IN STD_LOGIC_VECTOR (767 downto 0);
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_partset613_out_i : IN STD_LOGIC_VECTOR (767 downto 0);
        p_partset613_out_o : OUT STD_LOGIC_VECTOR (767 downto 0);
        p_partset613_out_o_ap_vld : OUT STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (767 downto 0);
        k_idx : IN STD_LOGIC_VECTOR (9 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (767 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx7 : IN STD_LOGIC_VECTOR (767 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        or_ln79_1_out : OUT STD_LOGIC_VECTOR (767 downto 0);
        or_ln79_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component aes256_encrypt_ecb_aes_subBytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_addkey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_ret : IN STD_LOGIC_VECTOR (767 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_ready,
        ctx_load => reg_411,
        k_address0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_k_ce0,
        k_q0 => k_q0,
        p_partset613_out_i => ctx7_fu_132,
        p_partset613_out_o => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_p_partset613_out_o,
        p_partset613_out_o_ap_vld => grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_p_partset613_out_o_ap_vld);

    grp_aes_expandEncKey_fu_362 : component aes256_encrypt_ecb_aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_expandEncKey_fu_362_ap_start,
        ap_done => grp_aes_expandEncKey_fu_362_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_362_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_362_ap_ready,
        p_read => grp_aes_expandEncKey_fu_362_p_read,
        k_idx => grp_aes_expandEncKey_fu_362_k_idx,
        rc_read => grp_aes_expandEncKey_fu_362_rc_read,
        ap_return_0 => grp_aes_expandEncKey_fu_362_ap_return_0,
        ap_return_1 => grp_aes_expandEncKey_fu_362_ap_return_1);

    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_ready,
        ctx7 => reg_417,
        buf_r_address0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_d0,
        buf_r_address1 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce1,
        buf_r_q1 => buf_r_q1,
        or_ln79_1_out => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_or_ln79_1_out,
        or_ln79_1_out_ap_vld => grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_or_ln79_1_out_ap_vld);

    grp_aes_subBytes_1_fu_380 : component aes256_encrypt_ecb_aes_subBytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_subBytes_1_fu_380_ap_start,
        ap_done => grp_aes_subBytes_1_fu_380_ap_done,
        ap_idle => grp_aes_subBytes_1_fu_380_ap_idle,
        ap_ready => grp_aes_subBytes_1_fu_380_ap_ready,
        buf_r_address0 => grp_aes_subBytes_1_fu_380_buf_r_address0,
        buf_r_ce0 => grp_aes_subBytes_1_fu_380_buf_r_ce0,
        buf_r_we0 => grp_aes_subBytes_1_fu_380_buf_r_we0,
        buf_r_d0 => grp_aes_subBytes_1_fu_380_buf_r_d0,
        buf_r_q0 => buf_r_q0);

    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386 : component aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_addkey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start,
        ap_done => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_ready,
        ctx_ret => reg_482,
        buf_r_address0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address0,
        buf_r_ce0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce0,
        buf_r_we0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_we0,
        buf_r_d0 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_d0,
        buf_r_address1 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address1,
        buf_r_ce1 => grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce1,
        buf_r_q1 => buf_r_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_1))) then 
                    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_expandEncKey_fu_362_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_expandEncKey_fu_362_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln148_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln148_fu_593_p1 = ap_const_lv1_0) and (tmp_fu_564_p3 = ap_const_lv1_1)))) then 
                    grp_aes_expandEncKey_fu_362_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_expandEncKey_fu_362_ap_ready = ap_const_logic_1)) then 
                    grp_aes_expandEncKey_fu_362_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_subBytes_1_fu_380_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_subBytes_1_fu_380_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln148_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln148_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_aes_subBytes_1_fu_380_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_subBytes_1_fu_380_ap_ready = ap_const_logic_1)) then 
                    grp_aes_subBytes_1_fu_380_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx7_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ctx7_fu_132 <= grp_aes_expandEncKey_fu_362_ap_return_0;
            elsif (((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_p_partset613_out_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ctx7_fu_132 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_p_partset613_out_o;
            end if; 
        end if;
    end process;

    empty_24_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                empty_24_fu_144 <= or_ln79_1_loc_fu_136;
            elsif (((icmp_ln71_1_fu_848_p2 = ap_const_lv1_1) and (trunc_ln148_reg_1068 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                empty_24_fu_144 <= reg_482;
            end if; 
        end if;
    end process;

    i_11_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_1))) then 
                i_11_fu_140 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln71_1_fu_848_p2 = ap_const_lv1_1) or (trunc_ln148_reg_1068 = ap_const_lv1_1)))) then 
                i_11_fu_140 <= i_23_fu_863_p2;
            end if; 
        end if;
    end process;

    i_15_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_15_reg_318 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_15_reg_318 <= add_ln100_reg_1063;
            end if; 
        end if;
    end process;

    i_16_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_16_reg_329 <= ap_const_lv4_F;
            elsif (((icmp_ln71_1_fu_848_p2 = ap_const_lv1_0) and (trunc_ln148_reg_1068 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                i_16_reg_329 <= add_ln71_1_reg_1103;
            end if; 
        end if;
    end process;

    i_17_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln148_fu_593_p1 = ap_const_lv1_1) and (tmp_fu_564_p3 = ap_const_lv1_1))) then 
                i_17_reg_341 <= ap_const_lv4_F;
            elsif (((icmp_ln71_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_17_reg_341 <= add_ln71_reg_1117;
            end if; 
        end if;
    end process;

    i_7_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_7_fu_124 <= ap_const_lv3_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_0))) then 
                i_7_fu_124 <= add_ln142_fu_510_p2;
            end if; 
        end if;
    end process;

    rcon_1_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_1))) then 
                rcon_1_fu_148 <= ap_const_lv8_1;
            elsif (((icmp_ln71_1_fu_848_p2 = ap_const_lv1_1) and (trunc_ln148_reg_1068 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                rcon_1_fu_148 <= rcon_3_reg_1092;
            end if; 
        end if;
    end process;

    rcon_2_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rcon_2_fu_128 <= ap_const_lv8_1;
            elsif (((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rcon_2_fu_128 <= grp_aes_expandEncKey_fu_362_ap_return_1;
            end if; 
        end if;
    end process;

    reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                reg_433 <= buf_r_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                reg_433 <= buf_r_q0;
            end if; 
        end if;
    end process;

    reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                reg_440 <= buf_r_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_440 <= buf_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_fu_564_p3 = ap_const_lv1_0))) then
                add_ln100_reg_1063 <= add_ln100_fu_587_p2;
                buf_r_addr_12_reg_1047 <= zext_ln100_fu_559_p1(4 - 1 downto 0);
                    buf_r_addr_13_reg_1058(3 downto 1) <= zext_ln102_fu_582_p1(4 - 1 downto 0)(3 downto 1);
                trunc_ln102_reg_1052 <= trunc_ln102_fu_572_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln71_1_reg_1103 <= add_ln71_1_fu_813_p2;
                buf_r_addr_17_reg_1097 <= zext_ln71_3_fu_808_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln71_reg_1117 <= add_ln71_fu_878_p2;
                buf_r_addr_16_reg_1111 <= zext_ln71_fu_873_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    buf_r_addr_14_reg_1072(0) <= zext_ln102_1_fu_601_p1(4 - 1 downto 0)(0);    buf_r_addr_14_reg_1072(3 downto 2) <= zext_ln102_1_fu_601_p1(4 - 1 downto 0)(3 downto 2);
                    buf_r_addr_15_reg_1077(3 downto 2) <= zext_ln102_2_fu_611_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_or_ln79_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                or_ln79_1_loc_fu_136 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_or_ln79_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                rcon_3_reg_1092 <= grp_aes_expandEncKey_fu_362_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((icmp_ln148_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln148_fu_593_p1 = ap_const_lv1_0) and (tmp_fu_564_p3 = ap_const_lv1_1)))) then
                reg_411 <= ctx_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_0)))) then
                reg_417 <= ctx7_fu_132;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln148_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln148_fu_593_p1 = ap_const_lv1_0) and (tmp_fu_564_p3 = ap_const_lv1_1)))) then
                reg_423 <= rcon_1_fu_148;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_428 <= buf_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_447 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_452 <= buf_r_q1;
                reg_457 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_462 <= buf_r_q1;
                reg_467 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_472 <= buf_r_q1;
                reg_477 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_482 <= grp_aes_expandEncKey_fu_362_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_fu_564_p3 = ap_const_lv1_1))) then
                trunc_ln148_reg_1068 <= trunc_ln148_fu_593_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                xor_ln105_1_reg_1082 <= xor_ln105_1_fu_762_p2;
                xor_ln105_3_reg_1087 <= xor_ln105_3_fu_802_p2;
            end if;
        end if;
    end process;
    buf_r_addr_13_reg_1058(0) <= '1';
    buf_r_addr_14_reg_1072(1) <= '1';
    buf_r_addr_15_reg_1077(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln148_fu_553_p2, ap_CS_fsm_state21, tmp_fu_564_p3, trunc_ln148_fu_593_p1, ap_CS_fsm_state3, icmp_ln142_fu_500_p2, ap_CS_fsm_state25, ap_CS_fsm_state30, trunc_ln148_reg_1068, grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_done, grp_aes_expandEncKey_fu_362_ap_done, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_done, grp_aes_subBytes_1_fu_380_ap_done, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done, ap_CS_fsm_state27, icmp_ln71_1_fu_848_p2, ap_CS_fsm_state29, icmp_ln71_fu_918_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state44, ap_block_state30_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln142_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln148_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_aes_subBytes_1_fu_380_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln148_fu_593_p1 = ap_const_lv1_1) and (tmp_fu_564_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln148_fu_593_p1 = ap_const_lv1_0) and (tmp_fu_564_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                if (((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln71_1_fu_848_p2 = ap_const_lv1_1) or (trunc_ln148_reg_1068 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln71_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_587_p2 <= std_logic_vector(unsigned(i_15_reg_318) + unsigned(ap_const_lv5_4));
    add_ln142_fu_510_p2 <= std_logic_vector(unsigned(i_7_fu_124) + unsigned(ap_const_lv3_7));
    add_ln71_1_fu_813_p2 <= std_logic_vector(unsigned(i_16_reg_329) + unsigned(ap_const_lv4_F));
    add_ln71_fu_878_p2 <= std_logic_vector(unsigned(i_17_reg_341) + unsigned(ap_const_lv4_F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(grp_aes_expandEncKey_fu_362_ap_done)
    begin
        if ((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state30_blk_assign_proc : process(ap_block_state30_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state30_on_subcall_done)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes_expandEncKey_fu_362_ap_done)
    begin
        if ((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_done)
    begin
        if ((grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_aes_subBytes_1_fu_380_ap_done)
    begin
        if ((grp_aes_subBytes_1_fu_380_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state30_on_subcall_done_assign_proc : process(grp_aes_expandEncKey_fu_362_ap_done, grp_aes_subBytes_1_fu_380_ap_done)
    begin
                ap_block_state30_on_subcall_done <= ((grp_aes_subBytes_1_fu_380_ap_done = ap_const_logic_0) or (grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done, ap_CS_fsm_state44)
    begin
        if (((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done, ap_CS_fsm_state44)
    begin
        if (((grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state15, ap_CS_fsm_state37, ap_CS_fsm_state11, ap_CS_fsm_state33, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state13, ap_CS_fsm_state35, ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state30, buf_r_addr_13_reg_1058, buf_r_addr_15_reg_1077, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state28, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address0, grp_aes_subBytes_1_fu_380_buf_r_address0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address0, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state44, zext_ln102_fu_582_p1, zext_ln102_2_fu_611_p1, zext_ln71_3_fu_808_p1, zext_ln71_fu_873_p1, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            buf_r_address0 <= zext_ln71_fu_873_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_r_address0 <= zext_ln71_3_fu_808_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_r_address0 <= buf_r_addr_15_reg_1077;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_r_address0 <= buf_r_addr_13_reg_1058;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buf_r_address0 <= zext_ln102_2_fu_611_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buf_r_address0 <= zext_ln102_fu_582_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            buf_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_r_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            buf_r_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_r_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf_r_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            buf_r_address0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            buf_r_address0 <= grp_aes_subBytes_1_fu_380_buf_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_r_address0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address0;
        else 
            buf_r_address0 <= "XXXX";
        end if; 
    end process;


    buf_r_address1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state15, ap_CS_fsm_state37, ap_CS_fsm_state11, ap_CS_fsm_state33, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state13, ap_CS_fsm_state35, ap_CS_fsm_state14, ap_CS_fsm_state36, buf_r_addr_12_reg_1047, buf_r_addr_14_reg_1072, ap_CS_fsm_state23, buf_r_addr_17_reg_1097, buf_r_addr_16_reg_1111, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address1, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address1, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state5, ap_CS_fsm_state44, zext_ln100_fu_559_p1, zext_ln102_1_fu_601_p1, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            buf_r_address1 <= buf_r_addr_16_reg_1111;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            buf_r_address1 <= buf_r_addr_17_reg_1097;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_r_address1 <= buf_r_addr_14_reg_1072;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_r_address1 <= buf_r_addr_12_reg_1047;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buf_r_address1 <= zext_ln102_1_fu_601_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            buf_r_address1 <= zext_ln100_fu_559_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            buf_r_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            buf_r_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            buf_r_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            buf_r_address1 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_r_address1 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_address1;
        else 
            buf_r_address1 <= "XXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state15, ap_CS_fsm_state37, ap_CS_fsm_state11, ap_CS_fsm_state33, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state13, ap_CS_fsm_state35, ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state30, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state28, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce0, grp_aes_subBytes_1_fu_380_buf_r_ce0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce0, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state44, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            buf_r_ce0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            buf_r_ce0 <= grp_aes_subBytes_1_fu_380_buf_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_r_ce0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce0;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state15, ap_CS_fsm_state37, ap_CS_fsm_state11, ap_CS_fsm_state33, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state13, ap_CS_fsm_state35, ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state23, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce1, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce1, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state5, ap_CS_fsm_state44, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            buf_r_ce1 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_r_ce1 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_ce1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_d0_assign_proc : process(reg_428, reg_433, ap_CS_fsm_state15, ap_CS_fsm_state37, reg_440, reg_452, reg_462, reg_472, ap_CS_fsm_state30, ap_CS_fsm_state23, xor_ln105_3_reg_1087, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_d0, grp_aes_subBytes_1_fu_380_buf_r_d0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_d0, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state44, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, xor_ln104_4_fu_715_p2, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_r_d0 <= xor_ln105_3_reg_1087;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_r_d0 <= xor_ln104_4_fu_715_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_r_d0 <= reg_433;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            buf_r_d0 <= reg_462;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_r_d0 <= reg_472;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            buf_r_d0 <= reg_452;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_d0 <= reg_428;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf_r_d0 <= reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            buf_r_d0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            buf_r_d0 <= grp_aes_subBytes_1_fu_380_buf_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_r_d0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_d0;
        else 
            buf_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_d1_assign_proc : process(reg_433, ap_CS_fsm_state15, ap_CS_fsm_state37, reg_440, reg_447, reg_457, reg_467, reg_477, xor_ln105_1_reg_1082, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, xor_ln104_1_fu_668_p2, xor_ln71_1_fu_841_p2, xor_ln71_fu_911_p2, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            buf_r_d1 <= xor_ln71_fu_911_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            buf_r_d1 <= xor_ln71_1_fu_841_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_r_d1 <= xor_ln105_1_reg_1082;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_r_d1 <= xor_ln104_1_fu_668_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            buf_r_d1 <= reg_440;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            buf_r_d1 <= reg_477;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_r_d1 <= reg_467;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            buf_r_d1 <= reg_457;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_d1 <= reg_447;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf_r_d1 <= reg_433;
        else 
            buf_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state37, ap_CS_fsm_state30, ap_CS_fsm_state23, grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_we0, grp_aes_subBytes_1_fu_380_buf_r_we0, grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_we0, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state44, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf_r_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            buf_r_we0 <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_buf_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            buf_r_we0 <= grp_aes_subBytes_1_fu_380_buf_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_r_we0 <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_buf_r_we0;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_we1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state37, trunc_ln148_reg_1068, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((trunc_ln148_reg_1068 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_o_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state6, grp_aes_expandEncKey_fu_362_ap_done, grp_aes_expandEncKey_fu_362_ap_return_0, or_ln79_1_loc_fu_136, ap_block_state30_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            ctx_o <= grp_aes_expandEncKey_fu_362_ap_return_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_o <= or_ln79_1_loc_fu_136;
        else 
            ctx_o
        end if; 
    end process;


    ctx_o_ap_vld_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state6, grp_aes_expandEncKey_fu_362_ap_done, ap_block_state30_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_aes_expandEncKey_fu_362_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            ctx_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_fu_628_p2 <= (xor_ln103_1_fu_622_p2 xor buf_r_q0);
    grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start <= grp_aes256_encrypt_ecb_Pipeline_addkey_fu_386_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start <= grp_aes256_encrypt_ecb_Pipeline_cpkey_fu_372_ap_start_reg;
    grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_ap_start_reg;
    grp_aes_expandEncKey_fu_362_ap_start <= grp_aes_expandEncKey_fu_362_ap_start_reg;

    grp_aes_expandEncKey_fu_362_k_idx_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_aes_expandEncKey_fu_362_k_idx <= ap_const_lv10_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_aes_expandEncKey_fu_362_k_idx <= ap_const_lv10_200;
        else 
            grp_aes_expandEncKey_fu_362_k_idx <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_362_p_read_assign_proc : process(reg_411, reg_417, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_aes_expandEncKey_fu_362_p_read <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_aes_expandEncKey_fu_362_p_read <= reg_417;
        else 
            grp_aes_expandEncKey_fu_362_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_362_rc_read_assign_proc : process(reg_423, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state4, rcon_2_fu_128)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_aes_expandEncKey_fu_362_rc_read <= reg_423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_aes_expandEncKey_fu_362_rc_read <= rcon_2_fu_128;
        else 
            grp_aes_expandEncKey_fu_362_rc_read <= "XXXXXXXX";
        end if; 
    end process;

    grp_aes_subBytes_1_fu_380_ap_start <= grp_aes_subBytes_1_fu_380_ap_start_reg;
    i_23_fu_863_p2 <= std_logic_vector(unsigned(i_11_fu_140) + unsigned(ap_const_lv4_1));
    icmp_ln142_fu_500_p2 <= "1" when (i_7_fu_124 = ap_const_lv3_0) else "0";
    icmp_ln148_fu_553_p2 <= "1" when (i_11_fu_140 = ap_const_lv4_E) else "0";
    icmp_ln71_1_fu_848_p2 <= "1" when (i_16_reg_329 = ap_const_lv4_0) else "0";
    icmp_ln71_fu_918_p2 <= "1" when (i_17_reg_341 = ap_const_lv4_0) else "0";
    k_address0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_k_address0;
    k_ce0 <= grp_aes256_encrypt_ecb_Pipeline_ecb1_fu_353_k_ce0;
    lshr_ln71_1_fu_831_p2 <= std_logic_vector(shift_right(unsigned(reg_482),to_integer(unsigned('0' & zext_ln71_1_fu_827_p1(31-1 downto 0)))));
    lshr_ln71_fu_901_p2 <= std_logic_vector(shift_right(unsigned(empty_24_fu_144),to_integer(unsigned('0' & zext_ln71_2_fu_897_p1(31-1 downto 0)))));
    or_ln102_1_fu_596_p2 <= (trunc_ln102_reg_1052 or ap_const_lv4_2);
    or_ln102_2_fu_606_p2 <= (trunc_ln102_reg_1052 or ap_const_lv4_3);
    or_ln102_fu_576_p2 <= (trunc_ln102_fu_572_p1 or ap_const_lv4_1);
    select_ln55_1_fu_701_p3 <= 
        xor_ln55_1_fu_695_p2 when (tmp_35_fu_681_p3(0) = '1') else 
        shl_ln55_1_fu_689_p2;
    select_ln55_2_fu_748_p3 <= 
        xor_ln55_2_fu_742_p2 when (tmp_36_fu_728_p3(0) = '1') else 
        shl_ln55_2_fu_736_p2;
    select_ln55_3_fu_794_p3 <= 
        xor_ln55_3_fu_788_p2 when (tmp_37_fu_774_p3(0) = '1') else 
        shl_ln55_3_fu_782_p2;
    select_ln55_fu_654_p3 <= 
        xor_ln55_fu_648_p2 when (tmp_34_fu_634_p3(0) = '1') else 
        shl_ln55_fu_642_p2;
    shl_ln55_1_fu_689_p2 <= std_logic_vector(shift_left(unsigned(xor_ln104_2_fu_675_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln55_2_fu_736_p2 <= std_logic_vector(shift_left(unsigned(xor_ln105_2_fu_722_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln55_3_fu_782_p2 <= std_logic_vector(shift_left(unsigned(xor_ln105_4_fu_768_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln55_fu_642_p2 <= std_logic_vector(shift_left(unsigned(xor_ln103_fu_616_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln71_1_fu_819_p3 <= (i_16_reg_329 & ap_const_lv3_0);
    tmp_34_fu_634_p3 <= xor_ln103_fu_616_p2(7 downto 7);
    tmp_35_fu_681_p3 <= xor_ln104_2_fu_675_p2(7 downto 7);
    tmp_36_fu_728_p3 <= xor_ln105_2_fu_722_p2(7 downto 7);
    tmp_37_fu_774_p3 <= xor_ln105_4_fu_768_p2(7 downto 7);
    tmp_fu_564_p3 <= i_15_reg_318(4 downto 4);
    trunc_ln102_fu_572_p1 <= i_15_reg_318(4 - 1 downto 0);
    trunc_ln148_fu_593_p1 <= i_11_fu_140(1 - 1 downto 0);
    trunc_ln71_1_fu_837_p1 <= lshr_ln71_1_fu_831_p2(8 - 1 downto 0);
    trunc_ln71_fu_907_p1 <= lshr_ln71_fu_901_p2(8 - 1 downto 0);
    xor_ln103_1_fu_622_p2 <= (xor_ln103_fu_616_p2 xor buf_r_q1);
    xor_ln103_fu_616_p2 <= (reg_433 xor reg_428);
    xor_ln104_1_fu_668_p2 <= (xor_ln104_fu_662_p2 xor reg_428);
    xor_ln104_2_fu_675_p2 <= (reg_433 xor buf_r_q1);
    xor_ln104_3_fu_709_p2 <= (select_ln55_1_fu_701_p3 xor e_fu_628_p2);
    xor_ln104_4_fu_715_p2 <= (xor_ln104_3_fu_709_p2 xor reg_433);
    xor_ln104_fu_662_p2 <= (select_ln55_fu_654_p3 xor e_fu_628_p2);
    xor_ln105_1_fu_762_p2 <= (xor_ln105_fu_756_p2 xor buf_r_q0);
    xor_ln105_2_fu_722_p2 <= (buf_r_q1 xor buf_r_q0);
    xor_ln105_3_fu_802_p2 <= (xor_ln103_1_fu_622_p2 xor select_ln55_3_fu_794_p3);
    xor_ln105_4_fu_768_p2 <= (reg_428 xor buf_r_q0);
    xor_ln105_fu_756_p2 <= (xor_ln103_fu_616_p2 xor select_ln55_2_fu_748_p3);
    xor_ln55_1_fu_695_p2 <= (shl_ln55_1_fu_689_p2 xor ap_const_lv8_1B);
    xor_ln55_2_fu_742_p2 <= (shl_ln55_2_fu_736_p2 xor ap_const_lv8_1B);
    xor_ln55_3_fu_788_p2 <= (shl_ln55_3_fu_782_p2 xor ap_const_lv8_1B);
    xor_ln55_fu_648_p2 <= (shl_ln55_fu_642_p2 xor ap_const_lv8_1B);
    xor_ln71_1_fu_841_p2 <= (trunc_ln71_1_fu_837_p1 xor buf_r_q0);
    xor_ln71_fu_911_p2 <= (trunc_ln71_fu_907_p1 xor buf_r_q0);
    zext_ln100_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_15_reg_318),64));
    zext_ln102_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln102_1_fu_596_p2),64));
    zext_ln102_2_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln102_2_fu_606_p2),64));
    zext_ln102_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln102_fu_576_p2),64));
    zext_ln71_1_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln71_1_fu_819_p3),768));
    zext_ln71_2_cast_fu_887_p4 <= ((ap_const_lv1_1 & i_17_reg_341) & ap_const_lv3_0);
    zext_ln71_2_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln71_2_cast_fu_887_p4),768));
    zext_ln71_3_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_16_reg_329),64));
    zext_ln71_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_17_reg_341),64));
end behav;
