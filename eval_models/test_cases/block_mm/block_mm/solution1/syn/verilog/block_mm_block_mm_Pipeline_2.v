// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module block_mm_block_mm_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AB_15_out,
        AB_15_out_ap_vld,
        AB_14_out,
        AB_14_out_ap_vld,
        AB_13_out,
        AB_13_out_ap_vld,
        AB_12_out,
        AB_12_out_ap_vld,
        AB_11_out,
        AB_11_out_ap_vld,
        AB_10_out,
        AB_10_out_ap_vld,
        AB_9_out,
        AB_9_out_ap_vld,
        AB_8_out,
        AB_8_out_ap_vld,
        AB_7_out,
        AB_7_out_ap_vld,
        AB_6_out,
        AB_6_out_ap_vld,
        AB_5_out,
        AB_5_out_ap_vld,
        AB_4_out,
        AB_4_out_ap_vld,
        AB_3_out,
        AB_3_out_ap_vld,
        AB_2_out,
        AB_2_out_ap_vld,
        AB_1_out,
        AB_1_out_ap_vld,
        AB_out,
        AB_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] AB_15_out;
output   AB_15_out_ap_vld;
output  [31:0] AB_14_out;
output   AB_14_out_ap_vld;
output  [31:0] AB_13_out;
output   AB_13_out_ap_vld;
output  [31:0] AB_12_out;
output   AB_12_out_ap_vld;
output  [31:0] AB_11_out;
output   AB_11_out_ap_vld;
output  [31:0] AB_10_out;
output   AB_10_out_ap_vld;
output  [31:0] AB_9_out;
output   AB_9_out_ap_vld;
output  [31:0] AB_8_out;
output   AB_8_out_ap_vld;
output  [31:0] AB_7_out;
output   AB_7_out_ap_vld;
output  [31:0] AB_6_out;
output   AB_6_out_ap_vld;
output  [31:0] AB_5_out;
output   AB_5_out_ap_vld;
output  [31:0] AB_4_out;
output   AB_4_out_ap_vld;
output  [31:0] AB_3_out;
output   AB_3_out_ap_vld;
output  [31:0] AB_2_out;
output   AB_2_out_ap_vld;
output  [31:0] AB_1_out;
output   AB_1_out_ap_vld;
output  [31:0] AB_out;
output   AB_out_ap_vld;

reg ap_idle;
reg AB_15_out_ap_vld;
reg AB_14_out_ap_vld;
reg AB_13_out_ap_vld;
reg AB_12_out_ap_vld;
reg AB_11_out_ap_vld;
reg AB_10_out_ap_vld;
reg AB_9_out_ap_vld;
reg AB_8_out_ap_vld;
reg AB_7_out_ap_vld;
reg AB_6_out_ap_vld;
reg AB_5_out_ap_vld;
reg AB_4_out_ap_vld;
reg AB_3_out_ap_vld;
reg AB_2_out_ap_vld;
reg AB_1_out_ap_vld;
reg AB_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] exitcond793_fu_254_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] empty_fu_66;
wire   [4:0] empty_17_fu_260_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_p_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

block_mm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((exitcond793_fu_254_p2 == 1'd0)) begin
            empty_fu_66 <= empty_17_fu_260_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_fu_66 <= 5'd0;
        end
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_10_out_ap_vld = 1'b1;
    end else begin
        AB_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_11_out_ap_vld = 1'b1;
    end else begin
        AB_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_12_out_ap_vld = 1'b1;
    end else begin
        AB_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_13_out_ap_vld = 1'b1;
    end else begin
        AB_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_14_out_ap_vld = 1'b1;
    end else begin
        AB_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_15_out_ap_vld = 1'b1;
    end else begin
        AB_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_1_out_ap_vld = 1'b1;
    end else begin
        AB_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_2_out_ap_vld = 1'b1;
    end else begin
        AB_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_3_out_ap_vld = 1'b1;
    end else begin
        AB_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_4_out_ap_vld = 1'b1;
    end else begin
        AB_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_5_out_ap_vld = 1'b1;
    end else begin
        AB_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_6_out_ap_vld = 1'b1;
    end else begin
        AB_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_7_out_ap_vld = 1'b1;
    end else begin
        AB_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_8_out_ap_vld = 1'b1;
    end else begin
        AB_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_9_out_ap_vld = 1'b1;
    end else begin
        AB_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_out_ap_vld = 1'b1;
    end else begin
        AB_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond793_fu_254_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_load = 5'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_66;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_10_out = 32'd0;

assign AB_11_out = 32'd0;

assign AB_12_out = 32'd0;

assign AB_13_out = 32'd0;

assign AB_14_out = 32'd0;

assign AB_15_out = 32'd0;

assign AB_1_out = 32'd0;

assign AB_2_out = 32'd0;

assign AB_3_out = 32'd0;

assign AB_4_out = 32'd0;

assign AB_5_out = 32'd0;

assign AB_6_out = 32'd0;

assign AB_7_out = 32'd0;

assign AB_8_out = 32'd0;

assign AB_9_out = 32'd0;

assign AB_out = 32'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_17_fu_260_p2 = (ap_sig_allocacmp_p_load + 5'd1);

assign exitcond793_fu_254_p2 = ((ap_sig_allocacmp_p_load == 5'd16) ? 1'b1 : 1'b0);

endmodule //block_mm_block_mm_Pipeline_2
