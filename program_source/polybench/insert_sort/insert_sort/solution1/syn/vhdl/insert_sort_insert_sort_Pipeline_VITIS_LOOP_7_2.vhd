-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity insert_sort_insert_sort_Pipeline_VITIS_LOOP_7_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln4_1 : IN STD_LOGIC_VECTOR (13 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_load : IN STD_LOGIC_VECTOR (30 downto 0);
    icmp_ln7_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    item : IN STD_LOGIC_VECTOR (31 downto 0);
    j_1_out : OUT STD_LOGIC_VECTOR (13 downto 0);
    j_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of insert_sort_insert_sort_Pipeline_VITIS_LOOP_7_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_155_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_reg_318 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln7_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_165_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln9_reg_328 : STD_LOGIC_VECTOR (14 downto 0);
    signal addr_cmp_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_3_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_3_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal reuse_select_fu_207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln7_1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_2_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_2_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln7_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_cast_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal and_ln7_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reuse_addr_reg_fu_64 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_72 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln4_1_cast_fu_133_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_171_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_189_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_219_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_1_fu_229_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln7_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component insert_sort_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U1 : component insert_sort_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        din1 => item,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_129_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_72 <= zext_ln4_1_cast_fu_133_p1;
            elsif (((ap_const_lv1_1 = and_ln7_1_fu_263_p2) and (icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_fu_72 <= add_ln9_reg_328;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reuse_addr_reg_fu_64 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_lv1_1 = and_ln7_1_fu_263_p2) and (icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reuse_addr_reg_fu_64 <= j_1_cast_cast_fu_245_p1;
            end if; 
        end if;
    end process;

    reuse_reg_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                reuse_reg_fu_68 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = and_ln7_1_fu_263_p2) and (icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reuse_reg_fu_68 <= reuse_select_reg_348;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_159_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln9_reg_328 <= add_ln9_fu_165_p2;
                addr_cmp_reg_338 <= addr_cmp_fu_183_p2;
                icmp_ln7_3_reg_343 <= icmp_ln7_3_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_reg_318 <= empty_fu_155_p1;
                icmp_ln7_reg_324 <= icmp_ln7_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln7_1_reg_359 <= icmp_ln7_1_fu_233_p2;
                icmp_ln7_2_reg_364 <= icmp_ln7_2_fu_239_p2;
                reuse_select_reg_348 <= reuse_select_fu_207_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln7_reg_324, ap_CS_fsm_state4, and_ln7_1_fu_263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_lv1_1 = and_ln7_1_fu_263_p2) and (icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln7_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln7_fu_175_p1, j_1_cast_cast_fu_245_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= j_1_cast_cast_fu_245_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= zext_ln7_fu_175_p1(14 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= reuse_select_reg_348;

    A_we0_assign_proc : process(icmp_ln7_reg_324, ap_CS_fsm_state4, and_ln7_1_fu_263_p2)
    begin
        if (((ap_const_lv1_1 = and_ln7_1_fu_263_p2) and (icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln9_fu_165_p2 <= std_logic_vector(unsigned(j_fu_72) + unsigned(ap_const_lv15_7FFF));
    addr_cmp_fu_183_p2 <= "1" when (reuse_addr_reg_fu_64 = zext_ln7_fu_175_p1) else "0";
    and_ln7_1_fu_263_p2 <= (grp_fu_129_p2 and and_ln7_fu_257_p2);
    and_ln7_fu_257_p2 <= (or_ln7_fu_249_p2 and or_ln7_1_fu_253_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_155_p1 <= j_fu_72(14 - 1 downto 0);
    grp_fu_129_p0 <= reuse_select_fu_207_p3;
    icmp_ln7_1_fu_233_p2 <= "0" when (tmp_fu_219_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_2_fu_239_p2 <= "1" when (trunc_ln7_1_fu_229_p1 = ap_const_lv23_0) else "0";
    icmp_ln7_3_fu_198_p2 <= "0" when (tmp_1_fu_189_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_fu_159_p2 <= "1" when (j_fu_72 = ap_const_lv15_0) else "0";
    j_1_cast_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_318),64));

    j_1_out_assign_proc : process(empty_reg_318, icmp_ln7_reg_324, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            j_1_out <= ap_const_lv14_0;
        elsif (((icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            j_1_out <= empty_reg_318;
        else 
            j_1_out <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    j_1_out_ap_vld_assign_proc : process(icmp_ln7_reg_324, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln7_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            j_1_out_ap_vld <= ap_const_logic_1;
        else 
            j_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln7_1_fu_253_p2 <= (icmp_ln7_4 or icmp_ln7_3_reg_343);
    or_ln7_fu_249_p2 <= (icmp_ln7_2_reg_364 or icmp_ln7_1_reg_359);
    reuse_select_fu_207_p3 <= 
        reuse_reg_fu_68 when (addr_cmp_reg_338(0) = '1') else 
        A_q0;
    tmp_1_fu_189_p4 <= A_load(30 downto 23);
    tmp_fu_219_p4 <= reuse_select_fu_207_p3(30 downto 23);
    trunc_ln7_1_fu_229_p1 <= reuse_select_fu_207_p3(23 - 1 downto 0);
    trunc_ln7_fu_171_p1 <= add_ln9_fu_165_p2(14 - 1 downto 0);
    zext_ln4_1_cast_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln4_1),15));
    zext_ln7_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln7_fu_171_p1),64));
end behav;
