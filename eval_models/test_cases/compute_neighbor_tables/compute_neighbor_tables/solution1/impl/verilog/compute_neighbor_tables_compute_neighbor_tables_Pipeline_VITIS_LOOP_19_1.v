// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_19_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_nodes,
        in_degree_table_address0,
        in_degree_table_ce0,
        in_degree_table_q0,
        neighbor_table_offsets_address0,
        neighbor_table_offsets_ce0,
        neighbor_table_offsets_we0,
        neighbor_table_offsets_d0,
        neightbor_table_offsets_temp_address0,
        neightbor_table_offsets_temp_ce0,
        neightbor_table_offsets_temp_we0,
        neightbor_table_offsets_temp_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_nodes;
output  [6:0] in_degree_table_address0;
output   in_degree_table_ce0;
input  [31:0] in_degree_table_q0;
output  [6:0] neighbor_table_offsets_address0;
output   neighbor_table_offsets_ce0;
output   neighbor_table_offsets_we0;
output  [31:0] neighbor_table_offsets_d0;
output  [6:0] neightbor_table_offsets_temp_address0;
output   neightbor_table_offsets_temp_ce0;
output   neightbor_table_offsets_temp_we0;
output  [31:0] neightbor_table_offsets_temp_d0;

reg ap_idle;
reg in_degree_table_ce0;
reg neighbor_table_offsets_ce0;
reg neighbor_table_offsets_we0;
reg neightbor_table_offsets_temp_ce0;
reg neightbor_table_offsets_temp_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [30:0] i_2_reg_199;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln21_fu_148_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln19_fu_167_p1;
reg   [30:0] i_fu_44;
wire   [30:0] add_ln19_fu_153_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_2;
reg   [31:0] csum_1_fu_48;
wire   [31:0] csum_fu_172_p2;
wire   [31:0] zext_ln19_1_fu_110_p1;
wire   [6:0] trunc_ln21_fu_120_p1;
wire   [8:0] shl_ln_fu_124_p3;
wire   [8:0] add_ln21_fu_132_p2;
wire   [6:0] lshr_ln_fu_138_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

compute_neighbor_tables_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            csum_1_fu_48 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            csum_1_fu_48 <= csum_fu_172_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_44 <= add_ln19_fu_153_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 31'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_199 <= ap_sig_allocacmp_i_2;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_114_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 31'd1;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_degree_table_ce0 = 1'b1;
    end else begin
        in_degree_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_offsets_ce0 = 1'b1;
    end else begin
        neighbor_table_offsets_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_offsets_we0 = 1'b1;
    end else begin
        neighbor_table_offsets_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neightbor_table_offsets_temp_ce0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neightbor_table_offsets_temp_we0 = 1'b1;
    end else begin
        neightbor_table_offsets_temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_153_p2 = (ap_sig_allocacmp_i_2 + 31'd1);

assign add_ln21_fu_132_p2 = ($signed(shl_ln_fu_124_p3) + $signed(9'd508));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign csum_fu_172_p2 = (in_degree_table_q0 + csum_1_fu_48);

assign icmp_ln19_fu_114_p2 = (($signed(zext_ln19_1_fu_110_p1) < $signed(num_nodes)) ? 1'b1 : 1'b0);

assign in_degree_table_address0 = zext_ln21_fu_148_p1;

assign lshr_ln_fu_138_p4 = {{add_ln21_fu_132_p2[8:2]}};

assign neighbor_table_offsets_address0 = zext_ln19_fu_167_p1;

assign neighbor_table_offsets_d0 = csum_fu_172_p2;

assign neightbor_table_offsets_temp_address0 = zext_ln19_fu_167_p1;

assign neightbor_table_offsets_temp_d0 = csum_fu_172_p2;

assign shl_ln_fu_124_p3 = {{trunc_ln21_fu_120_p1}, {2'd0}};

assign trunc_ln21_fu_120_p1 = ap_sig_allocacmp_i_2[6:0];

assign zext_ln19_1_fu_110_p1 = ap_sig_allocacmp_i_2;

assign zext_ln19_fu_167_p1 = i_2_reg_199;

assign zext_ln21_fu_148_p1 = lshr_ln_fu_138_p4;

endmodule //compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_19_1
