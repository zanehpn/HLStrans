-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_43_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nnzA : IN STD_LOGIC_VECTOR (31 downto 0);
    local_column_indices_A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_column_indices_A_ce0 : OUT STD_LOGIC;
    local_column_indices_A_we0 : OUT STD_LOGIC;
    local_column_indices_A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_column_indices_A_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_column_indices_A_3_ce0 : OUT STD_LOGIC;
    local_column_indices_A_3_we0 : OUT STD_LOGIC;
    local_column_indices_A_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_column_indices_A_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_column_indices_A_2_ce0 : OUT STD_LOGIC;
    local_column_indices_A_2_we0 : OUT STD_LOGIC;
    local_column_indices_A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_column_indices_A_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_column_indices_A_1_ce0 : OUT STD_LOGIC;
    local_column_indices_A_1_we0 : OUT STD_LOGIC;
    local_column_indices_A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_values_A_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_A_V_3_ce0 : OUT STD_LOGIC;
    local_values_A_V_3_we0 : OUT STD_LOGIC;
    local_values_A_V_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    local_values_A_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_A_V_2_ce0 : OUT STD_LOGIC;
    local_values_A_V_2_we0 : OUT STD_LOGIC;
    local_values_A_V_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    local_values_A_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_A_V_1_ce0 : OUT STD_LOGIC;
    local_values_A_V_1_we0 : OUT STD_LOGIC;
    local_values_A_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    local_values_A_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_A_V_ce0 : OUT STD_LOGIC;
    local_values_A_V_we0 : OUT STD_LOGIC;
    local_values_A_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    values_A_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    values_A_ce0 : OUT STD_LOGIC;
    values_A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    column_indices_A_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    column_indices_A_ce0 : OUT STD_LOGIC;
    column_indices_A_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_43_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln43_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lshr_ln_reg_286 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln46_fu_256_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln46_reg_296 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln43_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln46_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_68 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln43_fu_234_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln43_1_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln43_fu_228_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_68 <= add_ln43_fu_234_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_68 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_286 <= ap_sig_allocacmp_i(11 downto 2);
                trunc_ln46_reg_296 <= trunc_ln46_fu_256_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln43_fu_234_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln43_fu_228_p2)
    begin
        if (((icmp_ln43_fu_228_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_68;
        end if; 
    end process;

    column_indices_A_address0 <= zext_ln43_fu_240_p1(12 - 1 downto 0);

    column_indices_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            column_indices_A_ce0 <= ap_const_logic_1;
        else 
            column_indices_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln43_fu_228_p2 <= "1" when (signed(zext_ln43_1_fu_224_p1) < signed(nnzA)) else "0";
    local_column_indices_A_1_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_column_indices_A_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_column_indices_A_1_ce0 <= ap_const_logic_1;
        else 
            local_column_indices_A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_1_d0 <= column_indices_A_q0;

    local_column_indices_A_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_1))) then 
            local_column_indices_A_1_we0 <= ap_const_logic_1;
        else 
            local_column_indices_A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_2_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_column_indices_A_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_column_indices_A_2_ce0 <= ap_const_logic_1;
        else 
            local_column_indices_A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_2_d0 <= column_indices_A_q0;

    local_column_indices_A_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_2))) then 
            local_column_indices_A_2_we0 <= ap_const_logic_1;
        else 
            local_column_indices_A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_3_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_column_indices_A_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_column_indices_A_3_ce0 <= ap_const_logic_1;
        else 
            local_column_indices_A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_3_d0 <= column_indices_A_q0;

    local_column_indices_A_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_3))) then 
            local_column_indices_A_3_we0 <= ap_const_logic_1;
        else 
            local_column_indices_A_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_column_indices_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_column_indices_A_ce0 <= ap_const_logic_1;
        else 
            local_column_indices_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_column_indices_A_d0 <= column_indices_A_q0;

    local_column_indices_A_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_0))) then 
            local_column_indices_A_we0 <= ap_const_logic_1;
        else 
            local_column_indices_A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_1_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_values_A_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_values_A_V_1_ce0 <= ap_const_logic_1;
        else 
            local_values_A_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_1_d0 <= values_A_q0;

    local_values_A_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_1))) then 
            local_values_A_V_1_we0 <= ap_const_logic_1;
        else 
            local_values_A_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_2_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_values_A_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_values_A_V_2_ce0 <= ap_const_logic_1;
        else 
            local_values_A_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_2_d0 <= values_A_q0;

    local_values_A_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_2))) then 
            local_values_A_V_2_we0 <= ap_const_logic_1;
        else 
            local_values_A_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_3_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_values_A_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_values_A_V_3_ce0 <= ap_const_logic_1;
        else 
            local_values_A_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_3_d0 <= values_A_q0;

    local_values_A_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_3))) then 
            local_values_A_V_3_we0 <= ap_const_logic_1;
        else 
            local_values_A_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_address0 <= zext_ln46_fu_265_p1(10 - 1 downto 0);

    local_values_A_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_values_A_V_ce0 <= ap_const_logic_1;
        else 
            local_values_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_A_V_d0 <= values_A_q0;

    local_values_A_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln46_reg_296)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln46_reg_296 = ap_const_lv2_0))) then 
            local_values_A_V_we0 <= ap_const_logic_1;
        else 
            local_values_A_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln46_fu_256_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    values_A_address0 <= zext_ln43_fu_240_p1(12 - 1 downto 0);

    values_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            values_A_ce0 <= ap_const_logic_1;
        else 
            values_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln43_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),32));
    zext_ln43_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln46_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_286),64));
end behav;
