// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module latnrm_latnrm_Pipeline_VITIS_LOOP_21_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bottom_4_reload,
        top_4,
        internal_state_address0,
        internal_state_ce0,
        internal_state_we0,
        internal_state_d0,
        internal_state_q0,
        coefficient_address0,
        coefficient_ce0,
        coefficient_q0,
        coefficient_address1,
        coefficient_ce1,
        coefficient_q1,
        bottom_6_out,
        bottom_6_out_ap_vld,
        left_2_out,
        left_2_out_ap_vld,
        grp_fu_6358_p_din0,
        grp_fu_6358_p_din1,
        grp_fu_6358_p_opcode,
        grp_fu_6358_p_dout0,
        grp_fu_6358_p_ce,
        grp_fu_1102_p_din0,
        grp_fu_1102_p_din1,
        grp_fu_1102_p_dout0,
        grp_fu_1102_p_ce,
        grp_fu_1106_p_din0,
        grp_fu_1106_p_din1,
        grp_fu_1106_p_dout0,
        grp_fu_1106_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 9'd1;
parameter    ap_ST_fsm_pp0_stage1 = 9'd2;
parameter    ap_ST_fsm_pp0_stage2 = 9'd4;
parameter    ap_ST_fsm_pp0_stage3 = 9'd8;
parameter    ap_ST_fsm_pp0_stage4 = 9'd16;
parameter    ap_ST_fsm_pp0_stage5 = 9'd32;
parameter    ap_ST_fsm_pp0_stage6 = 9'd64;
parameter    ap_ST_fsm_pp0_stage7 = 9'd128;
parameter    ap_ST_fsm_pp0_stage8 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bottom_4_reload;
input  [31:0] top_4;
output  [5:0] internal_state_address0;
output   internal_state_ce0;
output   internal_state_we0;
output  [31:0] internal_state_d0;
input  [31:0] internal_state_q0;
output  [5:0] coefficient_address0;
output   coefficient_ce0;
input  [31:0] coefficient_q0;
output  [5:0] coefficient_address1;
output   coefficient_ce1;
input  [31:0] coefficient_q1;
output  [31:0] bottom_6_out;
output   bottom_6_out_ap_vld;
output  [31:0] left_2_out;
output   left_2_out_ap_vld;
output  [31:0] grp_fu_6358_p_din0;
output  [31:0] grp_fu_6358_p_din1;
output  [1:0] grp_fu_6358_p_opcode;
input  [31:0] grp_fu_6358_p_dout0;
output   grp_fu_6358_p_ce;
output  [31:0] grp_fu_1102_p_din0;
output  [31:0] grp_fu_1102_p_din1;
input  [31:0] grp_fu_1102_p_dout0;
output   grp_fu_1102_p_ce;
output  [31:0] grp_fu_1106_p_din0;
output  [31:0] grp_fu_1106_p_din1;
input  [31:0] grp_fu_1106_p_dout0;
output   grp_fu_1106_p_ce;

reg ap_idle;
reg[5:0] internal_state_address0;
reg internal_state_ce0;
reg internal_state_we0;
reg coefficient_ce0;
reg coefficient_ce1;
reg bottom_6_out_ap_vld;
reg left_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln21_reg_286;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln21_fu_162_p2;
reg   [5:0] internal_state_addr_reg_290;
reg   [31:0] top_load_6_reg_305;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] right_fu_222_p1;
reg   [31:0] right_reg_311;
wire   [31:0] bitcast_ln27_4_fu_227_p1;
reg   [31:0] bitcast_ln27_4_reg_317;
wire   [31:0] bitcast_ln27_5_fu_232_p1;
reg   [31:0] bitcast_ln27_5_reg_322;
reg   [31:0] mul_2_reg_327;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] mul12_2_reg_332;
reg   [31:0] mul17_2_reg_337;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] mul20_2_reg_342;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln21_fu_168_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln27_fu_202_p1;
reg   [31:0] top_fu_56;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [31:0] bottom_fu_60;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [5:0] j_2_fu_64;
wire   [5:0] add_ln21_fu_207_p2;
reg   [5:0] ap_sig_allocacmp_j;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] grp_fu_132_p0;
reg   [31:0] grp_fu_132_p1;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg   [31:0] grp_fu_136_p0;
reg   [31:0] grp_fu_136_p1;
reg   [31:0] grp_fu_140_p0;
reg   [31:0] grp_fu_140_p1;
wire   [4:0] trunc_ln27_fu_174_p1;
wire   [6:0] shl_ln27_2_fu_178_p3;
wire   [6:0] add_ln27_fu_186_p2;
wire   [4:0] lshr_ln27_2_fu_192_p4;
reg   [1:0] grp_fu_132_opcode;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_00001;
wire    ap_block_pp0_stage5_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

latnrm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        bottom_fu_60 <= bottom_4_reload;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bottom_fu_60 <= grp_fu_6358_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_fu_162_p2 == 1'd0))) begin
            j_2_fu_64 <= add_ln21_fu_207_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_2_fu_64 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            top_fu_56 <= top_4;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            top_fu_56 <= grp_fu_6358_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_286 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bitcast_ln27_4_reg_317 <= bitcast_ln27_4_fu_227_p1;
        bitcast_ln27_5_reg_322 <= bitcast_ln27_5_fu_232_p1;
        right_reg_311 <= right_fu_222_p1;
        top_load_6_reg_305 <= top_fu_56;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_286 <= icmp_ln21_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_162_p2 == 1'd0))) begin
        internal_state_addr_reg_290 <= zext_ln21_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_286 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul12_2_reg_332 <= grp_fu_1106_p_dout0;
        mul_2_reg_327 <= grp_fu_1102_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_286 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul17_2_reg_337 <= grp_fu_1102_p_dout0;
        mul20_2_reg_342 <= grp_fu_1106_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_286 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 6'd1;
    end else begin
        ap_sig_allocacmp_j = j_2_fu_64;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_286 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bottom_6_out_ap_vld = 1'b1;
    end else begin
        bottom_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coefficient_ce0 = 1'b1;
    end else begin
        coefficient_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coefficient_ce1 = 1'b1;
    end else begin
        coefficient_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_286 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage5_00001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_132_opcode = 2'd1;
        end else if (((1'b0 == ap_block_pp0_stage6_00001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_132_opcode = 2'd0;
        end else begin
            grp_fu_132_opcode = 'bx;
        end
    end else begin
        grp_fu_132_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_132_p0 = mul17_2_reg_337;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_132_p0 = mul_2_reg_327;
        end else begin
            grp_fu_132_p0 = 'bx;
        end
    end else begin
        grp_fu_132_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_132_p1 = mul20_2_reg_342;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_132_p1 = mul12_2_reg_332;
        end else begin
            grp_fu_132_p1 = 'bx;
        end
    end else begin
        grp_fu_132_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_136_p0 = bitcast_ln27_4_reg_317;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_136_p0 = bitcast_ln27_4_fu_227_p1;
        end else begin
            grp_fu_136_p0 = 'bx;
        end
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_136_p1 = right_reg_311;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_136_p1 = top_fu_56;
        end else begin
            grp_fu_136_p1 = 'bx;
        end
    end else begin
        grp_fu_136_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_140_p0 = bitcast_ln27_5_reg_322;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = bitcast_ln27_5_fu_232_p1;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_140_p1 = top_load_6_reg_305;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p1 = right_fu_222_p1;
        end else begin
            grp_fu_140_p1 = 'bx;
        end
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            internal_state_address0 = internal_state_addr_reg_290;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            internal_state_address0 = zext_ln21_fu_168_p1;
        end else begin
            internal_state_address0 = 'bx;
        end
    end else begin
        internal_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        internal_state_ce0 = 1'b1;
    end else begin
        internal_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_286 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        internal_state_we0 = 1'b1;
    end else begin
        internal_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_286 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        left_2_out_ap_vld = 1'b1;
    end else begin
        left_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_207_p2 = (ap_sig_allocacmp_j + 6'd1);

assign add_ln27_fu_186_p2 = ($signed(shl_ln27_2_fu_178_p3) + $signed(7'd124));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln27_4_fu_227_p1 = coefficient_q1;

assign bitcast_ln27_5_fu_232_p1 = coefficient_q0;

assign bottom_6_out = bottom_fu_60;

assign coefficient_address0 = zext_ln21_fu_168_p1;

assign coefficient_address1 = zext_ln27_fu_202_p1;

assign grp_fu_1102_p_ce = 1'b1;

assign grp_fu_1102_p_din0 = grp_fu_136_p0;

assign grp_fu_1102_p_din1 = grp_fu_136_p1;

assign grp_fu_1106_p_ce = 1'b1;

assign grp_fu_1106_p_din0 = grp_fu_140_p0;

assign grp_fu_1106_p_din1 = grp_fu_140_p1;

assign grp_fu_6358_p_ce = 1'b1;

assign grp_fu_6358_p_din0 = grp_fu_132_p0;

assign grp_fu_6358_p_din1 = grp_fu_132_p1;

assign grp_fu_6358_p_opcode = grp_fu_132_opcode;

assign icmp_ln21_fu_162_p2 = ((ap_sig_allocacmp_j == 6'd32) ? 1'b1 : 1'b0);

assign internal_state_d0 = bottom_fu_60;

assign left_2_out = top_fu_56;

assign lshr_ln27_2_fu_192_p4 = {{add_ln27_fu_186_p2[6:2]}};

assign right_fu_222_p1 = internal_state_q0;

assign shl_ln27_2_fu_178_p3 = {{trunc_ln27_fu_174_p1}, {2'd0}};

assign trunc_ln27_fu_174_p1 = ap_sig_allocacmp_j[4:0];

assign zext_ln21_fu_168_p1 = ap_sig_allocacmp_j;

assign zext_ln27_fu_202_p1 = lshr_ln27_2_fu_192_p4;

endmodule //latnrm_latnrm_Pipeline_VITIS_LOOP_21_22
