-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity viterbi_viterbi_Pipeline_L_end is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    min_p : IN STD_LOGIC_VECTOR (63 downto 0);
    llike_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    llike_ce0 : OUT STD_LOGIC;
    llike_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    min_s_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    min_s_out_ap_vld : OUT STD_LOGIC;
    grp_fu_167_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_167_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_167_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_167_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_167_p_ce : OUT STD_LOGIC );
end;


architecture behav of viterbi_viterbi_Pipeline_L_end is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv14_22C0 : STD_LOGIC_VECTOR (13 downto 0) := "10001011000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln40_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln40_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_282_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_282_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_118_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_reg_286 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln42_2_fu_124_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln42_2_reg_291 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln42_2_reg_291_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln42_2_reg_291_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln42_2_reg_291_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_reg_301 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_reg_301_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal min_p_1_load_reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_3_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_3_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_1_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal min_p_1_fu_48 : STD_LOGIC_VECTOR (63 downto 0);
    signal min_p_3_fu_229_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_min_p_1_load : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal min_s_fu_52 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_s_4_fu_238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_s_1_fu_56 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_128_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_s : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln41_fu_114_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln42_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln42_1_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_150_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_fu_160_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_fu_168_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_1_fu_178_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln42_1_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_235_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component viterbi_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component viterbi_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component viterbi_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    min_p_1_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    min_p_1_fu_48 <= min_p;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    min_p_1_fu_48 <= min_p_3_fu_229_p3;
                end if;
            end if; 
        end if;
    end process;

    min_s_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln40_fu_108_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    min_s_1_fu_56 <= add_ln40_fu_128_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    min_s_1_fu_56 <= ap_const_lv7_1;
                end if;
            end if; 
        end if;
    end process;

    min_s_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    min_s_fu_52 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    min_s_fu_52 <= min_s_4_fu_238_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_108_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln41_reg_286 <= add_ln41_fu_118_p2;
                trunc_ln42_2_reg_291 <= trunc_ln42_2_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln40_reg_282 <= icmp_ln40_fu_108_p2;
                icmp_ln40_reg_282_pp0_iter1_reg <= icmp_ln40_reg_282;
                trunc_ln42_2_reg_291_pp0_iter1_reg <= trunc_ln42_2_reg_291;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln40_reg_282_pp0_iter2_reg <= icmp_ln40_reg_282_pp0_iter1_reg;
                icmp_ln42_1_reg_319 <= icmp_ln42_1_fu_188_p2;
                icmp_ln42_2_reg_324 <= icmp_ln42_2_fu_194_p2;
                icmp_ln42_3_reg_329 <= icmp_ln42_3_fu_200_p2;
                icmp_ln42_reg_314 <= icmp_ln42_fu_182_p2;
                min_p_1_load_reg_308 <= ap_sig_allocacmp_min_p_1_load;
                p_reg_301 <= llike_q0;
                p_reg_301_pp0_iter3_reg <= p_reg_301;
                trunc_ln42_2_reg_291_pp0_iter2_reg <= trunc_ln42_2_reg_291_pp0_iter1_reg;
                trunc_ln42_2_reg_291_pp0_iter3_reg <= trunc_ln42_2_reg_291_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_fu_128_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_s) + unsigned(ap_const_lv7_1));
    add_ln41_fu_118_p2 <= std_logic_vector(unsigned(zext_ln41_fu_114_p1) + unsigned(ap_const_lv14_22C0));
    and_ln42_1_fu_223_p2 <= (or_ln42_fu_209_p2 and and_ln42_fu_217_p2);
    and_ln42_fu_217_p2 <= (or_ln42_1_fu_213_p2 and grp_fu_167_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln40_fu_108_p2)
    begin
        if (((icmp_ln40_fu_108_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_min_p_1_load_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, min_p_1_fu_48, min_p_3_fu_229_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_sig_allocacmp_min_p_1_load <= min_p_3_fu_229_p3;
        else 
            ap_sig_allocacmp_min_p_1_load <= min_p_1_fu_48;
        end if; 
    end process;


    ap_sig_allocacmp_s_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, min_s_1_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_s <= ap_const_lv7_1;
        else 
            ap_sig_allocacmp_s <= min_s_1_fu_56;
        end if; 
    end process;

    bitcast_ln42_1_fu_164_p1 <= ap_sig_allocacmp_min_p_1_load;
    bitcast_ln42_fu_147_p1 <= p_reg_301;
    grp_fu_167_p_ce <= ap_const_logic_1;
    grp_fu_167_p_din0 <= p_reg_301;
    grp_fu_167_p_din1 <= ap_sig_allocacmp_min_p_1_load;
    grp_fu_167_p_opcode <= ap_const_lv5_4;
    icmp_ln40_fu_108_p2 <= "1" when (ap_sig_allocacmp_s = ap_const_lv7_40) else "0";
    icmp_ln42_1_fu_188_p2 <= "1" when (trunc_ln42_fu_160_p1 = ap_const_lv52_0) else "0";
    icmp_ln42_2_fu_194_p2 <= "0" when (tmp_1_fu_168_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln42_3_fu_200_p2 <= "1" when (trunc_ln42_1_fu_178_p1 = ap_const_lv52_0) else "0";
    icmp_ln42_fu_182_p2 <= "0" when (tmp_fu_150_p4 = ap_const_lv11_7FF) else "1";
    llike_address0 <= zext_ln41_1_fu_139_p1(14 - 1 downto 0);

    llike_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            llike_ce0 <= ap_const_logic_1;
        else 
            llike_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    min_p_3_fu_229_p3 <= 
        p_reg_301_pp0_iter3_reg when (and_ln42_1_fu_223_p2(0) = '1') else 
        min_p_1_load_reg_308;
    min_s_4_fu_238_p3 <= 
        zext_ln42_fu_235_p1 when (and_ln42_1_fu_223_p2(0) = '1') else 
        min_s_fu_52;
    min_s_out <= min_s_fu_52;

    min_s_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln40_reg_282_pp0_iter2_reg)
    begin
        if (((icmp_ln40_reg_282_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            min_s_out_ap_vld <= ap_const_logic_1;
        else 
            min_s_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln42_1_fu_213_p2 <= (icmp_ln42_3_reg_329 or icmp_ln42_2_reg_324);
    or_ln42_fu_209_p2 <= (icmp_ln42_reg_314 or icmp_ln42_1_reg_319);
    tmp_1_fu_168_p4 <= bitcast_ln42_1_fu_164_p1(62 downto 52);
    tmp_fu_150_p4 <= bitcast_ln42_fu_147_p1(62 downto 52);
    trunc_ln42_1_fu_178_p1 <= bitcast_ln42_1_fu_164_p1(52 - 1 downto 0);
    trunc_ln42_2_fu_124_p1 <= ap_sig_allocacmp_s(6 - 1 downto 0);
    trunc_ln42_fu_160_p1 <= bitcast_ln42_fu_147_p1(52 - 1 downto 0);
    zext_ln41_1_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_286),64));
    zext_ln41_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_s),14));
    zext_ln42_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_2_reg_291_pp0_iter3_reg),8));
end behav;
