// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module block_mm_block_mm_Pipeline_writeoutput (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ABpartial_load,
        p_reload,
        add_164_reload,
        add_268_reload,
        add_372_reload,
        add_12961_reload,
        add_1_165_reload,
        add_2_169_reload,
        add_3_173_reload,
        add_23462_reload,
        add_1_266_reload,
        add_2_270_reload,
        add_3_274_reload,
        add_33963_reload,
        add_1_367_reload,
        add_2_371_reload,
        add_3_375_reload,
        p_partset4_out,
        p_partset4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] ABpartial_load;
input  [31:0] p_reload;
input  [31:0] add_164_reload;
input  [31:0] add_268_reload;
input  [31:0] add_372_reload;
input  [31:0] add_12961_reload;
input  [31:0] add_1_165_reload;
input  [31:0] add_2_169_reload;
input  [31:0] add_3_173_reload;
input  [31:0] add_23462_reload;
input  [31:0] add_1_266_reload;
input  [31:0] add_2_270_reload;
input  [31:0] add_3_274_reload;
input  [31:0] add_33963_reload;
input  [31:0] add_1_367_reload;
input  [31:0] add_2_371_reload;
input  [31:0] add_3_375_reload;
output  [511:0] p_partset4_out;
output   p_partset4_out_ap_vld;

reg ap_idle;
reg p_partset4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_222_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] tmp_5_fu_238_p6;
reg   [31:0] tmp_5_reg_537;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] shl_ln_fu_252_p3;
reg   [8:0] shl_ln_reg_542;
wire   [415:0] zext_ln57_fu_260_p1;
reg   [415:0] zext_ln57_reg_549;
wire  signed [416:0] xor_ln57_fu_274_p2;
reg  signed [416:0] xor_ln57_reg_554;
wire   [31:0] tmp_6_fu_280_p6;
reg   [31:0] tmp_6_reg_560;
wire   [31:0] tmp_7_fu_294_p6;
reg   [31:0] tmp_7_reg_565;
wire   [31:0] tmp_8_fu_308_p6;
reg   [31:0] tmp_8_reg_570;
reg   [2:0] i_fu_92;
wire   [2:0] add_ln54_fu_228_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0;
reg   [511:0] p_partset4_fu_96;
wire   [511:0] or_ln57_6_fu_504_p2;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln57_fu_234_p1;
wire   [415:0] shl_ln57_fu_264_p2;
wire   [416:0] zext_ln57_1_fu_270_p1;
wire   [415:0] zext_ln57_8_fu_330_p1;
wire  signed [511:0] sext_ln57_fu_338_p1;
wire   [415:0] trunc_ln57_2_fu_344_p1;
wire   [415:0] trunc_ln57_1_fu_341_p1;
wire   [415:0] and_ln57_4_fu_354_p2;
wire   [415:0] shl_ln57_1_fu_333_p2;
wire   [511:0] and_ln57_fu_348_p2;
wire   [95:0] tmp_2_fu_366_p4;
wire   [415:0] or_ln57_fu_360_p2;
wire   [8:0] or_ln57_1_fu_384_p2;
wire   [511:0] zext_ln57_2_fu_389_p1;
wire   [511:0] zext_ln57_3_fu_399_p1;
wire   [511:0] shl_ln57_2_fu_393_p2;
wire   [511:0] or_ln_fu_376_p3;
wire   [511:0] xor_ln57_1_fu_408_p2;
wire   [511:0] and_ln57_1_fu_414_p2;
wire   [511:0] shl_ln57_3_fu_402_p2;
wire   [8:0] or_ln57_3_fu_426_p2;
wire   [511:0] zext_ln57_4_fu_431_p1;
wire   [511:0] zext_ln57_5_fu_441_p1;
wire   [511:0] shl_ln57_4_fu_435_p2;
wire   [511:0] or_ln57_2_fu_420_p2;
wire   [511:0] xor_ln57_2_fu_450_p2;
wire   [511:0] and_ln57_2_fu_456_p2;
wire   [511:0] shl_ln57_5_fu_444_p2;
wire   [8:0] or_ln57_5_fu_468_p2;
wire   [511:0] zext_ln57_6_fu_473_p1;
wire   [511:0] zext_ln57_7_fu_483_p1;
wire   [511:0] shl_ln57_6_fu_477_p2;
wire   [511:0] or_ln57_4_fu_462_p2;
wire   [511:0] xor_ln57_3_fu_492_p2;
wire   [511:0] and_ln57_3_fu_498_p2;
wire   [511:0] shl_ln57_7_fu_486_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

block_mm_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U76(
    .din0(p_reload),
    .din1(add_164_reload),
    .din2(add_268_reload),
    .din3(add_372_reload),
    .din4(trunc_ln57_fu_234_p1),
    .dout(tmp_5_fu_238_p6)
);

block_mm_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U77(
    .din0(add_12961_reload),
    .din1(add_1_165_reload),
    .din2(add_2_169_reload),
    .din3(add_3_173_reload),
    .din4(trunc_ln57_fu_234_p1),
    .dout(tmp_6_fu_280_p6)
);

block_mm_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U78(
    .din0(add_23462_reload),
    .din1(add_1_266_reload),
    .din2(add_2_270_reload),
    .din3(add_3_274_reload),
    .din4(trunc_ln57_fu_234_p1),
    .dout(tmp_7_fu_294_p6)
);

block_mm_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U79(
    .din0(add_33963_reload),
    .din1(add_1_367_reload),
    .din2(add_2_371_reload),
    .din3(add_3_375_reload),
    .din4(trunc_ln57_fu_234_p1),
    .dout(tmp_8_fu_308_p6)
);

block_mm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln54_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_92 <= add_ln54_fu_228_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_partset4_fu_96 <= ABpartial_load;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_partset4_fu_96 <= or_ln57_6_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_222_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shl_ln_reg_542[8 : 7] <= shl_ln_fu_252_p3[8 : 7];
        tmp_5_reg_537 <= tmp_5_fu_238_p6;
        tmp_6_reg_560 <= tmp_6_fu_280_p6;
        tmp_7_reg_565 <= tmp_7_fu_294_p6;
        tmp_8_reg_570 <= tmp_8_fu_308_p6;
        xor_ln57_reg_554 <= xor_ln57_fu_274_p2;
        zext_ln57_reg_549[8 : 7] <= zext_ln57_fu_260_p1[8 : 7];
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_222_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_92;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_222_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_partset4_out_ap_vld = 1'b1;
    end else begin
        p_partset4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_228_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign and_ln57_1_fu_414_p2 = (xor_ln57_1_fu_408_p2 & or_ln_fu_376_p3);

assign and_ln57_2_fu_456_p2 = (xor_ln57_2_fu_450_p2 & or_ln57_2_fu_420_p2);

assign and_ln57_3_fu_498_p2 = (xor_ln57_3_fu_492_p2 & or_ln57_4_fu_462_p2);

assign and_ln57_4_fu_354_p2 = (trunc_ln57_2_fu_344_p1 & trunc_ln57_1_fu_341_p1);

assign and_ln57_fu_348_p2 = (sext_ln57_fu_338_p1 & p_partset4_fu_96);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln54_fu_222_p2 = ((ap_sig_allocacmp_i_1 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln57_1_fu_384_p2 = (shl_ln_reg_542 | 9'd32);

assign or_ln57_2_fu_420_p2 = (shl_ln57_3_fu_402_p2 | and_ln57_1_fu_414_p2);

assign or_ln57_3_fu_426_p2 = (shl_ln_reg_542 | 9'd64);

assign or_ln57_4_fu_462_p2 = (shl_ln57_5_fu_444_p2 | and_ln57_2_fu_456_p2);

assign or_ln57_5_fu_468_p2 = (shl_ln_reg_542 | 9'd96);

assign or_ln57_6_fu_504_p2 = (shl_ln57_7_fu_486_p2 | and_ln57_3_fu_498_p2);

assign or_ln57_fu_360_p2 = (shl_ln57_1_fu_333_p2 | and_ln57_4_fu_354_p2);

assign or_ln_fu_376_p3 = {{tmp_2_fu_366_p4}, {or_ln57_fu_360_p2}};

assign p_partset4_out = p_partset4_fu_96;

assign sext_ln57_fu_338_p1 = xor_ln57_reg_554;

assign shl_ln57_1_fu_333_p2 = zext_ln57_8_fu_330_p1 << zext_ln57_reg_549;

assign shl_ln57_2_fu_393_p2 = 512'd4294967295 << zext_ln57_2_fu_389_p1;

assign shl_ln57_3_fu_402_p2 = zext_ln57_3_fu_399_p1 << zext_ln57_2_fu_389_p1;

assign shl_ln57_4_fu_435_p2 = 512'd4294967295 << zext_ln57_4_fu_431_p1;

assign shl_ln57_5_fu_444_p2 = zext_ln57_5_fu_441_p1 << zext_ln57_4_fu_431_p1;

assign shl_ln57_6_fu_477_p2 = 512'd4294967295 << zext_ln57_6_fu_473_p1;

assign shl_ln57_7_fu_486_p2 = zext_ln57_7_fu_483_p1 << zext_ln57_6_fu_473_p1;

assign shl_ln57_fu_264_p2 = 416'd4294967295 << zext_ln57_fu_260_p1;

assign shl_ln_fu_252_p3 = {{trunc_ln57_fu_234_p1}, {7'd0}};

assign tmp_2_fu_366_p4 = {{and_ln57_fu_348_p2[511:416]}};

assign trunc_ln57_1_fu_341_p1 = xor_ln57_reg_554[415:0];

assign trunc_ln57_2_fu_344_p1 = p_partset4_fu_96[415:0];

assign trunc_ln57_fu_234_p1 = ap_sig_allocacmp_i_1[1:0];

assign xor_ln57_1_fu_408_p2 = (shl_ln57_2_fu_393_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln57_2_fu_450_p2 = (shl_ln57_4_fu_435_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln57_3_fu_492_p2 = (shl_ln57_6_fu_477_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln57_fu_274_p2 = (zext_ln57_1_fu_270_p1 ^ 417'd338460656020607282663380637712778772392143197677711984273740183180495765112991409062496875745134225841966700556811959451779071);

assign zext_ln57_1_fu_270_p1 = shl_ln57_fu_264_p2;

assign zext_ln57_2_fu_389_p1 = or_ln57_1_fu_384_p2;

assign zext_ln57_3_fu_399_p1 = tmp_6_reg_560;

assign zext_ln57_4_fu_431_p1 = or_ln57_3_fu_426_p2;

assign zext_ln57_5_fu_441_p1 = tmp_7_reg_565;

assign zext_ln57_6_fu_473_p1 = or_ln57_5_fu_468_p2;

assign zext_ln57_7_fu_483_p1 = tmp_8_reg_570;

assign zext_ln57_8_fu_330_p1 = tmp_5_reg_537;

assign zext_ln57_fu_260_p1 = shl_ln_fu_252_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_542[6:0] <= 7'b0000000;
    zext_ln57_reg_549[6:0] <= 7'b0000000;
    zext_ln57_reg_549[415:9] <= 407'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //block_mm_block_mm_Pipeline_writeoutput
