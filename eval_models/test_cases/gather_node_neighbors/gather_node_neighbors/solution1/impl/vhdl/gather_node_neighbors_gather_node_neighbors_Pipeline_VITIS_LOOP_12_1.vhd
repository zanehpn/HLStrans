-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_12_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node_in_degree : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce1 : OUT STD_LOGIC;
    neighbor_table_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_neighbors_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    node_neighbors_ce0 : OUT STD_LOGIC;
    node_neighbors_we0 : OUT STD_LOGIC;
    node_neighbors_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_neighbors_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    node_neighbors_ce1 : OUT STD_LOGIC;
    node_neighbors_we1 : OUT STD_LOGIC;
    node_neighbors_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_12_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln12_3_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_2_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_1_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_369 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln12_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln14_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln14_reg_380 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln12_1_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_2_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_2_fu_244_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln12_2_reg_404 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln12_3_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal lshr_ln15_1_reg_418 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln15_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln15_1_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast3_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln15_2_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_3_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_5_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_4_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_2_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln12_fu_338_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_1_fu_184_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln12_fu_195_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln12_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln14_fu_211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_2_fu_217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln12_1_fu_228_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln12_1_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_3_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_264_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln15_fu_271_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_fu_277_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln14_1_fu_292_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_3_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_fu_307_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln14_2_fu_323_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_4_fu_328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gather_node_neighbors_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gather_node_neighbors_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_62 <= ap_const_lv11_0;
            elsif (((icmp_ln12_reg_376 = ap_const_lv1_1) and (icmp_ln12_1_reg_391 = ap_const_lv1_1) and (icmp_ln12_2_reg_400 = ap_const_lv1_1) and (icmp_ln12_3_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_62 <= add_ln12_fu_338_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_369 <= ap_sig_allocacmp_i_1;
                icmp_ln12_reg_376 <= icmp_ln12_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_174_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_1_reg_391 <= icmp_ln12_1_fu_205_p2;
                trunc_ln14_reg_380 <= trunc_ln14_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_1_fu_205_p2 = ap_const_lv1_1) and (icmp_ln12_fu_174_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_2_reg_400 <= icmp_ln12_2_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_1_fu_205_p2 = ap_const_lv1_1) and (icmp_ln12_fu_174_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln12_2_fu_238_p2 = ap_const_lv1_1))) then
                icmp_ln12_3_reg_409 <= icmp_ln12_3_fu_254_p2;
                    or_ln12_2_reg_404(10 downto 2) <= or_ln12_2_fu_244_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_376 = ap_const_lv1_1) and (icmp_ln12_1_reg_391 = ap_const_lv1_1) and (icmp_ln12_2_reg_400 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                lshr_ln15_1_reg_418 <= add_ln15_fu_307_p2(12 downto 2);
            end if;
        end if;
    end process;
    or_ln12_2_reg_404(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln12_fu_338_p2 <= std_logic_vector(unsigned(i_1_reg_369) + unsigned(ap_const_lv11_4));
    add_ln15_1_fu_184_p2 <= std_logic_vector(unsigned(trunc_ln14_fu_180_p1) + unsigned(trunc_ln));
    add_ln15_2_fu_217_p2 <= std_logic_vector(unsigned(or_ln14_fu_211_p2) + unsigned(trunc_ln));
    add_ln15_3_fu_297_p2 <= std_logic_vector(unsigned(or_ln14_1_fu_292_p2) + unsigned(trunc_ln));
    add_ln15_4_fu_328_p2 <= std_logic_vector(unsigned(or_ln14_2_fu_323_p2) + unsigned(trunc_ln));
    add_ln15_fu_307_p2 <= std_logic_vector(unsigned(or_ln15_fu_271_p2) + unsigned(ap_const_lv13_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln12_3_reg_409, icmp_ln12_2_reg_400, icmp_ln12_1_reg_391, icmp_ln12_reg_376)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln12_reg_376 = ap_const_lv1_0) or ((icmp_ln12_1_reg_391 = ap_const_lv1_0) or ((icmp_ln12_2_reg_400 = ap_const_lv1_0) or (icmp_ln12_3_reg_409 = ap_const_lv1_0)))))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln12_3_reg_409, icmp_ln12_2_reg_400, icmp_ln12_1_reg_391, icmp_ln12_reg_376, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln12_reg_376 = ap_const_lv1_0) or ((icmp_ln12_1_reg_391 = ap_const_lv1_0) or ((icmp_ln12_2_reg_400 = ap_const_lv1_0) or (icmp_ln12_3_reg_409 = ap_const_lv1_0)))))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_62;
        end if; 
    end process;

    i_cast3_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_369),64));
    i_cast_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    icmp_ln12_1_fu_205_p2 <= "1" when (signed(zext_ln12_fu_201_p1) < signed(node_in_degree)) else "0";
    icmp_ln12_2_fu_238_p2 <= "1" when (signed(zext_ln12_1_fu_234_p1) < signed(node_in_degree)) else "0";
    icmp_ln12_3_fu_254_p2 <= "1" when (signed(zext_ln12_3_fu_250_p1) < signed(node_in_degree)) else "0";
    icmp_ln12_fu_174_p2 <= "1" when (signed(i_cast_fu_170_p1) < signed(node_in_degree)) else "0";
    lshr_ln_fu_277_p4 <= or_ln15_fu_271_p2(12 downto 2);

    neighbor_table_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln15_1_fu_223_p1, ap_block_pp0_stage1, zext_ln15_5_fu_333_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                neighbor_table_address0 <= zext_ln15_5_fu_333_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                neighbor_table_address0 <= zext_ln15_1_fu_223_p1(10 - 1 downto 0);
            else 
                neighbor_table_address0 <= "XXXXXXXXXX";
            end if;
        else 
            neighbor_table_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    neighbor_table_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln15_fu_190_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln15_3_fu_302_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                neighbor_table_address1 <= zext_ln15_3_fu_302_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                neighbor_table_address1 <= zext_ln15_fu_190_p1(10 - 1 downto 0);
            else 
                neighbor_table_address1 <= "XXXXXXXXXX";
            end if;
        else 
            neighbor_table_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    neighbor_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            neighbor_table_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    neighbor_table_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            neighbor_table_ce1 <= ap_const_logic_1;
        else 
            neighbor_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_neighbors_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln15_2_fu_287_p1, zext_ln12_2_fu_352_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_neighbors_address0 <= zext_ln12_2_fu_352_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            node_neighbors_address0 <= zext_ln15_2_fu_287_p1(11 - 1 downto 0);
        else 
            node_neighbors_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    node_neighbors_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, i_cast3_fu_260_p1, ap_block_pp0_stage1, zext_ln15_4_fu_348_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            node_neighbors_address1 <= zext_ln15_4_fu_348_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            node_neighbors_address1 <= i_cast3_fu_260_p1(11 - 1 downto 0);
        else 
            node_neighbors_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    node_neighbors_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            node_neighbors_ce0 <= ap_const_logic_1;
        else 
            node_neighbors_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_neighbors_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            node_neighbors_ce1 <= ap_const_logic_1;
        else 
            node_neighbors_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    node_neighbors_d0 <= neighbor_table_q0;
    node_neighbors_d1 <= neighbor_table_q1;

    node_neighbors_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln12_3_reg_409, icmp_ln12_2_reg_400, icmp_ln12_1_reg_391, icmp_ln12_reg_376, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((icmp_ln12_reg_376 = ap_const_lv1_1) and (icmp_ln12_1_reg_391 = ap_const_lv1_1) and (icmp_ln12_2_reg_400 = ap_const_lv1_1) and (icmp_ln12_3_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln12_reg_376 = ap_const_lv1_1) and (icmp_ln12_1_reg_391 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            node_neighbors_we0 <= ap_const_logic_1;
        else 
            node_neighbors_we0 <= ap_const_logic_0;
        end if; 
    end process;


    node_neighbors_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln12_2_reg_400, icmp_ln12_1_reg_391, icmp_ln12_reg_376, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((icmp_ln12_reg_376 = ap_const_lv1_1) and (icmp_ln12_1_reg_391 = ap_const_lv1_1) and (icmp_ln12_2_reg_400 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln12_reg_376 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            node_neighbors_we1 <= ap_const_logic_1;
        else 
            node_neighbors_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln12_1_fu_228_p2 <= (ap_sig_allocacmp_i_1 or ap_const_lv11_2);
    or_ln12_2_fu_244_p2 <= (ap_sig_allocacmp_i_1 or ap_const_lv11_3);
    or_ln12_fu_195_p2 <= (ap_sig_allocacmp_i_1 or ap_const_lv11_1);
    or_ln14_1_fu_292_p2 <= (trunc_ln14_reg_380 or ap_const_lv10_2);
    or_ln14_2_fu_323_p2 <= (trunc_ln14_reg_380 or ap_const_lv10_3);
    or_ln14_fu_211_p2 <= (trunc_ln14_fu_180_p1 or ap_const_lv10_1);
    or_ln15_fu_271_p2 <= (shl_ln_fu_264_p3 or ap_const_lv13_4);
    shl_ln_fu_264_p3 <= (i_1_reg_369 & ap_const_lv2_0);
    trunc_ln14_fu_180_p1 <= ap_sig_allocacmp_i_1(10 - 1 downto 0);
    zext_ln12_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_1_fu_228_p2),32));
    zext_ln12_2_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_2_reg_404),64));
    zext_ln12_3_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_2_fu_244_p2),32));
    zext_ln12_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln12_fu_195_p2),32));
    zext_ln15_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_2_fu_217_p2),64));
    zext_ln15_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_277_p4),64));
    zext_ln15_3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_fu_297_p2),64));
    zext_ln15_4_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln15_1_reg_418),64));
    zext_ln15_5_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_fu_328_p2),64));
    zext_ln15_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_1_fu_184_p2),64));
end behav;
