// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module svm_svm_Pipeline_VITIS_LOOP_22_23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln22,
        test_vector_0_address0,
        test_vector_0_ce0,
        test_vector_0_q0,
        test_vector_1_address0,
        test_vector_1_ce0,
        test_vector_1_q0,
        test_vector_2_address0,
        test_vector_2_ce0,
        test_vector_2_q0,
        test_vector_3_address0,
        test_vector_3_ce0,
        test_vector_3_q0,
        norma_6_out,
        norma_6_out_ap_vld,
        grp_fu_250_p_din0,
        grp_fu_250_p_din1,
        grp_fu_250_p_opcode,
        grp_fu_250_p_dout0,
        grp_fu_250_p_ce,
        grp_fu_1054_p_din0,
        grp_fu_1054_p_din1,
        grp_fu_1054_p_opcode,
        grp_fu_1054_p_dout0,
        grp_fu_1054_p_ce,
        grp_fu_1058_p_din0,
        grp_fu_1058_p_din1,
        grp_fu_1058_p_dout0,
        grp_fu_1058_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] zext_ln22;
output  [2:0] test_vector_0_address0;
output   test_vector_0_ce0;
input  [31:0] test_vector_0_q0;
output  [2:0] test_vector_1_address0;
output   test_vector_1_ce0;
input  [31:0] test_vector_1_q0;
output  [2:0] test_vector_2_address0;
output   test_vector_2_ce0;
input  [31:0] test_vector_2_q0;
output  [2:0] test_vector_3_address0;
output   test_vector_3_ce0;
input  [31:0] test_vector_3_q0;
output  [31:0] norma_6_out;
output   norma_6_out_ap_vld;
output  [31:0] grp_fu_250_p_din0;
output  [31:0] grp_fu_250_p_din1;
output  [0:0] grp_fu_250_p_opcode;
input  [31:0] grp_fu_250_p_dout0;
output   grp_fu_250_p_ce;
output  [31:0] grp_fu_1054_p_din0;
output  [31:0] grp_fu_1054_p_din1;
output  [1:0] grp_fu_1054_p_opcode;
input  [31:0] grp_fu_1054_p_dout0;
output   grp_fu_1054_p_ce;
output  [31:0] grp_fu_1058_p_din0;
output  [31:0] grp_fu_1058_p_din1;
input  [31:0] grp_fu_1058_p_dout0;
output   grp_fu_1058_p_ce;

reg ap_idle;
reg test_vector_0_ce0;
reg test_vector_1_ce0;
reg test_vector_2_ce0;
reg test_vector_3_ce0;
reg norma_6_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_state12_pp0_stage2_iter3;
wire    ap_block_state15_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln22_reg_314;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [12:0] p_ZL11sup_vectors_3_address0;
reg    p_ZL11sup_vectors_3_ce0;
wire   [31:0] p_ZL11sup_vectors_3_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln22_fu_186_p2;
reg   [0:0] icmp_ln22_reg_314_pp0_iter1_reg;
reg   [0:0] icmp_ln22_reg_314_pp0_iter2_reg;
reg   [0:0] icmp_ln22_reg_314_pp0_iter3_reg;
wire   [1:0] trunc_ln25_fu_218_p1;
reg   [1:0] trunc_ln25_reg_323;
wire   [31:0] tmp_8_fu_266_p6;
reg   [31:0] tmp_8_reg_348;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_state14_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] p_ZL11sup_vectors_3_load_reg_353;
reg   [31:0] diff_reg_358;
reg   [31:0] diff_1_reg_364;
wire    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln25_fu_213_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln25_1_fu_232_p1;
reg   [12:0] phi_mul5_fu_62;
wire   [12:0] add_ln25_fu_201_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_phi_mul5_load;
reg   [31:0] norma_fu_66;
reg   [31:0] ap_sig_allocacmp_norma_load_1;
wire    ap_block_pp0_stage2;
reg   [4:0] j_fu_70;
wire   [4:0] add_ln22_fu_192_p2;
reg   [4:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage1;
wire   [12:0] zext_ln22_cast_fu_164_p1;
wire   [12:0] add_ln25_1_fu_207_p2;
wire   [2:0] lshr_ln25_4_fu_222_p4;
wire   [31:0] tmp_8_fu_266_p1;
wire   [31:0] tmp_8_fu_266_p2;
wire   [31:0] tmp_8_fu_266_p3;
wire   [31:0] tmp_8_fu_266_p4;
wire    ap_block_pp0_stage2_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

svm_svm_Pipeline_VITIS_LOOP_22_23_p_ZL11sup_vectors_3_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 5616 ),
    .AddressWidth( 13 ))
p_ZL11sup_vectors_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL11sup_vectors_3_address0),
    .ce0(p_ZL11sup_vectors_3_ce0),
    .q0(p_ZL11sup_vectors_3_q0)
);

svm_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U38(
    .din0(tmp_8_fu_266_p1),
    .din1(tmp_8_fu_266_p2),
    .din2(tmp_8_fu_266_p3),
    .din3(tmp_8_fu_266_p4),
    .din4(trunc_ln25_reg_323),
    .dout(tmp_8_fu_266_p6)
);

svm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln22_fu_186_p2 == 1'd0))) begin
            j_fu_70 <= add_ln22_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        norma_fu_66 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        norma_fu_66 <= grp_fu_1054_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln22_fu_186_p2 == 1'd0))) begin
            phi_mul5_fu_62 <= add_ln25_fu_201_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul5_fu_62 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        diff_1_reg_364 <= grp_fu_1058_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        diff_reg_358 <= grp_fu_250_p_dout0;
        icmp_ln22_reg_314 <= icmp_ln22_fu_186_p2;
        icmp_ln22_reg_314_pp0_iter1_reg <= icmp_ln22_reg_314;
        icmp_ln22_reg_314_pp0_iter2_reg <= icmp_ln22_reg_314_pp0_iter1_reg;
        icmp_ln22_reg_314_pp0_iter3_reg <= icmp_ln22_reg_314_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_314 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_ZL11sup_vectors_3_load_reg_353 <= p_ZL11sup_vectors_3_q0;
        tmp_8_reg_348 <= tmp_8_fu_266_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_fu_186_p2 == 1'd0))) begin
        trunc_ln25_reg_323 <= trunc_ln25_fu_218_p1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_314 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_norma_load_1 = grp_fu_1054_p_dout0;
    end else begin
        ap_sig_allocacmp_norma_load_1 = norma_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_mul5_load = 13'd0;
    end else begin
        ap_sig_allocacmp_phi_mul5_load = phi_mul5_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln22_reg_314_pp0_iter3_reg == 1'd1))) begin
        norma_6_out_ap_vld = 1'b1;
    end else begin
        norma_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL11sup_vectors_3_ce0 = 1'b1;
    end else begin
        p_ZL11sup_vectors_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_vector_0_ce0 = 1'b1;
    end else begin
        test_vector_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_vector_1_ce0 = 1'b1;
    end else begin
        test_vector_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_vector_2_ce0 = 1'b1;
    end else begin
        test_vector_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        test_vector_3_ce0 = 1'b1;
    end else begin
        test_vector_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_192_p2 = (ap_sig_allocacmp_j_1 + 5'd1);

assign add_ln25_1_fu_207_p2 = (ap_sig_allocacmp_phi_mul5_load + zext_ln22_cast_fu_164_p1);

assign add_ln25_fu_201_p2 = (ap_sig_allocacmp_phi_mul5_load + 13'd312);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign grp_fu_1054_p_ce = 1'b1;

assign grp_fu_1054_p_din0 = ap_sig_allocacmp_norma_load_1;

assign grp_fu_1054_p_din1 = diff_1_reg_364;

assign grp_fu_1054_p_opcode = 2'd0;

assign grp_fu_1058_p_ce = 1'b1;

assign grp_fu_1058_p_din0 = diff_reg_358;

assign grp_fu_1058_p_din1 = diff_reg_358;

assign grp_fu_250_p_ce = 1'b1;

assign grp_fu_250_p_din0 = tmp_8_reg_348;

assign grp_fu_250_p_din1 = p_ZL11sup_vectors_3_load_reg_353;

assign grp_fu_250_p_opcode = 2'd1;

assign icmp_ln22_fu_186_p2 = ((ap_sig_allocacmp_j_1 == 5'd18) ? 1'b1 : 1'b0);

assign lshr_ln25_4_fu_222_p4 = {{ap_sig_allocacmp_j_1[4:2]}};

assign norma_6_out = norma_fu_66;

assign p_ZL11sup_vectors_3_address0 = zext_ln25_fu_213_p1;

assign test_vector_0_address0 = zext_ln25_1_fu_232_p1;

assign test_vector_1_address0 = zext_ln25_1_fu_232_p1;

assign test_vector_2_address0 = zext_ln25_1_fu_232_p1;

assign test_vector_3_address0 = zext_ln25_1_fu_232_p1;

assign tmp_8_fu_266_p1 = test_vector_0_q0;

assign tmp_8_fu_266_p2 = test_vector_1_q0;

assign tmp_8_fu_266_p3 = test_vector_2_q0;

assign tmp_8_fu_266_p4 = test_vector_3_q0;

assign trunc_ln25_fu_218_p1 = ap_sig_allocacmp_j_1[1:0];

assign zext_ln22_cast_fu_164_p1 = zext_ln22;

assign zext_ln25_1_fu_232_p1 = lshr_ln25_4_fu_222_p4;

assign zext_ln25_fu_213_p1 = add_ln25_1_fu_207_p2;

endmodule //svm_svm_Pipeline_VITIS_LOOP_22_23
