-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bfs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nodes_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    nodes_ce0 : OUT STD_LOGIC;
    nodes_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    edges_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    edges_ce0 : OUT STD_LOGIC;
    edges_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    starting_node : IN STD_LOGIC_VECTOR (63 downto 0);
    level_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_ce0 : OUT STD_LOGIC;
    level_we0 : OUT STD_LOGIC;
    level_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    level_counts_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    level_counts_ce0 : OUT STD_LOGIC;
    level_counts_we0 : OUT STD_LOGIC;
    level_counts_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    level_counts_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of bfs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bfs_bfs,hls_ip_2022_2_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.575000,HLS_SYN_LAT=61569,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=349,HLS_SYN_LUT=823,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln32_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal queue_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_334 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal e_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_reg_344 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_end_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal queue_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal queue_ce0 : STD_LOGIC;
    signal queue_we0 : STD_LOGIC;
    signal queue_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_ap_done : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_ap_idle : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_ap_ready : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_ce0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_we0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_edges_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_edges_ce0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_ce0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_we0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_queue_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_queue_ce0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_queue_we0 : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_queue_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_q_in_2_out_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_q_in_2_out_o_ap_vld : STD_LOGIC;
    signal grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal q_in_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_out_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_out_1_fu_235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal dummy_fu_76 : STD_LOGIC_VECTOR (8 downto 0);
    signal dummy_2_fu_198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln14_fu_169_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_1_fu_215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln33_fu_225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln33_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_3_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bfs_bfs_Pipeline_loop_neighbors IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        e : IN STD_LOGIC_VECTOR (63 downto 0);
        level_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        level_ce0 : OUT STD_LOGIC;
        level_we0 : OUT STD_LOGIC;
        level_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        level_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln18 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_end : IN STD_LOGIC_VECTOR (63 downto 0);
        edges_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        edges_ce0 : OUT STD_LOGIC;
        edges_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        level_counts_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        level_counts_ce0 : OUT STD_LOGIC;
        level_counts_we0 : OUT STD_LOGIC;
        level_counts_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        level_counts_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        queue_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        queue_ce0 : OUT STD_LOGIC;
        queue_we0 : OUT STD_LOGIC;
        queue_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        q_in_2_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
        q_in_2_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        q_in_2_out_o_ap_vld : OUT STD_LOGIC );
    end component;


    component bfs_queue_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    queue_U : component bfs_queue_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_address0,
        ce0 => queue_ce0,
        we0 => queue_we0,
        d0 => queue_d0,
        q0 => queue_q0);

    grp_bfs_Pipeline_loop_neighbors_fu_154 : component bfs_bfs_Pipeline_loop_neighbors
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start,
        ap_done => grp_bfs_Pipeline_loop_neighbors_fu_154_ap_done,
        ap_idle => grp_bfs_Pipeline_loop_neighbors_fu_154_ap_idle,
        ap_ready => grp_bfs_Pipeline_loop_neighbors_fu_154_ap_ready,
        e => e_reg_344,
        level_address0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_address0,
        level_ce0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_ce0,
        level_we0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_we0,
        level_d0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_d0,
        level_q0 => level_q0,
        zext_ln18 => n_reg_334,
        tmp_end => tmp_end_reg_349,
        edges_address0 => grp_bfs_Pipeline_loop_neighbors_fu_154_edges_address0,
        edges_ce0 => grp_bfs_Pipeline_loop_neighbors_fu_154_edges_ce0,
        edges_q0 => edges_q0,
        level_counts_address0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_address0,
        level_counts_ce0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_ce0,
        level_counts_we0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_we0,
        level_counts_d0 => grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_d0,
        level_counts_q0 => level_counts_q0,
        queue_address0 => grp_bfs_Pipeline_loop_neighbors_fu_154_queue_address0,
        queue_ce0 => grp_bfs_Pipeline_loop_neighbors_fu_154_queue_ce0,
        queue_we0 => grp_bfs_Pipeline_loop_neighbors_fu_154_queue_we0,
        queue_d0 => grp_bfs_Pipeline_loop_neighbors_fu_154_queue_d0,
        q_in_2_out_i => q_in_fu_68,
        q_in_2_out_o => grp_bfs_Pipeline_loop_neighbors_fu_154_q_in_2_out_o,
        q_in_2_out_o_ap_vld => grp_bfs_Pipeline_loop_neighbors_fu_154_q_in_2_out_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bfs_Pipeline_loop_neighbors_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dummy_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                dummy_fu_76 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln33_fu_219_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln33_fu_253_p2) and (icmp_ln32_fu_192_p2 = ap_const_lv1_0)) or ((icmp_ln33_1_fu_259_p2 = ap_const_lv1_0) and (icmp_ln33_fu_219_p2 = ap_const_lv1_1) and (icmp_ln32_fu_192_p2 = ap_const_lv1_0))))) then 
                dummy_fu_76 <= dummy_2_fu_198_p2;
            end if; 
        end if;
    end process;

    q_in_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                q_in_fu_68 <= ap_const_lv64_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_bfs_Pipeline_loop_neighbors_fu_154_q_in_2_out_o_ap_vld = ap_const_logic_1))) then 
                q_in_fu_68 <= grp_bfs_Pipeline_loop_neighbors_fu_154_q_in_2_out_o;
            end if; 
        end if;
    end process;

    q_out_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                q_out_fu_72 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln33_fu_219_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln33_fu_253_p2) and (icmp_ln32_fu_192_p2 = ap_const_lv1_0)) or ((icmp_ln33_1_fu_259_p2 = ap_const_lv1_0) and (icmp_ln33_fu_219_p2 = ap_const_lv1_1) and (icmp_ln32_fu_192_p2 = ap_const_lv1_0))))) then 
                q_out_fu_72 <= q_out_1_fu_235_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                e_reg_344 <= e_fu_280_p1;
                tmp_end_reg_349 <= nodes_q0(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_reg_334 <= queue_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_192_p2, icmp_ln33_fu_219_p2, icmp_ln33_1_fu_259_p2, and_ln33_fu_253_p2, grp_bfs_Pipeline_loop_neighbors_fu_154_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln32_fu_192_p2 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln33_fu_253_p2) and (icmp_ln33_fu_219_p2 = ap_const_lv1_0)) or ((icmp_ln33_1_fu_259_p2 = ap_const_lv1_1) and (icmp_ln33_fu_219_p2 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_bfs_Pipeline_loop_neighbors_fu_154_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln33_fu_225_p2 <= std_logic_vector(unsigned(zext_ln32_1_fu_215_p1) + unsigned(ap_const_lv9_1));
    and_ln33_fu_253_p2 <= (icmp_ln33_3_fu_247_p2 and icmp_ln33_2_fu_241_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_bfs_Pipeline_loop_neighbors_fu_154_ap_done)
    begin
        if ((grp_bfs_Pipeline_loop_neighbors_fu_154_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_192_p2, icmp_ln33_fu_219_p2, icmp_ln33_1_fu_259_p2, and_ln33_fu_253_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln32_fu_192_p2 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln33_fu_253_p2) and (icmp_ln33_fu_219_p2 = ap_const_lv1_0)) or ((icmp_ln33_1_fu_259_p2 = ap_const_lv1_1) and (icmp_ln33_fu_219_p2 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_192_p2, icmp_ln33_fu_219_p2, icmp_ln33_1_fu_259_p2, and_ln33_fu_253_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln32_fu_192_p2 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln33_fu_253_p2) and (icmp_ln33_fu_219_p2 = ap_const_lv1_0)) or ((icmp_ln33_1_fu_259_p2 = ap_const_lv1_1) and (icmp_ln33_fu_219_p2 = ap_const_lv1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dummy_2_fu_198_p2 <= std_logic_vector(unsigned(dummy_fu_76) + unsigned(ap_const_lv9_1));
    e_fu_280_p1 <= nodes_q0(64 - 1 downto 0);
    edges_address0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_edges_address0;
    edges_ce0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_edges_ce0;
    grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start <= grp_bfs_Pipeline_loop_neighbors_fu_154_ap_start_reg;
    icmp_ln32_fu_192_p2 <= "1" when (dummy_fu_76 = ap_const_lv9_100) else "0";
    icmp_ln33_1_fu_259_p2 <= "1" when (q_in_fu_68 = zext_ln33_fu_231_p1) else "0";
    icmp_ln33_2_fu_241_p2 <= "1" when (q_in_fu_68 = ap_const_lv64_0) else "0";
    icmp_ln33_3_fu_247_p2 <= "1" when (q_out_fu_72 = ap_const_lv8_FF) else "0";
    icmp_ln33_fu_219_p2 <= "1" when (unsigned(q_in_fu_68) > unsigned(zext_ln32_fu_210_p1)) else "0";

    level_address0_assign_proc : process(ap_CS_fsm_state1, starting_node, grp_bfs_Pipeline_loop_neighbors_fu_154_level_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_address0 <= starting_node(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_address0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_address0;
        else 
            level_address0 <= "XXXXXXXX";
        end if; 
    end process;


    level_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            level_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_ce0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_ce0;
        else 
            level_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_address0_assign_proc : process(ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_counts_address0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_address0;
        else 
            level_counts_address0 <= "XXXX";
        end if; 
    end process;


    level_counts_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            level_counts_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_counts_ce0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_ce0;
        else 
            level_counts_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_d0_assign_proc : process(ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_d0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_counts_d0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_d0;
        else 
            level_counts_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    level_counts_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_we0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            level_counts_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_counts_we0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_counts_we0;
        else 
            level_counts_we0 <= ap_const_logic_0;
        end if; 
    end process;


    level_d0_assign_proc : process(ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_d0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_d0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_d0;
        else 
            level_d0 <= "XXXXXXXX";
        end if; 
    end process;


    level_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_level_we0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            level_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            level_we0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_level_we0;
        else 
            level_we0 <= ap_const_logic_0;
        end if; 
    end process;

    nodes_address0 <= zext_ln18_fu_275_p1(8 - 1 downto 0);

    nodes_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            nodes_ce0 <= ap_const_logic_1;
        else 
            nodes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_out_1_fu_235_p2 <= std_logic_vector(unsigned(q_out_fu_72) + unsigned(ap_const_lv8_1));

    queue_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_bfs_Pipeline_loop_neighbors_fu_154_queue_address0, ap_CS_fsm_state5, zext_ln32_fu_210_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            queue_address0 <= zext_ln32_fu_210_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            queue_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            queue_address0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_queue_address0;
        else 
            queue_address0 <= "XXXXXXXX";
        end if; 
    end process;


    queue_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_bfs_Pipeline_loop_neighbors_fu_154_queue_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            queue_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            queue_ce0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_queue_ce0;
        else 
            queue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_d0_assign_proc : process(ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_queue_d0, ap_CS_fsm_state5, trunc_ln14_fu_169_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            queue_d0 <= trunc_ln14_fu_169_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            queue_d0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_queue_d0;
        else 
            queue_d0 <= "XXXXXXXX";
        end if; 
    end process;


    queue_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_bfs_Pipeline_loop_neighbors_fu_154_queue_we0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            queue_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            queue_we0 <= grp_bfs_Pipeline_loop_neighbors_fu_154_queue_we0;
        else 
            queue_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln14_fu_169_p1 <= starting_node(8 - 1 downto 0);
    zext_ln18_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(queue_q0),64));
    zext_ln32_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_out_fu_72),9));
    zext_ln32_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_out_fu_72),64));
    zext_ln33_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_225_p2),64));
end behav;
