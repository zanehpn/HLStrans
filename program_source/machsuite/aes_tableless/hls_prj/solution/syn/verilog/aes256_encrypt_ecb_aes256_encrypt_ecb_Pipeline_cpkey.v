// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx7,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_q1,
        or_ln79_1_out,
        or_ln79_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [767:0] ctx7;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
input  [7:0] buf_r_q1;
output  [767:0] or_ln79_1_out;
output   or_ln79_1_out_ap_vld;

reg ap_idle;
reg buf_r_ce0;
reg buf_r_we0;
reg buf_r_ce1;
reg or_ln79_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln79_fu_367_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln79_fu_167_p1;
reg   [7:0] trunc_ln79_reg_410;
reg   [3:0] buf_r_addr_reg_415;
wire   [255:0] or_ln79_2_fu_345_p2;
reg   [255:0] or_ln79_2_reg_421;
reg   [511:0] tmp_34_reg_426;
reg   [0:0] icmp_ln79_reg_431;
wire   [63:0] trunc_ln79_1_cast8_fu_134_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_8_fu_80;
wire   [3:0] add_ln79_fu_361_p2;
wire    ap_loop_init;
reg   [767:0] p_partset10_fu_84;
wire   [767:0] or_ln79_1_fu_384_p3;
reg   [767:0] ap_sig_allocacmp_p_partset10_load;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] zext_ln79_cast_fu_147_p4;
wire   [767:0] zext_ln79_fu_157_p1;
wire   [767:0] lshr_ln79_fu_161_p2;
wire   [6:0] shl_ln_fu_139_p3;
wire   [127:0] zext_ln79_1_fu_171_p1;
wire   [127:0] shl_ln79_fu_175_p2;
wire   [127:0] zext_ln79_3_fu_185_p1;
wire   [128:0] zext_ln79_2_fu_181_p1;
wire  signed [128:0] xor_ln79_fu_195_p2;
wire  signed [767:0] sext_ln79_fu_201_p1;
wire   [127:0] trunc_ln79_2_fu_209_p1;
wire   [127:0] trunc_ln79_1_fu_205_p1;
wire   [127:0] and_ln79_2_fu_219_p2;
wire   [127:0] shl_ln79_1_fu_189_p2;
wire   [767:0] and_ln79_fu_213_p2;
wire   [639:0] tmp_s_fu_231_p4;
wire   [127:0] or_ln79_fu_225_p2;
wire  signed [7:0] zext_ln79_5_cast_fu_259_p4;
wire  signed [8:0] sext_ln79_2_fu_269_p1;
wire   [767:0] or_ln_fu_251_p3;
wire   [767:0] zext_ln79_4_fu_273_p1;
wire   [767:0] lshr_ln79_1_fu_277_p2;
wire   [255:0] zext_ln79_5_fu_287_p1;
wire   [255:0] shl_ln79_2_fu_291_p2;
wire   [7:0] trunc_ln79_3_fu_283_p1;
wire   [255:0] zext_ln79_7_fu_301_p1;
wire   [256:0] zext_ln79_6_fu_297_p1;
wire  signed [256:0] xor_ln79_2_fu_311_p2;
wire   [127:0] tmp_32_fu_241_p4;
wire  signed [767:0] sext_ln79_1_fu_317_p1;
wire   [255:0] tmp_33_fu_325_p3;
wire   [255:0] trunc_ln79_4_fu_321_p1;
wire   [255:0] and_ln79_3_fu_339_p2;
wire   [255:0] shl_ln79_3_fu_305_p2;
wire   [767:0] and_ln79_1_fu_333_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_8_fu_80 <= 4'd15;
        end else if (((icmp_ln79_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_8_fu_80 <= add_ln79_fu_361_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_partset10_fu_84 <= ctx7;
        end else if (((icmp_ln79_reg_431 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            p_partset10_fu_84 <= or_ln79_1_fu_384_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_addr_reg_415 <= trunc_ln79_1_cast8_fu_134_p1;
        icmp_ln79_reg_431 <= icmp_ln79_fu_367_p2;
        or_ln79_2_reg_421 <= or_ln79_2_fu_345_p2;
        tmp_34_reg_426 <= {{and_ln79_1_fu_333_p2[767:256]}};
        trunc_ln79_reg_410 <= trunc_ln79_fu_167_p1;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_367_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_431 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_partset10_load = or_ln79_1_fu_384_p3;
    end else begin
        ap_sig_allocacmp_p_partset10_load = p_partset10_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_431 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln79_1_out_ap_vld = 1'b1;
    end else begin
        or_ln79_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln79_fu_361_p2 = ($signed(i_8_fu_80) + $signed(4'd15));

assign and_ln79_1_fu_333_p2 = (sext_ln79_1_fu_317_p1 & or_ln_fu_251_p3);

assign and_ln79_2_fu_219_p2 = (trunc_ln79_2_fu_209_p1 & trunc_ln79_1_fu_205_p1);

assign and_ln79_3_fu_339_p2 = (trunc_ln79_4_fu_321_p1 & tmp_33_fu_325_p3);

assign and_ln79_fu_213_p2 = (sext_ln79_fu_201_p1 & ap_sig_allocacmp_p_partset10_load);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign buf_r_address0 = buf_r_addr_reg_415;

assign buf_r_address1 = trunc_ln79_1_cast8_fu_134_p1;

assign buf_r_d0 = (trunc_ln79_reg_410 ^ buf_r_q1);

assign icmp_ln79_fu_367_p2 = ((i_8_fu_80 == 4'd0) ? 1'b1 : 1'b0);

assign lshr_ln79_1_fu_277_p2 = or_ln_fu_251_p3 >> zext_ln79_4_fu_273_p1;

assign lshr_ln79_fu_161_p2 = ap_sig_allocacmp_p_partset10_load >> zext_ln79_fu_157_p1;

assign or_ln79_1_fu_384_p3 = {{tmp_34_reg_426}, {or_ln79_2_reg_421}};

assign or_ln79_1_out = {{tmp_34_reg_426}, {or_ln79_2_reg_421}};

assign or_ln79_2_fu_345_p2 = (shl_ln79_3_fu_305_p2 | and_ln79_3_fu_339_p2);

assign or_ln79_fu_225_p2 = (shl_ln79_1_fu_189_p2 | and_ln79_2_fu_219_p2);

assign or_ln_fu_251_p3 = {{tmp_s_fu_231_p4}, {or_ln79_fu_225_p2}};

assign sext_ln79_1_fu_317_p1 = xor_ln79_2_fu_311_p2;

assign sext_ln79_2_fu_269_p1 = zext_ln79_5_cast_fu_259_p4;

assign sext_ln79_fu_201_p1 = xor_ln79_fu_195_p2;

assign shl_ln79_1_fu_189_p2 = zext_ln79_3_fu_185_p1 << zext_ln79_1_fu_171_p1;

assign shl_ln79_2_fu_291_p2 = 256'd255 << zext_ln79_5_fu_287_p1;

assign shl_ln79_3_fu_305_p2 = zext_ln79_7_fu_301_p1 << zext_ln79_5_fu_287_p1;

assign shl_ln79_fu_175_p2 = 128'd255 << zext_ln79_1_fu_171_p1;

assign shl_ln_fu_139_p3 = {{i_8_fu_80}, {3'd0}};

assign tmp_32_fu_241_p4 = {{and_ln79_fu_213_p2[255:128]}};

assign tmp_33_fu_325_p3 = {{tmp_32_fu_241_p4}, {or_ln79_fu_225_p2}};

assign tmp_s_fu_231_p4 = {{and_ln79_fu_213_p2[767:128]}};

assign trunc_ln79_1_cast8_fu_134_p1 = i_8_fu_80;

assign trunc_ln79_1_fu_205_p1 = xor_ln79_fu_195_p2[127:0];

assign trunc_ln79_2_fu_209_p1 = ap_sig_allocacmp_p_partset10_load[127:0];

assign trunc_ln79_3_fu_283_p1 = lshr_ln79_1_fu_277_p2[7:0];

assign trunc_ln79_4_fu_321_p1 = xor_ln79_2_fu_311_p2[255:0];

assign trunc_ln79_fu_167_p1 = lshr_ln79_fu_161_p2[7:0];

assign xor_ln79_2_fu_311_p2 = (zext_ln79_6_fu_297_p1 ^ 257'd231584178474632390847141970017375815706539969331281128078915168015826259279871);

assign xor_ln79_fu_195_p2 = (zext_ln79_2_fu_181_p1 ^ 129'd680564733841876926926749214863536422911);

assign zext_ln79_1_fu_171_p1 = shl_ln_fu_139_p3;

assign zext_ln79_2_fu_181_p1 = shl_ln79_fu_175_p2;

assign zext_ln79_3_fu_185_p1 = trunc_ln79_fu_167_p1;

assign zext_ln79_4_fu_273_p1 = $unsigned(sext_ln79_2_fu_269_p1);

assign zext_ln79_5_cast_fu_259_p4 = {{{{1'd1}, {i_8_fu_80}}}, {3'd0}};

assign zext_ln79_5_fu_287_p1 = $unsigned(zext_ln79_5_cast_fu_259_p4);

assign zext_ln79_6_fu_297_p1 = shl_ln79_2_fu_291_p2;

assign zext_ln79_7_fu_301_p1 = trunc_ln79_3_fu_283_p1;

assign zext_ln79_cast_fu_147_p4 = {{{{2'd2}, {i_8_fu_80}}}, {3'd0}};

assign zext_ln79_fu_157_p1 = zext_ln79_cast_fu_147_p4;

endmodule //aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey
