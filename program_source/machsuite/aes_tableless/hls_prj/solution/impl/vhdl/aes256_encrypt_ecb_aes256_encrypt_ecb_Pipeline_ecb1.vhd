-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_load : IN STD_LOGIC_VECTOR (767 downto 0);
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_partset613_out_i : IN STD_LOGIC_VECTOR (767 downto 0);
    p_partset613_out_o : OUT STD_LOGIC_VECTOR (767 downto 0);
    p_partset613_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv768_lc_1 : STD_LOGIC_VECTOR (767 downto
    constant ap_const_lv768_lc_2 : STD_LOGIC_VECTOR (767 downto
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv513_lc_4 : STD_LOGIC_VECTOR (512 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln139_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln140_fu_122_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln140_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast6_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln140_1_fu_287_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_68 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln139_fu_111_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_9 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln140_cast_fu_135_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln140_fu_144_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln140_1_fu_154_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal shl_ln140_fu_148_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln140_1_fu_168_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln140_fu_172_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln140_2_fu_184_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln140_2_fu_178_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln140_1_fu_162_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal and_ln140_fu_188_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln140_3_cast_fu_210_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln140_3_fu_219_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln140_2_fu_223_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln140_2_fu_158_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln140_4_fu_229_p1 : STD_LOGIC_VECTOR (512 downto 0);
    signal xor_ln140_1_fu_239_p2 : STD_LOGIC_VECTOR (512 downto 0);
    signal trunc_ln140_3_fu_200_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln140_2_fu_194_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln140_fu_204_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal sext_ln140_fu_245_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal or_ln140_2_fu_253_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln140_4_fu_249_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln140_3_fu_265_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln140_3_fu_233_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln140_1_fu_259_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_s_fu_277_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal or_ln140_3_fu_271_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln139_fu_105_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= add_ln139_fu_111_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_105_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln140_reg_316 <= trunc_ln140_fu_122_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln139_fu_111_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_9) + unsigned(ap_const_lv6_1));
    and_ln140_1_fu_259_p2 <= (sext_ln140_fu_245_p1 and or_ln140_fu_204_p2);
    and_ln140_2_fu_194_p2 <= (xor_ln140_2_fu_178_p2 and trunc_ln140_2_fu_184_p1);
    and_ln140_3_fu_265_p2 <= (trunc_ln140_4_fu_249_p1 and or_ln140_2_fu_253_p2);
    and_ln140_fu_188_p2 <= (xor_ln140_fu_172_p2 and p_partset613_out_i);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln139_fu_105_p2)
    begin
        if (((icmp_ln139_fu_105_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_9 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_9 <= i_fu_68;
        end if; 
    end process;

    i_cast6_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_9),64));
    icmp_ln139_fu_105_p2 <= "1" when (ap_sig_allocacmp_i_9 = ap_const_lv6_20) else "0";
    k_address0 <= i_cast6_fu_117_p1(5 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln140_1_fu_287_p3 <= (tmp_s_fu_277_p4 & or_ln140_3_fu_271_p2);
    or_ln140_2_fu_253_p2 <= (trunc_ln140_3_fu_200_p1 or and_ln140_2_fu_194_p2);
    or_ln140_3_fu_271_p2 <= (shl_ln140_3_fu_233_p2 or and_ln140_3_fu_265_p2);
    or_ln140_fu_204_p2 <= (shl_ln140_1_fu_162_p2 or and_ln140_fu_188_p2);

    p_partset613_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ctx_load, p_partset613_out_i, ap_block_pp0_stage0, or_ln140_1_fu_287_p3, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                p_partset613_out_o <= ctx_load;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                p_partset613_out_o <= or_ln140_1_fu_287_p3;
            else 
                p_partset613_out_o <= p_partset613_out_i;
            end if;
        else 
            p_partset613_out_o <= p_partset613_out_i;
        end if; 
    end process;


    p_partset613_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_partset613_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_partset613_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln140_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln140_1_fu_239_p2),768));

    shl_ln140_1_fu_162_p2 <= std_logic_vector(shift_left(unsigned(zext_ln140_1_fu_154_p1),to_integer(unsigned('0' & zext_ln140_fu_144_p1(31-1 downto 0)))));
    shl_ln140_2_fu_223_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln140_3_fu_219_p1(31-1 downto 0)))));
    shl_ln140_3_fu_233_p2 <= std_logic_vector(shift_left(unsigned(zext_ln140_2_fu_158_p1),to_integer(unsigned('0' & zext_ln140_3_fu_219_p1(31-1 downto 0)))));
    shl_ln140_fu_148_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv768_lc_1),to_integer(unsigned('0' & zext_ln140_fu_144_p1(31-1 downto 0)))));
    tmp_s_fu_277_p4 <= and_ln140_1_fu_259_p2(767 downto 512);
    trunc_ln140_1_fu_168_p1 <= shl_ln140_fu_148_p2(512 - 1 downto 0);
    trunc_ln140_2_fu_184_p1 <= p_partset613_out_i(512 - 1 downto 0);
    trunc_ln140_3_fu_200_p1 <= shl_ln140_1_fu_162_p2(512 - 1 downto 0);
    trunc_ln140_4_fu_249_p1 <= xor_ln140_1_fu_239_p2(512 - 1 downto 0);
    trunc_ln140_fu_122_p1 <= ap_sig_allocacmp_i_9(5 - 1 downto 0);
    xor_ln140_1_fu_239_p2 <= (zext_ln140_4_fu_229_p1 xor ap_const_lv513_lc_4);
    xor_ln140_2_fu_178_p2 <= (trunc_ln140_1_fu_168_p1 xor ap_const_lv512_lc_3);
    xor_ln140_fu_172_p2 <= (shl_ln140_fu_148_p2 xor ap_const_lv768_lc_2);
    zext_ln140_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_q0),768));
    zext_ln140_2_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_q0),512));
    zext_ln140_3_cast_fu_210_p4 <= ((ap_const_lv1_1 & trunc_ln140_reg_316) & ap_const_lv3_0);
    zext_ln140_3_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln140_3_cast_fu_210_p4),512));
    zext_ln140_4_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_2_fu_223_p2),513));
    zext_ln140_cast_fu_135_p4 <= ((ap_const_lv2_2 & trunc_ln140_reg_316) & ap_const_lv3_0);
    zext_ln140_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln140_cast_fu_135_p4),768));
end behav;
