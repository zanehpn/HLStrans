// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jacobi_2d_jacobi_2d_Pipeline_VITIS_LOOP_10_2_VITIS_LOOP_12_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        grp_fu_101_p_din0,
        grp_fu_101_p_din1,
        grp_fu_101_p_opcode,
        grp_fu_101_p_dout0,
        grp_fu_101_p_ce,
        grp_fu_105_p_din0,
        grp_fu_105_p_din1,
        grp_fu_105_p_opcode,
        grp_fu_105_p_dout0,
        grp_fu_105_p_ce,
        grp_fu_109_p_din0,
        grp_fu_109_p_din1,
        grp_fu_109_p_dout0,
        grp_fu_109_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [12:0] A_address1;
output   A_ce1;
input  [63:0] A_q1;
output  [12:0] B_address0;
output   B_ce0;
output   B_we0;
output  [63:0] B_d0;
output  [63:0] grp_fu_101_p_din0;
output  [63:0] grp_fu_101_p_din1;
output  [1:0] grp_fu_101_p_opcode;
input  [63:0] grp_fu_101_p_dout0;
output   grp_fu_101_p_ce;
output  [63:0] grp_fu_105_p_din0;
output  [63:0] grp_fu_105_p_din1;
output  [1:0] grp_fu_105_p_opcode;
input  [63:0] grp_fu_105_p_dout0;
output   grp_fu_105_p_ce;
output  [63:0] grp_fu_109_p_din0;
output  [63:0] grp_fu_109_p_din1;
input  [63:0] grp_fu_109_p_dout0;
output   grp_fu_109_p_ce;

reg ap_idle;
reg[12:0] A_address0;
reg A_ce0;
reg[12:0] A_address1;
reg A_ce1;
reg B_ce0;
reg B_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_state12_pp0_stage2_iter3;
wire    ap_block_state15_pp0_stage2_iter4;
wire    ap_block_state18_pp0_stage2_iter5;
wire    ap_block_state21_pp0_stage2_iter6;
wire    ap_block_state24_pp0_stage2_iter7;
wire    ap_block_state27_pp0_stage2_iter8;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln10_reg_396;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [63:0] reg_137;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state16_pp0_stage0_iter5;
wire    ap_block_state19_pp0_stage0_iter6;
wire    ap_block_state22_pp0_stage0_iter7;
wire    ap_block_state25_pp0_stage0_iter8;
wire    ap_block_state28_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] reg_142;
wire   [0:0] icmp_ln10_fu_165_p2;
reg   [0:0] icmp_ln10_reg_396_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter5_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter6_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter7_reg;
reg   [0:0] icmp_ln10_reg_396_pp0_iter8_reg;
wire   [6:0] select_ln10_3_fu_245_p3;
reg   [6:0] select_ln10_3_reg_405;
wire   [12:0] zext_ln13_fu_253_p1;
reg   [12:0] zext_ln13_reg_410;
wire   [12:0] add_ln13_2_fu_257_p2;
reg   [12:0] add_ln13_2_reg_416;
wire   [12:0] add_ln13_5_fu_273_p2;
reg   [12:0] add_ln13_5_reg_421;
wire   [12:0] add_ln13_6_fu_289_p2;
reg   [12:0] add_ln13_6_reg_426;
reg   [12:0] add_ln13_6_reg_426_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_state14_pp0_stage1_iter4;
wire    ap_block_state17_pp0_stage1_iter5;
wire    ap_block_state20_pp0_stage1_iter6;
wire    ap_block_state23_pp0_stage1_iter7;
wire    ap_block_state26_pp0_stage1_iter8;
wire    ap_block_state29_pp0_stage1_iter9;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln13_1_fu_313_p1;
reg   [63:0] zext_ln13_1_reg_436;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter1_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter2_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter3_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter4_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter5_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter6_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter7_reg;
reg   [63:0] zext_ln13_1_reg_436_pp0_iter8_reg;
wire   [12:0] grp_fu_361_p3;
reg   [12:0] add_ln13_3_reg_451;
reg   [12:0] add_ln13_3_reg_451_pp0_iter2_reg;
reg   [12:0] add_ln13_3_reg_451_pp0_iter3_reg;
wire   [63:0] bitcast_ln13_fu_321_p1;
wire   [63:0] bitcast_ln13_1_fu_326_p1;
wire   [12:0] grp_fu_368_p3;
reg   [12:0] add_ln13_4_reg_466;
reg   [12:0] add_ln13_4_reg_466_pp0_iter2_reg;
reg   [12:0] add_ln13_4_reg_466_pp0_iter3_reg;
reg   [12:0] add_ln13_4_reg_466_pp0_iter4_reg;
reg   [63:0] add_reg_476;
wire   [63:0] bitcast_ln13_2_fu_335_p1;
reg   [63:0] add1_reg_491;
wire   [63:0] bitcast_ln13_3_fu_344_p1;
reg   [63:0] A_load_4_reg_506;
reg   [63:0] add2_reg_511;
wire   [63:0] bitcast_ln13_4_fu_353_p1;
reg   [63:0] add3_reg_521;
reg   [63:0] mul_reg_526;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln13_5_fu_317_p1;
wire   [63:0] zext_ln13_7_fu_331_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln13_2_fu_340_p1;
wire   [63:0] zext_ln13_3_fu_349_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] j_fu_50;
wire   [6:0] add_ln13_1_fu_279_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_54;
wire   [6:0] select_ln10_1_fu_203_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [12:0] indvar_flatten_fu_58;
wire   [12:0] add_ln10_fu_171_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [63:0] grp_fu_124_p0;
reg   [63:0] grp_fu_124_p1;
wire   [0:0] icmp_ln12_fu_183_p2;
wire   [6:0] indvars_iv_next201_fu_197_p2;
wire   [6:0] mul_ln13_fu_215_p0;
wire   [7:0] mul_ln13_fu_215_p1;
wire   [6:0] indvars_iv_next20_mid1_fu_221_p2;
wire   [6:0] select_ln10_2_fu_227_p3;
wire   [6:0] empty_10_fu_239_p2;
wire   [6:0] select_ln10_fu_189_p3;
wire   [12:0] mul_ln13_fu_215_p2;
wire   [6:0] add_ln13_fu_263_p2;
wire   [12:0] zext_ln13_4_fu_269_p1;
wire   [12:0] zext_ln13_6_fu_285_p1;
wire   [6:0] grp_fu_361_p0;
wire   [6:0] grp_fu_361_p1;
wire   [6:0] grp_fu_361_p2;
wire   [6:0] grp_fu_368_p0;
wire   [6:0] grp_fu_368_p1;
wire   [6:0] grp_fu_368_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter8_stage1;
reg    ap_idle_pp0_0to7;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to9;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage1_00001;
wire   [12:0] grp_fu_361_p00;
wire   [12:0] grp_fu_368_p00;
wire   [12:0] mul_ln13_fu_215_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

jacobi_2d_mul_7ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_7ns_8ns_13_1_1_U4(
    .din0(mul_ln13_fu_215_p0),
    .din1(mul_ln13_fu_215_p1),
    .dout(mul_ln13_fu_215_p2)
);

jacobi_2d_mac_muladd_7ns_7ns_7ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
mac_muladd_7ns_7ns_7ns_13_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_361_p0),
    .din1(grp_fu_361_p1),
    .din2(grp_fu_361_p2),
    .ce(1'b1),
    .dout(grp_fu_361_p3)
);

jacobi_2d_mac_muladd_7ns_7ns_7ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
mac_muladd_7ns_7ns_7ns_13_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_368_p0),
    .din1(grp_fu_368_p1),
    .din2(grp_fu_368_p2),
    .ce(1'b1),
    .dout(grp_fu_368_p3)
);

jacobi_2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_165_p2 == 1'd0))) begin
            i_fu_54 <= select_ln10_1_fu_203_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 7'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_165_p2 == 1'd0))) begin
            indvar_flatten_fu_58 <= add_ln10_fu_171_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_58 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_165_p2 == 1'd0))) begin
            j_fu_50 <= add_ln13_1_fu_279_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 7'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_137 <= A_q0;
    end else if (((icmp_ln10_reg_396 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_137 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_142 <= A_q1;
    end else if (((icmp_ln10_reg_396 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_142 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_load_4_reg_506 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add1_reg_491 <= grp_fu_101_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add2_reg_511 <= grp_fu_101_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add3_reg_521 <= grp_fu_105_p_dout0;
        add_ln13_4_reg_466_pp0_iter2_reg <= add_ln13_4_reg_466;
        add_ln13_4_reg_466_pp0_iter3_reg <= add_ln13_4_reg_466_pp0_iter2_reg;
        add_ln13_4_reg_466_pp0_iter4_reg <= add_ln13_4_reg_466_pp0_iter3_reg;
        zext_ln13_1_reg_436_pp0_iter1_reg[12 : 0] <= zext_ln13_1_reg_436[12 : 0];
        zext_ln13_1_reg_436_pp0_iter2_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter1_reg[12 : 0];
        zext_ln13_1_reg_436_pp0_iter3_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter2_reg[12 : 0];
        zext_ln13_1_reg_436_pp0_iter4_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter3_reg[12 : 0];
        zext_ln13_1_reg_436_pp0_iter5_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter4_reg[12 : 0];
        zext_ln13_1_reg_436_pp0_iter6_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter5_reg[12 : 0];
        zext_ln13_1_reg_436_pp0_iter7_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter6_reg[12 : 0];
        zext_ln13_1_reg_436_pp0_iter8_reg[12 : 0] <= zext_ln13_1_reg_436_pp0_iter7_reg[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_165_p2 == 1'd0))) begin
        add_ln13_2_reg_416 <= add_ln13_2_fu_257_p2;
        add_ln13_5_reg_421 <= add_ln13_5_fu_273_p2;
        add_ln13_6_reg_426 <= add_ln13_6_fu_289_p2;
        select_ln10_3_reg_405 <= select_ln10_3_fu_245_p3;
        zext_ln13_reg_410[6 : 0] <= zext_ln13_fu_253_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_3_reg_451 <= grp_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_3_reg_451_pp0_iter2_reg <= add_ln13_3_reg_451;
        add_ln13_3_reg_451_pp0_iter3_reg <= add_ln13_3_reg_451_pp0_iter2_reg;
        add_ln13_6_reg_426_pp0_iter1_reg <= add_ln13_6_reg_426;
        icmp_ln10_reg_396 <= icmp_ln10_fu_165_p2;
        icmp_ln10_reg_396_pp0_iter1_reg <= icmp_ln10_reg_396;
        icmp_ln10_reg_396_pp0_iter2_reg <= icmp_ln10_reg_396_pp0_iter1_reg;
        icmp_ln10_reg_396_pp0_iter3_reg <= icmp_ln10_reg_396_pp0_iter2_reg;
        icmp_ln10_reg_396_pp0_iter4_reg <= icmp_ln10_reg_396_pp0_iter3_reg;
        icmp_ln10_reg_396_pp0_iter5_reg <= icmp_ln10_reg_396_pp0_iter4_reg;
        icmp_ln10_reg_396_pp0_iter6_reg <= icmp_ln10_reg_396_pp0_iter5_reg;
        icmp_ln10_reg_396_pp0_iter7_reg <= icmp_ln10_reg_396_pp0_iter6_reg;
        icmp_ln10_reg_396_pp0_iter8_reg <= icmp_ln10_reg_396_pp0_iter7_reg;
        mul_reg_526 <= grp_fu_109_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln13_4_reg_466 <= grp_fu_368_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_reg_476 <= grp_fu_101_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_396 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln13_1_reg_436[12 : 0] <= zext_ln13_1_fu_313_p1[12 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = zext_ln13_3_fu_349_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_address0 = zext_ln13_7_fu_331_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address0 = zext_ln13_5_fu_317_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_address1 = zext_ln13_2_fu_340_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address1 = zext_ln13_1_fu_313_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_396 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln10_reg_396_pp0_iter8_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter8_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter8_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to7 = 1'b1;
    end else begin
        ap_idle_pp0_0to7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to9 = 1'b1;
    end else begin
        ap_idle_pp0_1to9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 7'd1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_124_p0 = add1_reg_491;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_124_p0 = add_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_124_p0 = bitcast_ln13_fu_321_p1;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_124_p1 = bitcast_ln13_3_fu_344_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_124_p1 = bitcast_ln13_2_fu_335_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_124_p1 = bitcast_ln13_1_fu_326_p1;
    end else begin
        grp_fu_124_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to9 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = zext_ln13_1_reg_436_pp0_iter8_reg;

assign B_d0 = mul_reg_526;

assign add_ln10_fu_171_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign add_ln13_1_fu_279_p2 = (select_ln10_fu_189_p3 + 7'd1);

assign add_ln13_2_fu_257_p2 = (mul_ln13_fu_215_p2 + zext_ln13_fu_253_p1);

assign add_ln13_5_fu_273_p2 = (mul_ln13_fu_215_p2 + zext_ln13_4_fu_269_p1);

assign add_ln13_6_fu_289_p2 = (mul_ln13_fu_215_p2 + zext_ln13_6_fu_285_p1);

assign add_ln13_fu_263_p2 = ($signed(select_ln10_fu_189_p3) + $signed(7'd127));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bitcast_ln13_1_fu_326_p1 = reg_142;

assign bitcast_ln13_2_fu_335_p1 = reg_137;

assign bitcast_ln13_3_fu_344_p1 = reg_142;

assign bitcast_ln13_4_fu_353_p1 = A_load_4_reg_506;

assign bitcast_ln13_fu_321_p1 = reg_137;

assign empty_10_fu_239_p2 = ($signed(ap_sig_allocacmp_i_load) + $signed(7'd127));

assign grp_fu_101_p_ce = 1'b1;

assign grp_fu_101_p_din0 = grp_fu_124_p0;

assign grp_fu_101_p_din1 = grp_fu_124_p1;

assign grp_fu_101_p_opcode = 2'd0;

assign grp_fu_105_p_ce = 1'b1;

assign grp_fu_105_p_din0 = add2_reg_511;

assign grp_fu_105_p_din1 = bitcast_ln13_4_fu_353_p1;

assign grp_fu_105_p_opcode = 2'd0;

assign grp_fu_109_p_ce = 1'b1;

assign grp_fu_109_p_din0 = add3_reg_521;

assign grp_fu_109_p_din1 = 64'd4596373779694328218;

assign grp_fu_361_p0 = grp_fu_361_p00;

assign grp_fu_361_p00 = select_ln10_2_fu_227_p3;

assign grp_fu_361_p1 = 13'd90;

assign grp_fu_361_p2 = zext_ln13_reg_410;

assign grp_fu_368_p0 = grp_fu_368_p00;

assign grp_fu_368_p00 = select_ln10_3_reg_405;

assign grp_fu_368_p1 = 13'd90;

assign grp_fu_368_p2 = zext_ln13_reg_410;

assign icmp_ln10_fu_165_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd7744) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_183_p2 = ((ap_sig_allocacmp_j_load == 7'd89) ? 1'b1 : 1'b0);

assign indvars_iv_next201_fu_197_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign indvars_iv_next20_mid1_fu_221_p2 = (ap_sig_allocacmp_i_load + 7'd2);

assign mul_ln13_fu_215_p0 = mul_ln13_fu_215_p00;

assign mul_ln13_fu_215_p00 = select_ln10_1_fu_203_p3;

assign mul_ln13_fu_215_p1 = 13'd90;

assign select_ln10_1_fu_203_p3 = ((icmp_ln12_fu_183_p2[0:0] == 1'b1) ? indvars_iv_next201_fu_197_p2 : ap_sig_allocacmp_i_load);

assign select_ln10_2_fu_227_p3 = ((icmp_ln12_fu_183_p2[0:0] == 1'b1) ? indvars_iv_next20_mid1_fu_221_p2 : indvars_iv_next201_fu_197_p2);

assign select_ln10_3_fu_245_p3 = ((icmp_ln12_fu_183_p2[0:0] == 1'b1) ? ap_sig_allocacmp_i_load : empty_10_fu_239_p2);

assign select_ln10_fu_189_p3 = ((icmp_ln12_fu_183_p2[0:0] == 1'b1) ? 7'd1 : ap_sig_allocacmp_j_load);

assign zext_ln13_1_fu_313_p1 = add_ln13_2_reg_416;

assign zext_ln13_2_fu_340_p1 = add_ln13_3_reg_451_pp0_iter3_reg;

assign zext_ln13_3_fu_349_p1 = add_ln13_4_reg_466_pp0_iter4_reg;

assign zext_ln13_4_fu_269_p1 = add_ln13_fu_263_p2;

assign zext_ln13_5_fu_317_p1 = add_ln13_5_reg_421;

assign zext_ln13_6_fu_285_p1 = add_ln13_1_fu_279_p2;

assign zext_ln13_7_fu_331_p1 = add_ln13_6_reg_426_pp0_iter1_reg;

assign zext_ln13_fu_253_p1 = select_ln10_fu_189_p3;

always @ (posedge ap_clk) begin
    zext_ln13_reg_410[12:7] <= 6'b000000;
    zext_ln13_1_reg_436[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter1_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter2_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter3_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter4_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter5_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter6_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter7_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln13_1_reg_436_pp0_iter8_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //jacobi_2d_jacobi_2d_Pipeline_VITIS_LOOP_10_2_VITIS_LOOP_12_3
