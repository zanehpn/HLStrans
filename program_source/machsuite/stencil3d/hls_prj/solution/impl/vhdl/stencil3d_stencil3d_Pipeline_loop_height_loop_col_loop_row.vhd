-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    orig_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    orig_ce0 : OUT STD_LOGIC;
    orig_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    orig_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    orig_ce1 : OUT STD_LOGIC;
    orig_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_load : IN STD_LOGIC_VECTOR (31 downto 0);
    C_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sol_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sol_ce0 : OUT STD_LOGIC;
    sol_we0 : OUT STD_LOGIC;
    sol_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3138 : STD_LOGIC_VECTOR (13 downto 0) := "11000100111000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_1A4 : STD_LOGIC_VECTOR (8 downto 0) := "110100100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_21 : STD_LOGIC_VECTOR (9 downto 0) := "0000100001";
    constant ap_const_lv10_3E1 : STD_LOGIC_VECTOR (9 downto 0) := "1111100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln36_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_795 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal i_1_reg_802 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln36_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten26_load_reg_812 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln37_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next3383_fu_266_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next3383_reg_828 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln36_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_7_fu_304_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_7_reg_842 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next19_dup_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next19_dup_reg_848 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_324_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_fu_340_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_reg_864 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_reg_869 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_reg_869_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln11_3_fu_648_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln11_3_reg_894 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln44_5_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_5_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul0_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul0_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_736_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln43_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln45_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_1_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln41_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln44_fu_378_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_84 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten26_fu_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln37_1_fu_712_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten71_fu_96 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_fu_240_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln43_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln38_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_258_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln11_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_6_fu_278_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln2_fu_348_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln11_4_fu_332_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln43_2_fu_363_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_mid_fu_410_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_404_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_mid1_fu_417_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln36_8_fu_423_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln11_5_fu_430_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln44_mid2_v_fu_437_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln11_1_fu_445_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_4_fu_451_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln44_1_fu_454_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln45_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln45_1_fu_470_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_483_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_2_cast_fu_499_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln40_2_fu_506_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln41_fu_516_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln42_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_fu_496_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid_fu_532_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln42_1_fu_546_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_1_fu_559_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_1_fu_572_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_fu_520_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_1_fu_585_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_fu_526_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_5_cast_fu_601_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln40_5_fu_608_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln36_1_fu_539_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_3_fu_612_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln36_3_fu_565_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln41_1_fu_625_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_3_fu_629_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln36_4_fu_578_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln36_2_fu_552_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_3_fu_598_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_3_fu_642_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln36_5_fu_591_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln11_1_fu_618_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_2_fu_655_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln11_2_fu_635_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_2_fu_667_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln44_4_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_2_fu_696_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln37_fu_707_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln44_2_fu_724_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_2_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_3_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_83 : BOOLEAN;
    signal ap_condition_94 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component stencil3d_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil3d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U7 : component stencil3d_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_190,
        din1 => C_load,
        dout => mul0_fu_691_p2);

    mul_32s_32s_32_1_1_U8 : component stencil3d_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => C_load_1,
        din1 => sum1_reg_924,
        dout => mul1_fu_741_p2);

    flow_control_loop_pipe_sequential_init_U : component stencil3d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_92 <= ap_const_lv5_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_0))) then 
                i_fu_92 <= select_ln36_7_fu_304_p3;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_88 <= ap_const_lv9_0;
                elsif (((icmp_ln36_reg_808 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten26_fu_88 <= select_ln37_1_fu_712_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten71_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten71_fu_96 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_0))) then 
                indvar_flatten71_fu_96 <= add_ln36_fu_240_p2;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_84 <= ap_const_lv5_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_0))) then 
                j_fu_84 <= select_ln37_fu_340_p3;
            end if; 
        end if;
    end process;

    k_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_80 <= ap_const_lv4_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_0))) then 
                k_fu_80 <= add_ln44_fu_378_p2;
            end if; 
        end if;
    end process;

    reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln36_reg_808 = ap_const_lv1_0)) then
                if ((ap_const_boolean_1 = ap_condition_94)) then 
                    reg_190 <= orig_q0;
                elsif ((ap_const_boolean_1 = ap_condition_83)) then 
                    reg_190 <= orig_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln36_reg_808 = ap_const_lv1_0)) then
                if ((ap_const_boolean_1 = ap_condition_94)) then 
                    reg_195 <= orig_q1;
                elsif ((ap_const_boolean_1 = ap_condition_83)) then 
                    reg_195 <= orig_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_808 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln44_5_reg_909 <= add_ln44_5_fu_685_p2;
                mul0_reg_914 <= mul0_fu_691_p2;
                select_ln11_3_reg_894 <= select_ln11_3_fu_648_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_0))) then
                and_ln36_reg_834 <= and_ln36_fu_298_p2;
                icmp_ln37_reg_817 <= icmp_ln37_fu_252_p2;
                indvar_flatten26_load_reg_812 <= indvar_flatten26_fu_88;
                indvars_iv_next19_dup_reg_848 <= indvars_iv_next19_dup_fu_312_p2;
                indvars_iv_next3383_reg_828 <= indvars_iv_next3383_fu_266_p2;
                select_ln11_reg_855 <= select_ln11_fu_324_p3;
                select_ln36_7_reg_842 <= select_ln36_7_fu_304_p3;
                select_ln37_reg_864 <= select_ln37_fu_340_p3;
                    zext_ln39_reg_869(13 downto 0) <= zext_ln39_fu_358_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                i_1_reg_802 <= i_fu_92;
                icmp_ln36_reg_808 <= icmp_ln36_fu_234_p2;
                j_1_reg_795 <= j_fu_84;
                sum1_reg_924 <= sum1_fu_736_p2;
                    zext_ln39_reg_869_pp0_iter1_reg(13 downto 0) <= zext_ln39_reg_869(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul1_reg_929 <= mul1_fu_741_p2;
            end if;
        end if;
    end process;
    zext_ln39_reg_869(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln39_reg_869_pp0_iter1_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln2_fu_348_p4 <= ((select_ln36_7_fu_304_p3 & select_ln37_fu_340_p3) & select_ln11_fu_324_p3);
    add_ln36_fu_240_p2 <= std_logic_vector(unsigned(indvar_flatten71_fu_96) + unsigned(ap_const_lv14_1));
    add_ln37_fu_707_p2 <= std_logic_vector(unsigned(indvar_flatten26_load_reg_812) + unsigned(ap_const_lv9_1));
    add_ln40_1_fu_559_p2 <= std_logic_vector(unsigned(p_mid_fu_532_p3) + unsigned(ap_const_lv10_21));
    add_ln40_2_fu_655_p3 <= (select_ln11_1_fu_618_p3 & select_ln11_reg_855);
    add_ln40_3_fu_612_p2 <= std_logic_vector(unsigned(zext_ln40_5_fu_608_p1) + unsigned(select_ln36_1_fu_539_p3));
    add_ln40_fu_510_p2 <= std_logic_vector(unsigned(zext_ln40_2_fu_506_p1) + unsigned(tmp_2_fu_483_p3));
    add_ln41_1_fu_572_p2 <= std_logic_vector(unsigned(p_mid_fu_532_p3) + unsigned(ap_const_lv10_3E1));
    add_ln41_2_fu_667_p3 <= (select_ln11_2_fu_635_p3 & select_ln11_reg_855);
    add_ln41_3_fu_629_p2 <= std_logic_vector(signed(sext_ln41_1_fu_625_p1) + signed(select_ln36_1_fu_539_p3));
    add_ln41_fu_520_p2 <= std_logic_vector(signed(sext_ln41_fu_516_p1) + signed(tmp_2_fu_483_p3));
    add_ln42_1_fu_585_p2 <= std_logic_vector(unsigned(or_ln42_1_fu_546_p2) + unsigned(ap_const_lv10_1));
    add_ln42_2_fu_696_p3 <= (select_ln11_3_reg_894 & select_ln11_reg_855);
    add_ln42_3_fu_642_p2 <= std_logic_vector(unsigned(select_ln36_2_fu_552_p3) + unsigned(zext_ln40_3_fu_598_p1));
    add_ln42_fu_526_p2 <= std_logic_vector(unsigned(or_ln42_fu_490_p2) + unsigned(zext_ln40_fu_496_p1));
    add_ln43_2_fu_363_p4 <= ((select_ln36_7_fu_304_p3 & select_ln11_4_fu_332_p3) & select_ln11_fu_324_p3);
    add_ln43_fu_272_p2 <= std_logic_vector(unsigned(j_fu_84) + unsigned(ap_const_lv5_1F));
    add_ln44_1_fu_454_p2 <= std_logic_vector(unsigned(or_ln11_1_fu_445_p2) + unsigned(zext_ln40_4_fu_451_p1));
    add_ln44_2_fu_724_p0 <= reg_190;
    add_ln44_2_fu_724_p2 <= std_logic_vector(unsigned(add_ln44_2_fu_724_p0) + unsigned(orig_q0));
    add_ln44_3_fu_730_p2 <= std_logic_vector(unsigned(add_ln44_2_fu_724_p2) + unsigned(reg_195));
    add_ln44_4_fu_679_p2 <= std_logic_vector(unsigned(orig_q0) + unsigned(orig_q1));
    add_ln44_5_fu_685_p2 <= std_logic_vector(unsigned(add_ln44_4_fu_679_p2) + unsigned(reg_195));
    add_ln44_fu_378_p2 <= std_logic_vector(unsigned(select_ln11_fu_324_p3) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_470_p4 <= ((select_ln36_7_reg_842 & select_ln37_reg_864) & add_ln45_fu_465_p2);
    add_ln45_fu_465_p2 <= std_logic_vector(unsigned(select_ln11_reg_855) + unsigned(ap_const_lv4_F));
    and_ln36_fu_298_p2 <= (xor_ln36_fu_286_p2 and icmp_ln38_fu_292_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_83_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
                ap_condition_83 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_94_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_94 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln36_reg_808)
    begin
        if (((icmp_ln36_reg_808 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln36_fu_234_p2 <= "1" when (indvar_flatten71_fu_96 = ap_const_lv14_3138) else "0";
    icmp_ln37_fu_252_p2 <= "1" when (indvar_flatten26_fu_88 = ap_const_lv9_1A4) else "0";
    icmp_ln38_fu_292_p2 <= "1" when (k_fu_80 = ap_const_lv4_F) else "0";
    indvars_iv_next19_dup_fu_312_p2 <= std_logic_vector(unsigned(select_ln36_fu_258_p3) + unsigned(ap_const_lv5_1));
    indvars_iv_next3383_fu_266_p2 <= std_logic_vector(unsigned(i_fu_92) + unsigned(ap_const_lv5_1));
    or_ln11_1_fu_445_p2 <= (or_ln44_mid2_v_fu_437_p3 or ap_const_lv14_1);
    or_ln11_fu_318_p2 <= (icmp_ln37_fu_252_p2 or and_ln36_fu_298_p2);
    or_ln42_1_fu_546_p2 <= (p_mid_fu_532_p3 or ap_const_lv10_1);
    or_ln42_fu_490_p2 <= (tmp_2_fu_483_p3 or ap_const_lv10_1);
    or_ln44_mid2_v_fu_437_p3 <= (select_ln11_5_fu_430_p3 & ap_const_lv4_0);

    orig_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln43_fu_373_p1, zext_ln44_fu_460_p1, ap_block_pp0_stage2, zext_ln40_1_fu_662_p1, ap_block_pp0_stage3, zext_ln42_fu_702_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_address0 <= zext_ln42_fu_702_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            orig_address0 <= zext_ln40_1_fu_662_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            orig_address0 <= zext_ln44_fu_460_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            orig_address0 <= zext_ln43_fu_373_p1(14 - 1 downto 0);
        else 
            orig_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    orig_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln39_fu_358_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln45_fu_478_p1, ap_block_pp0_stage3, zext_ln41_fu_674_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                orig_address1 <= zext_ln41_fu_674_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                orig_address1 <= zext_ln45_fu_478_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                orig_address1 <= zext_ln39_fu_358_p1(14 - 1 downto 0);
            else 
                orig_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            orig_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    orig_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_ce0 <= ap_const_logic_1;
        else 
            orig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_ce1 <= ap_const_logic_1;
        else 
            orig_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid_fu_532_p3 <= (indvars_iv_next3383_reg_828 & ap_const_lv5_0);
    select_ln11_1_fu_618_p3 <= 
        add_ln40_3_fu_612_p2 when (and_ln36_reg_834(0) = '1') else 
        select_ln36_3_fu_565_p3;
    select_ln11_2_fu_635_p3 <= 
        add_ln41_3_fu_629_p2 when (and_ln36_reg_834(0) = '1') else 
        select_ln36_4_fu_578_p3;
    select_ln11_3_fu_648_p3 <= 
        add_ln42_3_fu_642_p2 when (and_ln36_reg_834(0) = '1') else 
        select_ln36_5_fu_591_p3;
    select_ln11_4_fu_332_p3 <= 
        select_ln36_fu_258_p3 when (and_ln36_fu_298_p2(0) = '1') else 
        select_ln36_6_fu_278_p3;
    select_ln11_5_fu_430_p3 <= 
        tmp_mid1_fu_417_p3 when (and_ln36_reg_834(0) = '1') else 
        select_ln36_8_fu_423_p3;
    select_ln11_fu_324_p3 <= 
        ap_const_lv4_1 when (or_ln11_fu_318_p2(0) = '1') else 
        k_fu_80;
    select_ln36_1_fu_539_p3 <= 
        p_mid_fu_532_p3 when (icmp_ln37_reg_817(0) = '1') else 
        tmp_2_fu_483_p3;
    select_ln36_2_fu_552_p3 <= 
        or_ln42_1_fu_546_p2 when (icmp_ln37_reg_817(0) = '1') else 
        or_ln42_fu_490_p2;
    select_ln36_3_fu_565_p3 <= 
        add_ln40_1_fu_559_p2 when (icmp_ln37_reg_817(0) = '1') else 
        add_ln40_fu_510_p2;
    select_ln36_4_fu_578_p3 <= 
        add_ln41_1_fu_572_p2 when (icmp_ln37_reg_817(0) = '1') else 
        add_ln41_fu_520_p2;
    select_ln36_5_fu_591_p3 <= 
        add_ln42_1_fu_585_p2 when (icmp_ln37_reg_817(0) = '1') else 
        add_ln42_fu_526_p2;
    select_ln36_6_fu_278_p3 <= 
        ap_const_lv5_0 when (icmp_ln37_fu_252_p2(0) = '1') else 
        add_ln43_fu_272_p2;
    select_ln36_7_fu_304_p3 <= 
        indvars_iv_next3383_fu_266_p2 when (icmp_ln37_fu_252_p2(0) = '1') else 
        i_fu_92;
    select_ln36_8_fu_423_p3 <= 
        tmp_mid_fu_410_p3 when (icmp_ln37_reg_817(0) = '1') else 
        tmp_fu_404_p3;
    select_ln36_fu_258_p3 <= 
        ap_const_lv5_1 when (icmp_ln37_fu_252_p2(0) = '1') else 
        j_fu_84;
    select_ln37_1_fu_712_p3 <= 
        ap_const_lv9_1 when (icmp_ln37_reg_817(0) = '1') else 
        add_ln37_fu_707_p2;
    select_ln37_fu_340_p3 <= 
        indvars_iv_next19_dup_fu_312_p2 when (and_ln36_fu_298_p2(0) = '1') else 
        select_ln36_fu_258_p3;
        sext_ln41_1_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln40_5_cast_fu_601_p3),10));

        sext_ln41_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln40_2_cast_fu_499_p3),10));

    sol_address0 <= zext_ln39_reg_869_pp0_iter1_reg(14 - 1 downto 0);

    sol_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sol_ce0 <= ap_const_logic_1;
        else 
            sol_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_d0 <= std_logic_vector(unsigned(mul1_reg_929) + unsigned(mul0_reg_914));

    sol_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sol_we0 <= ap_const_logic_1;
        else 
            sol_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_fu_736_p2 <= std_logic_vector(unsigned(add_ln44_5_reg_909) + unsigned(add_ln44_3_fu_730_p2));
    tmp_2_fu_483_p3 <= (i_1_reg_802 & ap_const_lv5_0);
    tmp_fu_404_p3 <= (i_1_reg_802 & j_1_reg_795);
    tmp_mid1_fu_417_p3 <= (select_ln36_7_reg_842 & indvars_iv_next19_dup_reg_848);
    tmp_mid_fu_410_p3 <= (indvars_iv_next3383_reg_828 & ap_const_lv5_1);
    xor_ln36_fu_286_p2 <= (icmp_ln37_fu_252_p2 xor ap_const_lv1_1);
    zext_ln39_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2_fu_348_p4),64));
    zext_ln40_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_655_p3),64));
    zext_ln40_2_cast_fu_499_p3 <= (ap_const_lv1_1 & j_1_reg_795);
    zext_ln40_2_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln40_2_cast_fu_499_p3),10));
    zext_ln40_3_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next19_dup_reg_848),10));
    zext_ln40_4_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_reg_855),14));
    zext_ln40_5_cast_fu_601_p3 <= (ap_const_lv1_1 & indvars_iv_next19_dup_reg_848);
    zext_ln40_5_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln40_5_cast_fu_601_p3),10));
    zext_ln40_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_795),10));
    zext_ln41_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_2_fu_667_p3),64));
    zext_ln42_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_696_p3),64));
    zext_ln43_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_2_fu_363_p4),64));
    zext_ln44_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_1_fu_454_p2),64));
    zext_ln45_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_470_p4),64));
end behav;
