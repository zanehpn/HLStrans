// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge_sort_merge_sort_Pipeline_VITIS_LOOP_6_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indvars_iv,
        i2_2,
        i1_1,
        zext_ln6_2,
        temp_address0,
        temp_ce0,
        temp_we0,
        temp_d0,
        i3_1,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] indvars_iv;
input  [31:0] i2_2;
input  [31:0] i1_1;
input  [62:0] zext_ln6_2;
output  [3:0] temp_address0;
output   temp_ce0;
output   temp_we0;
output  [31:0] temp_d0;
input  [31:0] i3_1;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;

reg ap_idle;
reg[3:0] temp_address0;
reg temp_ce0;
reg temp_we0;
reg[31:0] temp_d0;
reg[3:0] A_address0;
reg A_ce0;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln6_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln6_2_cast_fu_154_p1;
reg   [63:0] zext_ln6_2_cast_reg_360;
reg   [63:0] idx_1_reg_365;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] idx_1_reg_365_pp0_iter1_reg;
reg   [31:0] f1_1_reg_371;
reg   [31:0] f2_1_reg_376;
reg   [31:0] f2_1_reg_376_pp0_iter1_reg;
reg   [0:0] icmp_ln6_reg_382;
wire   [0:0] icmp_ln7_fu_187_p2;
reg   [0:0] icmp_ln7_reg_386;
reg   [0:0] icmp_ln7_reg_386_pp0_iter1_reg;
wire   [0:0] icmp_ln7_1_fu_192_p2;
reg   [0:0] icmp_ln7_1_reg_390;
reg   [0:0] icmp_ln7_1_reg_390_pp0_iter1_reg;
wire   [31:0] bitcast_ln8_fu_218_p1;
reg   [31:0] bitcast_ln8_reg_404;
wire   [0:0] icmp_ln7_2_fu_256_p2;
reg   [0:0] icmp_ln7_2_reg_415;
wire   [0:0] icmp_ln7_3_fu_262_p2;
reg   [0:0] icmp_ln7_3_reg_420;
wire   [0:0] icmp_ln7_4_fu_268_p2;
reg   [0:0] icmp_ln7_4_reg_425;
wire   [0:0] icmp_ln7_5_fu_274_p2;
reg   [0:0] icmp_ln7_5_reg_430;
wire   [0:0] and_ln7_1_fu_294_p2;
reg   [0:0] and_ln7_1_reg_435;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln8_fu_197_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln7_fu_202_p1;
wire   [63:0] zext_ln10_fu_320_p1;
wire    ap_block_pp0_stage0;
wire   [3:0] temp_addr_1_gep_fu_142_p3;
reg   [63:0] idx_fu_54;
wire   [63:0] add_ln6_fu_207_p2;
wire    ap_loop_init;
reg   [31:0] f1_fu_58;
wire   [31:0] f1_2_fu_310_p2;
reg   [31:0] ap_sig_allocacmp_f1_1;
reg   [31:0] f2_fu_62;
wire   [31:0] f2_2_fu_300_p2;
reg   [31:0] ap_sig_allocacmp_f2_1;
wire   [31:0] bitcast_ln10_fu_324_p1;
wire   [31:0] grp_fu_150_p0;
wire   [31:0] grp_fu_150_p1;
wire   [7:0] tmp_fu_228_p4;
wire   [22:0] trunc_ln7_fu_238_p1;
wire   [7:0] tmp_1_fu_242_p4;
wire   [22:0] trunc_ln7_1_fu_252_p1;
wire   [0:0] grp_fu_150_p2;
wire   [0:0] or_ln7_fu_280_p2;
wire   [0:0] and_ln7_fu_288_p2;
wire   [0:0] or_ln7_1_fu_284_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

merge_sort_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_150_p0),
    .din1(grp_fu_150_p1),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_150_p2)
);

merge_sort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        f1_fu_58 <= i1_1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((icmp_ln7_1_reg_390 == 1'd0) & (icmp_ln7_reg_386 == 1'd1)) | ((1'd1 == and_ln7_1_fu_294_p2) & (icmp_ln7_reg_386 == 1'd1))))) begin
        f1_fu_58 <= f1_2_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        f2_fu_62 <= i2_2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln7_reg_386 == 1'd0) | ((1'd0 == and_ln7_1_fu_294_p2) & (icmp_ln7_1_reg_390 == 1'd1))))) begin
        f2_fu_62 <= f2_2_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        idx_fu_54 <= indvars_iv;
    end else if (((icmp_ln6_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        idx_fu_54 <= add_ln6_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_1_reg_390 == 1'd1) & (icmp_ln7_reg_386 == 1'd1))) begin
        and_ln7_1_reg_435 <= and_ln7_1_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        f1_1_reg_371 <= ap_sig_allocacmp_f1_1;
        f2_1_reg_376 <= ap_sig_allocacmp_f2_1;
        f2_1_reg_376_pp0_iter1_reg <= f2_1_reg_376;
        icmp_ln6_reg_382 <= icmp_ln6_fu_182_p2;
        icmp_ln7_1_reg_390_pp0_iter1_reg <= icmp_ln7_1_reg_390;
        icmp_ln7_reg_386_pp0_iter1_reg <= icmp_ln7_reg_386;
        idx_1_reg_365 <= idx_fu_54;
        idx_1_reg_365_pp0_iter1_reg <= idx_1_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_reg_386 == 1'd1) & (icmp_ln6_reg_382 == 1'd1))) begin
        bitcast_ln8_reg_404 <= bitcast_ln8_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_fu_187_p2 == 1'd1))) begin
        icmp_ln7_1_reg_390 <= icmp_ln7_1_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_1_reg_390 == 1'd1) & (icmp_ln7_reg_386 == 1'd1) & (icmp_ln6_reg_382 == 1'd1))) begin
        icmp_ln7_2_reg_415 <= icmp_ln7_2_fu_256_p2;
        icmp_ln7_3_reg_420 <= icmp_ln7_3_fu_262_p2;
        icmp_ln7_4_reg_425 <= icmp_ln7_4_fu_268_p2;
        icmp_ln7_5_reg_430 <= icmp_ln7_5_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln7_reg_386 <= icmp_ln7_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln6_2_cast_reg_360[62 : 0] <= zext_ln6_2_cast_fu_154_p1[62 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = zext_ln10_fu_320_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address0 = zext_ln7_fu_202_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((icmp_ln7_1_reg_390 == 1'd0) & (icmp_ln7_reg_386 == 1'd1)) | ((1'd1 == and_ln7_1_fu_294_p2) & (icmp_ln7_reg_386 == 1'd1))))) begin
        ap_sig_allocacmp_f1_1 = f1_2_fu_310_p2;
    end else begin
        ap_sig_allocacmp_f1_1 = f1_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln7_reg_386 == 1'd0) | ((1'd0 == and_ln7_1_fu_294_p2) & (icmp_ln7_1_reg_390 == 1'd1))))) begin
        ap_sig_allocacmp_f2_1 = f2_2_fu_300_p2;
    end else begin
        ap_sig_allocacmp_f2_1 = f2_fu_62;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            temp_address0 = temp_addr_1_gep_fu_142_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            temp_address0 = idx_1_reg_365_pp0_iter1_reg;
        end else begin
            temp_address0 = 'bx;
        end
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            temp_d0 = bitcast_ln10_fu_324_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            temp_d0 = bitcast_ln8_reg_404;
        end else begin
            temp_d0 = 'bx;
        end
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln7_reg_386_pp0_iter1_reg == 1'd0) | ((1'd0 == and_ln7_1_reg_435) & (icmp_ln7_1_reg_390_pp0_iter1_reg == 1'd1)))) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((icmp_ln7_1_reg_390_pp0_iter1_reg == 1'd0) & (icmp_ln7_reg_386_pp0_iter1_reg == 1'd1)) | ((icmp_ln7_reg_386_pp0_iter1_reg == 1'd1) & (1'd1 == and_ln7_1_reg_435)))))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address1 = zext_ln8_fu_197_p1;

assign add_ln6_fu_207_p2 = (idx_fu_54 + 64'd1);

assign and_ln7_1_fu_294_p2 = (or_ln7_1_fu_284_p2 & and_ln7_fu_288_p2);

assign and_ln7_fu_288_p2 = (or_ln7_fu_280_p2 & grp_fu_150_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln10_fu_324_p1 = A_q0;

assign bitcast_ln8_fu_218_p1 = A_q1;

assign f1_2_fu_310_p2 = (f1_1_reg_371 + 32'd1);

assign f2_2_fu_300_p2 = (f2_1_reg_376 + 32'd1);

assign grp_fu_150_p0 = A_q1;

assign grp_fu_150_p1 = A_q0;

assign icmp_ln6_fu_182_p2 = (($signed(idx_fu_54) < $signed(zext_ln6_2_cast_reg_360)) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_192_p2 = (($signed(i3_1) > $signed(ap_sig_allocacmp_f2_1)) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_256_p2 = ((tmp_fu_228_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_3_fu_262_p2 = ((trunc_ln7_fu_238_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_4_fu_268_p2 = ((tmp_1_fu_242_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_5_fu_274_p2 = ((trunc_ln7_1_fu_252_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_187_p2 = (($signed(ap_sig_allocacmp_f1_1) < $signed(i2_2)) ? 1'b1 : 1'b0);

assign or_ln7_1_fu_284_p2 = (icmp_ln7_5_reg_430 | icmp_ln7_4_reg_425);

assign or_ln7_fu_280_p2 = (icmp_ln7_3_reg_420 | icmp_ln7_2_reg_415);

assign temp_addr_1_gep_fu_142_p3 = idx_1_reg_365_pp0_iter1_reg;

assign tmp_1_fu_242_p4 = {{A_q0[30:23]}};

assign tmp_fu_228_p4 = {{A_q1[30:23]}};

assign trunc_ln7_1_fu_252_p1 = A_q0[22:0];

assign trunc_ln7_fu_238_p1 = A_q1[22:0];

assign zext_ln10_fu_320_p1 = f2_1_reg_376_pp0_iter1_reg;

assign zext_ln6_2_cast_fu_154_p1 = zext_ln6_2;

assign zext_ln7_fu_202_p1 = ap_sig_allocacmp_f2_1;

assign zext_ln8_fu_197_p1 = ap_sig_allocacmp_f1_1;

always @ (posedge ap_clk) begin
    zext_ln6_2_cast_reg_360[63] <= 1'b0;
end

endmodule //merge_sort_merge_sort_Pipeline_VITIS_LOOP_6_1
