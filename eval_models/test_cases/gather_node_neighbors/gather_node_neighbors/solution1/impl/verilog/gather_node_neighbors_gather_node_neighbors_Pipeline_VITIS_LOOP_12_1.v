// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_12_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_in_degree,
        trunc_ln,
        neighbor_table_address0,
        neighbor_table_ce0,
        neighbor_table_q0,
        neighbor_table_address1,
        neighbor_table_ce1,
        neighbor_table_q1,
        node_neighbors_address0,
        node_neighbors_ce0,
        node_neighbors_we0,
        node_neighbors_d0,
        node_neighbors_address1,
        node_neighbors_ce1,
        node_neighbors_we1,
        node_neighbors_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] node_in_degree;
input  [9:0] trunc_ln;
output  [9:0] neighbor_table_address0;
output   neighbor_table_ce0;
input  [31:0] neighbor_table_q0;
output  [9:0] neighbor_table_address1;
output   neighbor_table_ce1;
input  [31:0] neighbor_table_q1;
output  [10:0] node_neighbors_address0;
output   node_neighbors_ce0;
output   node_neighbors_we0;
output  [31:0] node_neighbors_d0;
output  [10:0] node_neighbors_address1;
output   node_neighbors_ce1;
output   node_neighbors_we1;
output  [31:0] node_neighbors_d1;

reg ap_idle;
reg[9:0] neighbor_table_address0;
reg neighbor_table_ce0;
reg[9:0] neighbor_table_address1;
reg neighbor_table_ce1;
reg[10:0] node_neighbors_address0;
reg node_neighbors_ce0;
reg node_neighbors_we0;
reg[10:0] node_neighbors_address1;
reg node_neighbors_ce1;
reg node_neighbors_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln12_3_reg_409;
reg   [0:0] icmp_ln12_2_reg_400;
reg   [0:0] icmp_ln12_1_reg_391;
reg   [0:0] icmp_ln12_reg_376;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] i_1_reg_369;
wire   [0:0] icmp_ln12_fu_174_p2;
wire   [9:0] trunc_ln14_fu_180_p1;
reg   [9:0] trunc_ln14_reg_380;
wire   [0:0] icmp_ln12_1_fu_205_p2;
wire   [0:0] icmp_ln12_2_fu_238_p2;
wire   [10:0] or_ln12_2_fu_244_p2;
reg   [10:0] or_ln12_2_reg_404;
wire   [0:0] icmp_ln12_3_fu_254_p2;
wire    ap_block_pp0_stage1_11001;
reg   [10:0] lshr_ln15_1_reg_418;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln15_fu_190_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln15_1_fu_223_p1;
wire   [63:0] i_cast3_fu_260_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln15_2_fu_287_p1;
wire   [63:0] zext_ln15_3_fu_302_p1;
wire   [63:0] zext_ln15_5_fu_333_p1;
wire   [63:0] zext_ln15_4_fu_348_p1;
wire   [63:0] zext_ln12_2_fu_352_p1;
reg   [10:0] i_fu_62;
wire   [10:0] add_ln12_fu_338_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_1;
wire   [31:0] i_cast_fu_170_p1;
wire   [9:0] add_ln15_1_fu_184_p2;
wire   [10:0] or_ln12_fu_195_p2;
wire   [31:0] zext_ln12_fu_201_p1;
wire   [9:0] or_ln14_fu_211_p2;
wire   [9:0] add_ln15_2_fu_217_p2;
wire   [10:0] or_ln12_1_fu_228_p2;
wire   [31:0] zext_ln12_1_fu_234_p1;
wire   [31:0] zext_ln12_3_fu_250_p1;
wire   [12:0] shl_ln_fu_264_p3;
wire   [12:0] or_ln15_fu_271_p2;
wire   [10:0] lshr_ln_fu_277_p4;
wire   [9:0] or_ln14_1_fu_292_p2;
wire   [9:0] add_ln15_3_fu_297_p2;
wire   [12:0] add_ln15_fu_307_p2;
wire   [9:0] or_ln14_2_fu_323_p2;
wire   [9:0] add_ln15_4_fu_328_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

gather_node_neighbors_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_62 <= 11'd0;
    end else if (((icmp_ln12_reg_376 == 1'd1) & (icmp_ln12_1_reg_391 == 1'd1) & (icmp_ln12_2_reg_400 == 1'd1) & (icmp_ln12_3_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_62 <= add_ln12_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_369 <= ap_sig_allocacmp_i_1;
        icmp_ln12_reg_376 <= icmp_ln12_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_1_reg_391 <= icmp_ln12_1_fu_205_p2;
        trunc_ln14_reg_380 <= trunc_ln14_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_1_fu_205_p2 == 1'd1) & (icmp_ln12_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_2_reg_400 <= icmp_ln12_2_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_1_fu_205_p2 == 1'd1) & (icmp_ln12_fu_174_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln12_2_fu_238_p2 == 1'd1))) begin
        icmp_ln12_3_reg_409 <= icmp_ln12_3_fu_254_p2;
        or_ln12_2_reg_404[10 : 2] <= or_ln12_2_fu_244_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_reg_376 == 1'd1) & (icmp_ln12_1_reg_391 == 1'd1) & (icmp_ln12_2_reg_400 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lshr_ln15_1_reg_418 <= {{add_ln15_fu_307_p2[12:2]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln12_reg_376 == 1'd0) | ((icmp_ln12_1_reg_391 == 1'd0) | ((icmp_ln12_2_reg_400 == 1'd0) | (icmp_ln12_3_reg_409 == 1'd0)))))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln12_reg_376 == 1'd0) | ((icmp_ln12_1_reg_391 == 1'd0) | ((icmp_ln12_2_reg_400 == 1'd0) | (icmp_ln12_3_reg_409 == 1'd0)))))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_62;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            neighbor_table_address0 = zext_ln15_5_fu_333_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            neighbor_table_address0 = zext_ln15_1_fu_223_p1;
        end else begin
            neighbor_table_address0 = 'bx;
        end
    end else begin
        neighbor_table_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            neighbor_table_address1 = zext_ln15_3_fu_302_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            neighbor_table_address1 = zext_ln15_fu_190_p1;
        end else begin
            neighbor_table_address1 = 'bx;
        end
    end else begin
        neighbor_table_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        neighbor_table_ce0 = 1'b1;
    end else begin
        neighbor_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        neighbor_table_ce1 = 1'b1;
    end else begin
        neighbor_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        node_neighbors_address0 = zext_ln12_2_fu_352_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        node_neighbors_address0 = zext_ln15_2_fu_287_p1;
    end else begin
        node_neighbors_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        node_neighbors_address1 = zext_ln15_4_fu_348_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        node_neighbors_address1 = i_cast3_fu_260_p1;
    end else begin
        node_neighbors_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        node_neighbors_ce0 = 1'b1;
    end else begin
        node_neighbors_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        node_neighbors_ce1 = 1'b1;
    end else begin
        node_neighbors_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln12_reg_376 == 1'd1) & (icmp_ln12_1_reg_391 == 1'd1) & (icmp_ln12_2_reg_400 == 1'd1) & (icmp_ln12_3_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln12_reg_376 == 1'd1) & (icmp_ln12_1_reg_391 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        node_neighbors_we0 = 1'b1;
    end else begin
        node_neighbors_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln12_reg_376 == 1'd1) & (icmp_ln12_1_reg_391 == 1'd1) & (icmp_ln12_2_reg_400 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln12_reg_376 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        node_neighbors_we1 = 1'b1;
    end else begin
        node_neighbors_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_338_p2 = (i_1_reg_369 + 11'd4);

assign add_ln15_1_fu_184_p2 = (trunc_ln14_fu_180_p1 + trunc_ln);

assign add_ln15_2_fu_217_p2 = (or_ln14_fu_211_p2 + trunc_ln);

assign add_ln15_3_fu_297_p2 = (or_ln14_1_fu_292_p2 + trunc_ln);

assign add_ln15_4_fu_328_p2 = (or_ln14_2_fu_323_p2 + trunc_ln);

assign add_ln15_fu_307_p2 = (or_ln15_fu_271_p2 + 13'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign i_cast3_fu_260_p1 = i_1_reg_369;

assign i_cast_fu_170_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln12_1_fu_205_p2 = (($signed(zext_ln12_fu_201_p1) < $signed(node_in_degree)) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_238_p2 = (($signed(zext_ln12_1_fu_234_p1) < $signed(node_in_degree)) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_254_p2 = (($signed(zext_ln12_3_fu_250_p1) < $signed(node_in_degree)) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_174_p2 = (($signed(i_cast_fu_170_p1) < $signed(node_in_degree)) ? 1'b1 : 1'b0);

assign lshr_ln_fu_277_p4 = {{or_ln15_fu_271_p2[12:2]}};

assign node_neighbors_d0 = neighbor_table_q0;

assign node_neighbors_d1 = neighbor_table_q1;

assign or_ln12_1_fu_228_p2 = (ap_sig_allocacmp_i_1 | 11'd2);

assign or_ln12_2_fu_244_p2 = (ap_sig_allocacmp_i_1 | 11'd3);

assign or_ln12_fu_195_p2 = (ap_sig_allocacmp_i_1 | 11'd1);

assign or_ln14_1_fu_292_p2 = (trunc_ln14_reg_380 | 10'd2);

assign or_ln14_2_fu_323_p2 = (trunc_ln14_reg_380 | 10'd3);

assign or_ln14_fu_211_p2 = (trunc_ln14_fu_180_p1 | 10'd1);

assign or_ln15_fu_271_p2 = (shl_ln_fu_264_p3 | 13'd4);

assign shl_ln_fu_264_p3 = {{i_1_reg_369}, {2'd0}};

assign trunc_ln14_fu_180_p1 = ap_sig_allocacmp_i_1[9:0];

assign zext_ln12_1_fu_234_p1 = or_ln12_1_fu_228_p2;

assign zext_ln12_2_fu_352_p1 = or_ln12_2_reg_404;

assign zext_ln12_3_fu_250_p1 = or_ln12_2_fu_244_p2;

assign zext_ln12_fu_201_p1 = or_ln12_fu_195_p2;

assign zext_ln15_1_fu_223_p1 = add_ln15_2_fu_217_p2;

assign zext_ln15_2_fu_287_p1 = lshr_ln_fu_277_p4;

assign zext_ln15_3_fu_302_p1 = add_ln15_3_fu_297_p2;

assign zext_ln15_4_fu_348_p1 = lshr_ln15_1_reg_418;

assign zext_ln15_5_fu_333_p1 = add_ln15_4_fu_328_p2;

assign zext_ln15_fu_190_p1 = add_ln15_1_fu_184_p2;

always @ (posedge ap_clk) begin
    or_ln12_2_reg_404[1:0] <= 2'b11;
end

endmodule //gather_node_neighbors_gather_node_neighbors_Pipeline_VITIS_LOOP_12_1
