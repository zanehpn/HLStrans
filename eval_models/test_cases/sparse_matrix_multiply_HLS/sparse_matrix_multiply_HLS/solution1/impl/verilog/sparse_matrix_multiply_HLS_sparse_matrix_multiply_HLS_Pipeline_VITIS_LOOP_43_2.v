// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_43_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nnzA,
        local_column_indices_A_address0,
        local_column_indices_A_ce0,
        local_column_indices_A_we0,
        local_column_indices_A_d0,
        local_column_indices_A_3_address0,
        local_column_indices_A_3_ce0,
        local_column_indices_A_3_we0,
        local_column_indices_A_3_d0,
        local_column_indices_A_2_address0,
        local_column_indices_A_2_ce0,
        local_column_indices_A_2_we0,
        local_column_indices_A_2_d0,
        local_column_indices_A_1_address0,
        local_column_indices_A_1_ce0,
        local_column_indices_A_1_we0,
        local_column_indices_A_1_d0,
        local_values_A_V_3_address0,
        local_values_A_V_3_ce0,
        local_values_A_V_3_we0,
        local_values_A_V_3_d0,
        local_values_A_V_2_address0,
        local_values_A_V_2_ce0,
        local_values_A_V_2_we0,
        local_values_A_V_2_d0,
        local_values_A_V_1_address0,
        local_values_A_V_1_ce0,
        local_values_A_V_1_we0,
        local_values_A_V_1_d0,
        local_values_A_V_address0,
        local_values_A_V_ce0,
        local_values_A_V_we0,
        local_values_A_V_d0,
        values_A_address0,
        values_A_ce0,
        values_A_q0,
        column_indices_A_address0,
        column_indices_A_ce0,
        column_indices_A_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] nnzA;
output  [9:0] local_column_indices_A_address0;
output   local_column_indices_A_ce0;
output   local_column_indices_A_we0;
output  [31:0] local_column_indices_A_d0;
output  [9:0] local_column_indices_A_3_address0;
output   local_column_indices_A_3_ce0;
output   local_column_indices_A_3_we0;
output  [31:0] local_column_indices_A_3_d0;
output  [9:0] local_column_indices_A_2_address0;
output   local_column_indices_A_2_ce0;
output   local_column_indices_A_2_we0;
output  [31:0] local_column_indices_A_2_d0;
output  [9:0] local_column_indices_A_1_address0;
output   local_column_indices_A_1_ce0;
output   local_column_indices_A_1_we0;
output  [31:0] local_column_indices_A_1_d0;
output  [9:0] local_values_A_V_3_address0;
output   local_values_A_V_3_ce0;
output   local_values_A_V_3_we0;
output  [15:0] local_values_A_V_3_d0;
output  [9:0] local_values_A_V_2_address0;
output   local_values_A_V_2_ce0;
output   local_values_A_V_2_we0;
output  [15:0] local_values_A_V_2_d0;
output  [9:0] local_values_A_V_1_address0;
output   local_values_A_V_1_ce0;
output   local_values_A_V_1_we0;
output  [15:0] local_values_A_V_1_d0;
output  [9:0] local_values_A_V_address0;
output   local_values_A_V_ce0;
output   local_values_A_V_we0;
output  [15:0] local_values_A_V_d0;
output  [11:0] values_A_address0;
output   values_A_ce0;
input  [15:0] values_A_q0;
output  [11:0] column_indices_A_address0;
output   column_indices_A_ce0;
input  [31:0] column_indices_A_q0;

reg ap_idle;
reg local_column_indices_A_ce0;
reg local_column_indices_A_we0;
reg local_column_indices_A_3_ce0;
reg local_column_indices_A_3_we0;
reg local_column_indices_A_2_ce0;
reg local_column_indices_A_2_we0;
reg local_column_indices_A_1_ce0;
reg local_column_indices_A_1_we0;
reg local_values_A_V_3_ce0;
reg local_values_A_V_3_we0;
reg local_values_A_V_2_ce0;
reg local_values_A_V_2_we0;
reg local_values_A_V_1_ce0;
reg local_values_A_V_1_we0;
reg local_values_A_V_ce0;
reg local_values_A_V_we0;
reg values_A_ce0;
reg column_indices_A_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_228_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [9:0] lshr_ln_reg_286;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln46_fu_256_p1;
reg   [1:0] trunc_ln46_reg_296;
wire   [63:0] zext_ln43_fu_240_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln46_fu_265_p1;
reg   [30:0] i_1_fu_68;
wire   [30:0] add_ln43_fu_234_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i;
wire   [31:0] zext_ln43_1_fu_224_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_228_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_68 <= add_ln43_fu_234_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_68 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_228_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_286 <= {{ap_sig_allocacmp_i[11:2]}};
        trunc_ln46_reg_296 <= trunc_ln46_fu_256_p1;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_228_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 31'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        column_indices_A_ce0 = 1'b1;
    end else begin
        column_indices_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_column_indices_A_1_ce0 = 1'b1;
    end else begin
        local_column_indices_A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd1))) begin
        local_column_indices_A_1_we0 = 1'b1;
    end else begin
        local_column_indices_A_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_column_indices_A_2_ce0 = 1'b1;
    end else begin
        local_column_indices_A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd2))) begin
        local_column_indices_A_2_we0 = 1'b1;
    end else begin
        local_column_indices_A_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_column_indices_A_3_ce0 = 1'b1;
    end else begin
        local_column_indices_A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd3))) begin
        local_column_indices_A_3_we0 = 1'b1;
    end else begin
        local_column_indices_A_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_column_indices_A_ce0 = 1'b1;
    end else begin
        local_column_indices_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd0))) begin
        local_column_indices_A_we0 = 1'b1;
    end else begin
        local_column_indices_A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_values_A_V_1_ce0 = 1'b1;
    end else begin
        local_values_A_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd1))) begin
        local_values_A_V_1_we0 = 1'b1;
    end else begin
        local_values_A_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_values_A_V_2_ce0 = 1'b1;
    end else begin
        local_values_A_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd2))) begin
        local_values_A_V_2_we0 = 1'b1;
    end else begin
        local_values_A_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_values_A_V_3_ce0 = 1'b1;
    end else begin
        local_values_A_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd3))) begin
        local_values_A_V_3_we0 = 1'b1;
    end else begin
        local_values_A_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_values_A_V_ce0 = 1'b1;
    end else begin
        local_values_A_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln46_reg_296 == 2'd0))) begin
        local_values_A_V_we0 = 1'b1;
    end else begin
        local_values_A_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        values_A_ce0 = 1'b1;
    end else begin
        values_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_234_p2 = (ap_sig_allocacmp_i + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign column_indices_A_address0 = zext_ln43_fu_240_p1;

assign icmp_ln43_fu_228_p2 = (($signed(zext_ln43_1_fu_224_p1) < $signed(nnzA)) ? 1'b1 : 1'b0);

assign local_column_indices_A_1_address0 = zext_ln46_fu_265_p1;

assign local_column_indices_A_1_d0 = column_indices_A_q0;

assign local_column_indices_A_2_address0 = zext_ln46_fu_265_p1;

assign local_column_indices_A_2_d0 = column_indices_A_q0;

assign local_column_indices_A_3_address0 = zext_ln46_fu_265_p1;

assign local_column_indices_A_3_d0 = column_indices_A_q0;

assign local_column_indices_A_address0 = zext_ln46_fu_265_p1;

assign local_column_indices_A_d0 = column_indices_A_q0;

assign local_values_A_V_1_address0 = zext_ln46_fu_265_p1;

assign local_values_A_V_1_d0 = values_A_q0;

assign local_values_A_V_2_address0 = zext_ln46_fu_265_p1;

assign local_values_A_V_2_d0 = values_A_q0;

assign local_values_A_V_3_address0 = zext_ln46_fu_265_p1;

assign local_values_A_V_3_d0 = values_A_q0;

assign local_values_A_V_address0 = zext_ln46_fu_265_p1;

assign local_values_A_V_d0 = values_A_q0;

assign trunc_ln46_fu_256_p1 = ap_sig_allocacmp_i[1:0];

assign values_A_address0 = zext_ln43_fu_240_p1;

assign zext_ln43_1_fu_224_p1 = ap_sig_allocacmp_i;

assign zext_ln43_fu_240_p1 = ap_sig_allocacmp_i;

assign zext_ln46_fu_265_p1 = lshr_ln_reg_286;

endmodule //sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_43_2
