// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sort_radix_sort_radix_Pipeline_update_1_update_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        zext_ln63,
        bucket_address0,
        bucket_ce0,
        bucket_we0,
        bucket_d0,
        bucket_address1,
        bucket_ce1,
        bucket_q1,
        b_address0,
        b_ce0,
        b_we0,
        b_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
input  [4:0] zext_ln63;
output  [10:0] bucket_address0;
output   bucket_ce0;
output   bucket_we0;
output  [31:0] bucket_d0;
output  [10:0] bucket_address1;
output   bucket_ce1;
input  [31:0] bucket_q1;
output  [10:0] b_address0;
output   b_ce0;
output   b_we0;
output  [31:0] b_d0;

reg ap_idle;
reg a_ce0;
reg bucket_ce0;
reg bucket_we0;
reg bucket_ce1;
reg b_ce0;
reg b_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln68_fu_161_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln63_cast_fu_129_p1;
reg   [31:0] zext_ln63_cast_reg_346;
wire   [8:0] trunc_ln65_fu_207_p1;
reg   [8:0] trunc_ln65_reg_355;
reg   [31:0] a_load_reg_365;
reg   [10:0] bucket_addr_reg_370;
wire   [0:0] addr_cmp_fu_273_p2;
reg   [0:0] addr_cmp_reg_376;
wire   [63:0] zext_ln70_fu_223_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln72_fu_265_p1;
wire   [63:0] zext_ln72_2_fu_294_p1;
reg   [63:0] reuse_addr_reg_fu_60;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_64;
wire   [31:0] add_ln73_fu_299_p2;
reg   [2:0] i_fu_68;
wire   [2:0] add_ln69_fu_228_p2;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [9:0] blockID_fu_72;
wire   [9:0] select_ln65_2_fu_199_p3;
reg   [9:0] ap_sig_allocacmp_blockID_load;
reg   [11:0] indvar_flatten13_fu_76;
wire   [11:0] add_ln68_fu_167_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [0:0] icmp_ln69_fu_179_p2;
wire   [9:0] add_ln68_2_fu_193_p2;
wire   [2:0] select_ln65_fu_185_p3;
wire   [1:0] trunc_ln70_fu_211_p1;
wire   [10:0] add_ln_fu_215_p3;
wire   [31:0] ashr_ln70_fu_249_p2;
wire   [1:0] trunc_ln70_2_fu_254_p1;
wire   [10:0] bucket_indx_fu_258_p3;
wire   [31:0] reuse_select_fu_287_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sort_radix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            blockID_fu_72 <= select_ln65_2_fu_199_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            blockID_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= add_ln69_fu_228_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_76 <= add_ln68_fu_167_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_76 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_60 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            reuse_addr_reg_fu_60 <= zext_ln72_fu_265_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            reuse_reg_fu_64 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_64 <= add_ln73_fu_299_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_load_reg_365 <= a_q0;
        addr_cmp_reg_376 <= addr_cmp_fu_273_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        bucket_addr_reg_370 <= zext_ln72_fu_265_p1;
        zext_ln63_cast_reg_346[4 : 0] <= zext_ln63_cast_fu_129_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln65_reg_355 <= trunc_ln65_fu_207_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_blockID_load = 10'd0;
    end else begin
        ap_sig_allocacmp_blockID_load = blockID_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bucket_ce0 = 1'b1;
    end else begin
        bucket_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bucket_ce1 = 1'b1;
    end else begin
        bucket_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bucket_we0 = 1'b1;
    end else begin
        bucket_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln70_fu_223_p1;

assign add_ln68_2_fu_193_p2 = (ap_sig_allocacmp_blockID_load + 10'd1);

assign add_ln68_fu_167_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 12'd1);

assign add_ln69_fu_228_p2 = (select_ln65_fu_185_p3 + 3'd1);

assign add_ln73_fu_299_p2 = (reuse_select_fu_287_p3 + 32'd1);

assign add_ln_fu_215_p3 = {{trunc_ln65_fu_207_p1}, {trunc_ln70_fu_211_p1}};

assign addr_cmp_fu_273_p2 = ((reuse_addr_reg_fu_60 == zext_ln72_fu_265_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln70_fu_249_p2 = $signed(a_q0) >>> zext_ln63_cast_reg_346;

assign b_address0 = zext_ln72_2_fu_294_p1;

assign b_d0 = a_load_reg_365;

assign bucket_address0 = bucket_addr_reg_370;

assign bucket_address1 = zext_ln72_fu_265_p1;

assign bucket_d0 = (reuse_select_fu_287_p3 + 32'd1);

assign bucket_indx_fu_258_p3 = {{trunc_ln70_2_fu_254_p1}, {trunc_ln65_reg_355}};

assign icmp_ln68_fu_161_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_179_p2 = ((ap_sig_allocacmp_i_load == 3'd4) ? 1'b1 : 1'b0);

assign reuse_select_fu_287_p3 = ((addr_cmp_reg_376[0:0] == 1'b1) ? reuse_reg_fu_64 : bucket_q1);

assign select_ln65_2_fu_199_p3 = ((icmp_ln69_fu_179_p2[0:0] == 1'b1) ? add_ln68_2_fu_193_p2 : ap_sig_allocacmp_blockID_load);

assign select_ln65_fu_185_p3 = ((icmp_ln69_fu_179_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_i_load);

assign trunc_ln65_fu_207_p1 = select_ln65_2_fu_199_p3[8:0];

assign trunc_ln70_2_fu_254_p1 = ashr_ln70_fu_249_p2[1:0];

assign trunc_ln70_fu_211_p1 = select_ln65_fu_185_p3[1:0];

assign zext_ln63_cast_fu_129_p1 = zext_ln63;

assign zext_ln70_fu_223_p1 = add_ln_fu_215_p3;

assign zext_ln72_2_fu_294_p1 = reuse_select_fu_287_p3;

assign zext_ln72_fu_265_p1 = bucket_indx_fu_258_p3;

always @ (posedge ap_clk) begin
    zext_ln63_cast_reg_346[31:5] <= 27'b000000000000000000000000000;
end

endmodule //sort_radix_sort_radix_Pipeline_update_1_update_2
