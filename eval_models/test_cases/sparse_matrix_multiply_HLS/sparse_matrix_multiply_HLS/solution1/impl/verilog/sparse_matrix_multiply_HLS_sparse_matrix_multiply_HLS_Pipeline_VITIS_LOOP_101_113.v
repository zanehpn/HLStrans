// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_101_113 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln103_15,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_address1,
        C_ce1,
        C_we1,
        C_d1,
        or_ln99_2,
        accum_V_address0,
        accum_V_ce0,
        accum_V_q0,
        accum_V_1_address0,
        accum_V_1_ce0,
        accum_V_1_q0,
        accum_V_2_address0,
        accum_V_2_ce0,
        accum_V_2_q0,
        accum_V_3_address0,
        accum_V_3_ce0,
        accum_V_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] zext_ln103_15;
output  [11:0] C_address0;
output   C_ce0;
output   C_we0;
output  [15:0] C_d0;
output  [11:0] C_address1;
output   C_ce1;
output   C_we1;
output  [15:0] C_d1;
input  [5:0] or_ln99_2;
output  [9:0] accum_V_address0;
output   accum_V_ce0;
input  [15:0] accum_V_q0;
output  [9:0] accum_V_1_address0;
output   accum_V_1_ce0;
input  [15:0] accum_V_1_q0;
output  [9:0] accum_V_2_address0;
output   accum_V_2_ce0;
input  [15:0] accum_V_2_q0;
output  [9:0] accum_V_3_address0;
output   accum_V_3_ce0;
input  [15:0] accum_V_3_q0;

reg ap_idle;
reg[11:0] C_address0;
reg C_ce0;
reg C_we0;
reg[15:0] C_d0;
reg[11:0] C_address1;
reg C_ce1;
reg C_we1;
reg[15:0] C_d1;
reg accum_V_ce0;
reg accum_V_1_ce0;
reg accum_V_2_ce0;
reg accum_V_3_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_191_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] j_1_reg_335;
reg   [0:0] tmp_reg_341;
wire   [5:0] empty_fu_248_p1;
reg   [5:0] empty_reg_365;
wire    ap_block_pp0_stage1_11001;
reg   [15:0] accum_V_2_load_reg_371;
reg   [15:0] accum_V_3_load_reg_376;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln103_2_fu_229_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln103_1_fu_259_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln103_3_fu_277_p1;
wire   [63:0] zext_ln103_4_fu_294_p1;
wire   [63:0] zext_ln103_5_fu_311_p1;
reg   [6:0] j_fu_72;
wire   [6:0] add_ln101_fu_237_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_1;
wire   [3:0] tmp_s_fu_209_p4;
wire   [3:0] lshr_ln103_3_fu_199_p4;
wire   [9:0] tmp_1_fu_219_p4;
wire   [11:0] zext_ln103_fu_251_p1;
wire   [11:0] add_ln103_fu_254_p2;
wire   [5:0] or_ln101_fu_264_p2;
wire   [11:0] tmp_2_fu_270_p3;
wire   [5:0] or_ln101_1_fu_282_p2;
wire   [11:0] tmp_3_fu_287_p3;
wire   [5:0] or_ln101_2_fu_299_p2;
wire   [11:0] tmp_4_fu_304_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_191_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_72 <= add_ln101_fu_237_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_72 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_341 == 1'd0))) begin
        accum_V_2_load_reg_371 <= accum_V_2_q0;
        accum_V_3_load_reg_376 <= accum_V_3_q0;
        empty_reg_365 <= empty_fu_248_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_1_reg_335 <= ap_sig_allocacmp_j_1;
        tmp_reg_341 <= ap_sig_allocacmp_j_1[32'd6];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_address0 = zext_ln103_5_fu_311_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_address0 = zext_ln103_3_fu_277_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_address1 = zext_ln103_4_fu_294_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_address1 = zext_ln103_1_fu_259_p1;
    end else begin
        C_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_d0 = accum_V_3_load_reg_376;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_d0 = accum_V_1_q0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_d1 = accum_V_2_load_reg_371;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_d1 = accum_V_q0;
    end else begin
        C_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_341 == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_341 == 1'd0)))) begin
        C_we1 = 1'b1;
    end else begin
        C_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accum_V_1_ce0 = 1'b1;
    end else begin
        accum_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accum_V_2_ce0 = 1'b1;
    end else begin
        accum_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accum_V_3_ce0 = 1'b1;
    end else begin
        accum_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accum_V_ce0 = 1'b1;
    end else begin
        accum_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_191_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_72;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_V_1_address0 = zext_ln103_2_fu_229_p1;

assign accum_V_2_address0 = zext_ln103_2_fu_229_p1;

assign accum_V_3_address0 = zext_ln103_2_fu_229_p1;

assign accum_V_address0 = zext_ln103_2_fu_229_p1;

assign add_ln101_fu_237_p2 = (ap_sig_allocacmp_j_1 + 7'd4);

assign add_ln103_fu_254_p2 = (zext_ln103_15 + zext_ln103_fu_251_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_248_p1 = j_1_reg_335[5:0];

assign lshr_ln103_3_fu_199_p4 = {{ap_sig_allocacmp_j_1[5:2]}};

assign or_ln101_1_fu_282_p2 = (empty_reg_365 | 6'd2);

assign or_ln101_2_fu_299_p2 = (empty_reg_365 | 6'd3);

assign or_ln101_fu_264_p2 = (empty_fu_248_p1 | 6'd1);

assign tmp_1_fu_219_p4 = {{{tmp_s_fu_209_p4}, {2'd3}}, {lshr_ln103_3_fu_199_p4}};

assign tmp_2_fu_270_p3 = {{or_ln99_2}, {or_ln101_fu_264_p2}};

assign tmp_3_fu_287_p3 = {{or_ln99_2}, {or_ln101_1_fu_282_p2}};

assign tmp_4_fu_304_p3 = {{or_ln99_2}, {or_ln101_2_fu_299_p2}};

assign tmp_fu_191_p3 = ap_sig_allocacmp_j_1[32'd6];

assign tmp_s_fu_209_p4 = {{or_ln99_2[5:2]}};

assign zext_ln103_1_fu_259_p1 = add_ln103_fu_254_p2;

assign zext_ln103_2_fu_229_p1 = tmp_1_fu_219_p4;

assign zext_ln103_3_fu_277_p1 = tmp_2_fu_270_p3;

assign zext_ln103_4_fu_294_p1 = tmp_3_fu_287_p3;

assign zext_ln103_5_fu_311_p1 = tmp_4_fu_304_p3;

assign zext_ln103_fu_251_p1 = j_1_reg_335;

endmodule //sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_101_113
