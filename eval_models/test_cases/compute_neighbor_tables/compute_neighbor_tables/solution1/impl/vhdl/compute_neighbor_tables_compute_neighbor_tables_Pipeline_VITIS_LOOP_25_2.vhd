-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_25_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_edges : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edge_list_ce0 : OUT STD_LOGIC;
    edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edge_list_ce1 : OUT STD_LOGIC;
    edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_1_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_1_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_2_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_2_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_3_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_3_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_we0 : OUT STD_LOGIC;
    neighbor_table_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_25_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv39_147AE147B : STD_LOGIC_VECTOR (38 downto 0) := "000000101000111101011100001010001111011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln25_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln25_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_fu_193_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_293_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal dest_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln1_reg_309 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_309_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal neightbor_table_offsets_temp_addr_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal neightbor_table_offsets_temp_1_addr_reg_324 : STD_LOGIC_VECTOR (4 downto 0);
    signal neightbor_table_offsets_temp_2_addr_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal neightbor_table_offsets_temp_3_addr_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln28_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln27_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_64 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_fu_187_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln32_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_fu_173_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln28_fu_201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln30_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_226_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln30_fu_226_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_254_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to18 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln30_fu_226_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component compute_neighbor_tables_urem_32ns_6ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_neighbor_tables_mul_32ns_34ns_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component compute_neighbor_tables_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_neighbor_tables_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_32ns_6ns_32_36_1_U12 : component compute_neighbor_tables_urem_32ns_6ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => edge_list_q1,
        din1 => grp_fu_217_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    mul_32ns_34ns_39_1_1_U13 : component compute_neighbor_tables_mul_32ns_34ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln30_fu_226_p0,
        din1 => mul_ln30_fu_226_p1,
        dout => mul_ln30_fu_226_p2);

    mux_42_32_1_1_U14 : component compute_neighbor_tables_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => neightbor_table_offsets_temp_q0,
        din1 => neightbor_table_offsets_temp_1_q0,
        din2 => neightbor_table_offsets_temp_2_q0,
        din3 => neightbor_table_offsets_temp_3_q0,
        din4 => trunc_ln1_reg_309_pp0_iter18_reg,
        dout => offset_fu_254_p6);

    flow_control_loop_pipe_sequential_init_U : component compute_neighbor_tables_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_181_p2 = ap_const_lv1_1))) then 
                    i_fu_64 <= add_ln25_fu_187_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln25_reg_289 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                dest_reg_303 <= edge_list_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_289 <= icmp_ln25_fu_181_p2;
                neightbor_table_offsets_temp_1_addr_reg_324 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
                neightbor_table_offsets_temp_2_addr_reg_329 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
                neightbor_table_offsets_temp_3_addr_reg_334 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
                neightbor_table_offsets_temp_addr_reg_319 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
                    tmp_1_reg_293_pp0_iter10_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter9_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter11_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter10_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter12_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter11_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter13_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter12_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter14_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter13_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter15_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter14_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter16_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter15_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter17_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter16_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter1_reg(10 downto 1) <= tmp_1_reg_293(10 downto 1);
                    tmp_1_reg_293_pp0_iter2_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter1_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter3_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter2_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter4_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter3_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter5_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter4_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter6_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter5_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter7_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter6_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter8_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter7_reg(10 downto 1);
                    tmp_1_reg_293_pp0_iter9_reg(10 downto 1) <= tmp_1_reg_293_pp0_iter8_reg(10 downto 1);
                trunc_ln1_reg_309 <= mul_ln30_fu_226_p2(38 downto 37);
                trunc_ln1_reg_309_pp0_iter10_reg <= trunc_ln1_reg_309_pp0_iter9_reg;
                trunc_ln1_reg_309_pp0_iter11_reg <= trunc_ln1_reg_309_pp0_iter10_reg;
                trunc_ln1_reg_309_pp0_iter12_reg <= trunc_ln1_reg_309_pp0_iter11_reg;
                trunc_ln1_reg_309_pp0_iter13_reg <= trunc_ln1_reg_309_pp0_iter12_reg;
                trunc_ln1_reg_309_pp0_iter14_reg <= trunc_ln1_reg_309_pp0_iter13_reg;
                trunc_ln1_reg_309_pp0_iter15_reg <= trunc_ln1_reg_309_pp0_iter14_reg;
                trunc_ln1_reg_309_pp0_iter16_reg <= trunc_ln1_reg_309_pp0_iter15_reg;
                trunc_ln1_reg_309_pp0_iter17_reg <= trunc_ln1_reg_309_pp0_iter16_reg;
                trunc_ln1_reg_309_pp0_iter18_reg <= trunc_ln1_reg_309_pp0_iter17_reg;
                trunc_ln1_reg_309_pp0_iter2_reg <= trunc_ln1_reg_309;
                trunc_ln1_reg_309_pp0_iter3_reg <= trunc_ln1_reg_309_pp0_iter2_reg;
                trunc_ln1_reg_309_pp0_iter4_reg <= trunc_ln1_reg_309_pp0_iter3_reg;
                trunc_ln1_reg_309_pp0_iter5_reg <= trunc_ln1_reg_309_pp0_iter4_reg;
                trunc_ln1_reg_309_pp0_iter6_reg <= trunc_ln1_reg_309_pp0_iter5_reg;
                trunc_ln1_reg_309_pp0_iter7_reg <= trunc_ln1_reg_309_pp0_iter6_reg;
                trunc_ln1_reg_309_pp0_iter8_reg <= trunc_ln1_reg_309_pp0_iter7_reg;
                trunc_ln1_reg_309_pp0_iter9_reg <= trunc_ln1_reg_309_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln25_fu_181_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_1_reg_293(10 downto 1) <= tmp_1_fu_193_p3(10 downto 1);
            end if;
        end if;
    end process;
    tmp_1_reg_293(0) <= '0';
    tmp_1_reg_293_pp0_iter1_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter2_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter3_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter4_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter5_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter6_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter7_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter8_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter9_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter10_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter11_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter12_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter13_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter14_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter15_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter16_reg(0) <= '0';
    tmp_1_reg_293_pp0_iter17_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to18, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to18 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln25_fu_187_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv31_1));
    add_ln32_fu_272_p2 <= std_logic_vector(unsigned(offset_fu_254_p6) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln25_reg_289)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln25_reg_289 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to18_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to18 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to18 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_64;
        end if; 
    end process;

    edge_list_address0 <= zext_ln27_fu_242_p1(11 - 1 downto 0);
    edge_list_address1 <= zext_ln28_fu_207_p1(11 - 1 downto 0);

    edge_list_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            edge_list_ce0 <= ap_const_logic_1;
        else 
            edge_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            edge_list_ce1 <= ap_const_logic_1;
        else 
            edge_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_217_p1 <= ap_const_lv32_19(6 - 1 downto 0);
    icmp_ln25_fu_181_p2 <= "1" when (signed(zext_ln25_fu_177_p1) < signed(num_edges)) else "0";
    mul_ln30_fu_226_p0 <= mul_ln30_fu_226_p00(32 - 1 downto 0);
    mul_ln30_fu_226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dest_reg_303),39));
    mul_ln30_fu_226_p1 <= ap_const_lv39_147AE147B(34 - 1 downto 0);
    neighbor_table_address0 <= zext_ln31_fu_267_p1(10 - 1 downto 0);

    neighbor_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            neighbor_table_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_table_d0 <= edge_list_q0;

    neighbor_table_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            neighbor_table_we0 <= ap_const_logic_1;
        else 
            neighbor_table_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_1_addr_reg_324, ap_block_pp0_stage0, zext_ln30_fu_246_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                neightbor_table_offsets_temp_1_address0 <= neightbor_table_offsets_temp_1_addr_reg_324;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                neightbor_table_offsets_temp_1_address0 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
            else 
                neightbor_table_offsets_temp_1_address0 <= "XXXXX";
            end if;
        else 
            neightbor_table_offsets_temp_1_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            neightbor_table_offsets_temp_1_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_1_d0 <= add_ln32_fu_272_p2;

    neightbor_table_offsets_temp_1_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln1_reg_309_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln1_reg_309_pp0_iter18_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            neightbor_table_offsets_temp_1_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_2_addr_reg_329, ap_block_pp0_stage0, zext_ln30_fu_246_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                neightbor_table_offsets_temp_2_address0 <= neightbor_table_offsets_temp_2_addr_reg_329;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                neightbor_table_offsets_temp_2_address0 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
            else 
                neightbor_table_offsets_temp_2_address0 <= "XXXXX";
            end if;
        else 
            neightbor_table_offsets_temp_2_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            neightbor_table_offsets_temp_2_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_2_d0 <= add_ln32_fu_272_p2;

    neightbor_table_offsets_temp_2_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln1_reg_309_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln1_reg_309_pp0_iter18_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            neightbor_table_offsets_temp_2_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_3_addr_reg_334, ap_block_pp0_stage0, zext_ln30_fu_246_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                neightbor_table_offsets_temp_3_address0 <= neightbor_table_offsets_temp_3_addr_reg_334;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                neightbor_table_offsets_temp_3_address0 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
            else 
                neightbor_table_offsets_temp_3_address0 <= "XXXXX";
            end if;
        else 
            neightbor_table_offsets_temp_3_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            neightbor_table_offsets_temp_3_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_3_d0 <= add_ln32_fu_272_p2;

    neightbor_table_offsets_temp_3_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln1_reg_309_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln1_reg_309_pp0_iter18_reg = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            neightbor_table_offsets_temp_3_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_addr_reg_319, ap_block_pp0_stage0, zext_ln30_fu_246_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                neightbor_table_offsets_temp_address0 <= neightbor_table_offsets_temp_addr_reg_319;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                neightbor_table_offsets_temp_address0 <= zext_ln30_fu_246_p1(5 - 1 downto 0);
            else 
                neightbor_table_offsets_temp_address0 <= "XXXXX";
            end if;
        else 
            neightbor_table_offsets_temp_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            neightbor_table_offsets_temp_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_d0 <= add_ln32_fu_272_p2;

    neightbor_table_offsets_temp_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln1_reg_309_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln1_reg_309_pp0_iter18_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            neightbor_table_offsets_temp_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_fu_201_p2 <= (tmp_1_fu_193_p3 or ap_const_lv11_1);
    tmp_1_fu_193_p3 <= (trunc_ln25_fu_173_p1 & ap_const_lv1_0);
    trunc_ln25_fu_173_p1 <= ap_sig_allocacmp_i_1(10 - 1 downto 0);
    zext_ln25_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    zext_ln27_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_293_pp0_iter17_reg),64));
    zext_ln28_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_201_p2),64));
    zext_ln30_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_217_p2),64));
    zext_ln31_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_fu_254_p6),64));
end behav;
