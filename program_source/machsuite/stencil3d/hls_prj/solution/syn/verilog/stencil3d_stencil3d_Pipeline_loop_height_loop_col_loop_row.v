// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        orig_address0,
        orig_ce0,
        orig_q0,
        orig_address1,
        orig_ce1,
        orig_q1,
        C_load,
        C_load_1,
        sol_address0,
        sol_ce0,
        sol_we0,
        sol_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] orig_address0;
output   orig_ce0;
input  [31:0] orig_q0;
output  [13:0] orig_address1;
output   orig_ce1;
input  [31:0] orig_q1;
input  [31:0] C_load;
input  [31:0] C_load_1;
output  [13:0] sol_address0;
output   sol_ce0;
output   sol_we0;
output  [31:0] sol_d0;

reg ap_idle;
reg[13:0] orig_address0;
reg orig_ce0;
reg[13:0] orig_address1;
reg orig_ce1;
reg sol_ce0;
reg sol_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln36_reg_808;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [31:0] reg_190;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] reg_195;
reg   [4:0] j_1_reg_795;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [4:0] i_1_reg_802;
wire   [0:0] icmp_ln36_fu_234_p2;
reg   [8:0] indvar_flatten26_load_reg_812;
wire   [0:0] icmp_ln37_fu_252_p2;
reg   [0:0] icmp_ln37_reg_817;
wire   [4:0] indvars_iv_next3383_fu_266_p2;
reg   [4:0] indvars_iv_next3383_reg_828;
wire   [0:0] and_ln36_fu_298_p2;
reg   [0:0] and_ln36_reg_834;
wire   [4:0] select_ln36_7_fu_304_p3;
reg   [4:0] select_ln36_7_reg_842;
wire   [4:0] indvars_iv_next19_dup_fu_312_p2;
reg   [4:0] indvars_iv_next19_dup_reg_848;
wire   [3:0] select_ln11_fu_324_p3;
reg   [3:0] select_ln11_reg_855;
wire   [4:0] select_ln37_fu_340_p3;
reg   [4:0] select_ln37_reg_864;
wire   [63:0] zext_ln39_fu_358_p1;
reg   [63:0] zext_ln39_reg_869;
reg   [63:0] zext_ln39_reg_869_pp0_iter1_reg;
wire   [9:0] select_ln11_3_fu_648_p3;
reg   [9:0] select_ln11_3_reg_894;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] add_ln44_5_fu_685_p2;
reg   [31:0] add_ln44_5_reg_909;
wire   [31:0] mul0_fu_691_p2;
reg   [31:0] mul0_reg_914;
wire  signed [31:0] sum1_fu_736_p2;
reg  signed [31:0] sum1_reg_924;
wire   [31:0] mul1_fu_741_p2;
reg   [31:0] mul1_reg_929;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln43_fu_373_p1;
wire   [63:0] zext_ln44_fu_460_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln45_fu_478_p1;
wire   [63:0] zext_ln40_1_fu_662_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln41_fu_674_p1;
wire   [63:0] zext_ln42_fu_702_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] k_fu_80;
wire   [3:0] add_ln44_fu_378_p2;
wire    ap_loop_init;
reg   [4:0] j_fu_84;
reg   [8:0] indvar_flatten26_fu_88;
wire   [8:0] select_ln37_1_fu_712_p3;
reg   [4:0] i_fu_92;
reg   [13:0] indvar_flatten71_fu_96;
wire   [13:0] add_ln36_fu_240_p2;
wire   [4:0] add_ln43_fu_272_p2;
wire   [0:0] icmp_ln38_fu_292_p2;
wire   [0:0] xor_ln36_fu_286_p2;
wire   [4:0] select_ln36_fu_258_p3;
wire   [0:0] or_ln11_fu_318_p2;
wire   [4:0] select_ln36_6_fu_278_p3;
wire   [13:0] add_ln2_fu_348_p4;
wire   [4:0] select_ln11_4_fu_332_p3;
wire   [13:0] add_ln43_2_fu_363_p4;
wire   [9:0] tmp_mid_fu_410_p3;
wire   [9:0] tmp_fu_404_p3;
wire   [9:0] tmp_mid1_fu_417_p3;
wire   [9:0] select_ln36_8_fu_423_p3;
wire   [9:0] select_ln11_5_fu_430_p3;
wire   [13:0] or_ln44_mid2_v_fu_437_p3;
wire   [13:0] or_ln11_1_fu_445_p2;
wire   [13:0] zext_ln40_4_fu_451_p1;
wire   [13:0] add_ln44_1_fu_454_p2;
wire   [3:0] add_ln45_fu_465_p2;
wire   [13:0] add_ln45_1_fu_470_p4;
wire   [9:0] tmp_2_fu_483_p3;
wire  signed [5:0] zext_ln40_2_cast_fu_499_p3;
wire   [9:0] zext_ln40_2_fu_506_p1;
wire  signed [9:0] sext_ln41_fu_516_p1;
wire   [9:0] or_ln42_fu_490_p2;
wire   [9:0] zext_ln40_fu_496_p1;
wire   [9:0] p_mid_fu_532_p3;
wire   [9:0] or_ln42_1_fu_546_p2;
wire   [9:0] add_ln40_1_fu_559_p2;
wire   [9:0] add_ln40_fu_510_p2;
wire   [9:0] add_ln41_1_fu_572_p2;
wire   [9:0] add_ln41_fu_520_p2;
wire   [9:0] add_ln42_1_fu_585_p2;
wire   [9:0] add_ln42_fu_526_p2;
wire  signed [5:0] zext_ln40_5_cast_fu_601_p3;
wire   [9:0] zext_ln40_5_fu_608_p1;
wire   [9:0] select_ln36_1_fu_539_p3;
wire   [9:0] add_ln40_3_fu_612_p2;
wire   [9:0] select_ln36_3_fu_565_p3;
wire  signed [9:0] sext_ln41_1_fu_625_p1;
wire   [9:0] add_ln41_3_fu_629_p2;
wire   [9:0] select_ln36_4_fu_578_p3;
wire   [9:0] select_ln36_2_fu_552_p3;
wire   [9:0] zext_ln40_3_fu_598_p1;
wire   [9:0] add_ln42_3_fu_642_p2;
wire   [9:0] select_ln36_5_fu_591_p3;
wire   [9:0] select_ln11_1_fu_618_p3;
wire   [13:0] add_ln40_2_fu_655_p3;
wire   [9:0] select_ln11_2_fu_635_p3;
wire   [13:0] add_ln41_2_fu_667_p3;
wire   [31:0] add_ln44_4_fu_679_p2;
wire   [13:0] add_ln42_2_fu_696_p3;
wire   [8:0] add_ln37_fu_707_p2;
wire   [31:0] add_ln44_2_fu_724_p0;
wire   [31:0] add_ln44_2_fu_724_p2;
wire   [31:0] add_ln44_3_fu_730_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_83;
reg    ap_condition_94;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil3d_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(reg_190),
    .din1(C_load),
    .dout(mul0_fu_691_p2)
);

stencil3d_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(C_load_1),
    .din1(sum1_reg_924),
    .dout(mul1_fu_741_p2)
);

stencil3d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_92 <= 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_234_p2 == 1'd0))) begin
        i_fu_92 <= select_ln36_7_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten26_fu_88 <= 9'd0;
        end else if (((icmp_ln36_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten26_fu_88 <= select_ln37_1_fu_712_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten71_fu_96 <= 14'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_234_p2 == 1'd0))) begin
        indvar_flatten71_fu_96 <= add_ln36_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_84 <= 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_234_p2 == 1'd0))) begin
        j_fu_84 <= select_ln37_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_fu_80 <= 4'd1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_234_p2 == 1'd0))) begin
        k_fu_80 <= add_ln44_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln36_reg_808 == 1'd0)) begin
        if ((1'b1 == ap_condition_94)) begin
            reg_190 <= orig_q0;
        end else if ((1'b1 == ap_condition_83)) begin
            reg_190 <= orig_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln36_reg_808 == 1'd0)) begin
        if ((1'b1 == ap_condition_94)) begin
            reg_195 <= orig_q1;
        end else if ((1'b1 == ap_condition_83)) begin
            reg_195 <= orig_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_808 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln44_5_reg_909 <= add_ln44_5_fu_685_p2;
        mul0_reg_914 <= mul0_fu_691_p2;
        select_ln11_3_reg_894 <= select_ln11_3_fu_648_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_fu_234_p2 == 1'd0))) begin
        and_ln36_reg_834 <= and_ln36_fu_298_p2;
        icmp_ln37_reg_817 <= icmp_ln37_fu_252_p2;
        indvar_flatten26_load_reg_812 <= indvar_flatten26_fu_88;
        indvars_iv_next19_dup_reg_848 <= indvars_iv_next19_dup_fu_312_p2;
        indvars_iv_next3383_reg_828 <= indvars_iv_next3383_fu_266_p2;
        select_ln11_reg_855 <= select_ln11_fu_324_p3;
        select_ln36_7_reg_842 <= select_ln36_7_fu_304_p3;
        select_ln37_reg_864 <= select_ln37_fu_340_p3;
        zext_ln39_reg_869[13 : 0] <= zext_ln39_fu_358_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_1_reg_802 <= i_fu_92;
        icmp_ln36_reg_808 <= icmp_ln36_fu_234_p2;
        j_1_reg_795 <= j_fu_84;
        sum1_reg_924 <= sum1_fu_736_p2;
        zext_ln39_reg_869_pp0_iter1_reg[13 : 0] <= zext_ln39_reg_869[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul1_reg_929 <= mul1_fu_741_p2;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_808 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_address0 = zext_ln42_fu_702_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        orig_address0 = zext_ln40_1_fu_662_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        orig_address0 = zext_ln44_fu_460_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_address0 = zext_ln43_fu_373_p1;
    end else begin
        orig_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            orig_address1 = zext_ln41_fu_674_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            orig_address1 = zext_ln45_fu_478_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            orig_address1 = zext_ln39_fu_358_p1;
        end else begin
            orig_address1 = 'bx;
        end
    end else begin
        orig_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_ce0 = 1'b1;
    end else begin
        orig_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_ce1 = 1'b1;
    end else begin
        orig_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sol_ce0 = 1'b1;
    end else begin
        sol_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sol_we0 = 1'b1;
    end else begin
        sol_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2_fu_348_p4 = {{{select_ln36_7_fu_304_p3}, {select_ln37_fu_340_p3}}, {select_ln11_fu_324_p3}};

assign add_ln36_fu_240_p2 = (indvar_flatten71_fu_96 + 14'd1);

assign add_ln37_fu_707_p2 = (indvar_flatten26_load_reg_812 + 9'd1);

assign add_ln40_1_fu_559_p2 = (p_mid_fu_532_p3 + 10'd33);

assign add_ln40_2_fu_655_p3 = {{select_ln11_1_fu_618_p3}, {select_ln11_reg_855}};

assign add_ln40_3_fu_612_p2 = (zext_ln40_5_fu_608_p1 + select_ln36_1_fu_539_p3);

assign add_ln40_fu_510_p2 = (zext_ln40_2_fu_506_p1 + tmp_2_fu_483_p3);

assign add_ln41_1_fu_572_p2 = ($signed(p_mid_fu_532_p3) + $signed(10'd993));

assign add_ln41_2_fu_667_p3 = {{select_ln11_2_fu_635_p3}, {select_ln11_reg_855}};

assign add_ln41_3_fu_629_p2 = ($signed(sext_ln41_1_fu_625_p1) + $signed(select_ln36_1_fu_539_p3));

assign add_ln41_fu_520_p2 = ($signed(sext_ln41_fu_516_p1) + $signed(tmp_2_fu_483_p3));

assign add_ln42_1_fu_585_p2 = (or_ln42_1_fu_546_p2 + 10'd1);

assign add_ln42_2_fu_696_p3 = {{select_ln11_3_reg_894}, {select_ln11_reg_855}};

assign add_ln42_3_fu_642_p2 = (select_ln36_2_fu_552_p3 + zext_ln40_3_fu_598_p1);

assign add_ln42_fu_526_p2 = (or_ln42_fu_490_p2 + zext_ln40_fu_496_p1);

assign add_ln43_2_fu_363_p4 = {{{select_ln36_7_fu_304_p3}, {select_ln11_4_fu_332_p3}}, {select_ln11_fu_324_p3}};

assign add_ln43_fu_272_p2 = ($signed(j_fu_84) + $signed(5'd31));

assign add_ln44_1_fu_454_p2 = (or_ln11_1_fu_445_p2 + zext_ln40_4_fu_451_p1);

assign add_ln44_2_fu_724_p0 = reg_190;

assign add_ln44_2_fu_724_p2 = (add_ln44_2_fu_724_p0 + orig_q0);

assign add_ln44_3_fu_730_p2 = (add_ln44_2_fu_724_p2 + reg_195);

assign add_ln44_4_fu_679_p2 = (orig_q0 + orig_q1);

assign add_ln44_5_fu_685_p2 = (add_ln44_4_fu_679_p2 + reg_195);

assign add_ln44_fu_378_p2 = (select_ln11_fu_324_p3 + 4'd1);

assign add_ln45_1_fu_470_p4 = {{{select_ln36_7_reg_842}, {select_ln37_reg_864}}, {add_ln45_fu_465_p2}};

assign add_ln45_fu_465_p2 = ($signed(select_ln11_reg_855) + $signed(4'd15));

assign and_ln36_fu_298_p2 = (xor_ln36_fu_286_p2 & icmp_ln38_fu_292_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_83 = ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_94 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign icmp_ln36_fu_234_p2 = ((indvar_flatten71_fu_96 == 14'd12600) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_252_p2 = ((indvar_flatten26_fu_88 == 9'd420) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_292_p2 = ((k_fu_80 == 4'd15) ? 1'b1 : 1'b0);

assign indvars_iv_next19_dup_fu_312_p2 = (select_ln36_fu_258_p3 + 5'd1);

assign indvars_iv_next3383_fu_266_p2 = (i_fu_92 + 5'd1);

assign or_ln11_1_fu_445_p2 = (or_ln44_mid2_v_fu_437_p3 | 14'd1);

assign or_ln11_fu_318_p2 = (icmp_ln37_fu_252_p2 | and_ln36_fu_298_p2);

assign or_ln42_1_fu_546_p2 = (p_mid_fu_532_p3 | 10'd1);

assign or_ln42_fu_490_p2 = (tmp_2_fu_483_p3 | 10'd1);

assign or_ln44_mid2_v_fu_437_p3 = {{select_ln11_5_fu_430_p3}, {4'd0}};

assign p_mid_fu_532_p3 = {{indvars_iv_next3383_reg_828}, {5'd0}};

assign select_ln11_1_fu_618_p3 = ((and_ln36_reg_834[0:0] == 1'b1) ? add_ln40_3_fu_612_p2 : select_ln36_3_fu_565_p3);

assign select_ln11_2_fu_635_p3 = ((and_ln36_reg_834[0:0] == 1'b1) ? add_ln41_3_fu_629_p2 : select_ln36_4_fu_578_p3);

assign select_ln11_3_fu_648_p3 = ((and_ln36_reg_834[0:0] == 1'b1) ? add_ln42_3_fu_642_p2 : select_ln36_5_fu_591_p3);

assign select_ln11_4_fu_332_p3 = ((and_ln36_fu_298_p2[0:0] == 1'b1) ? select_ln36_fu_258_p3 : select_ln36_6_fu_278_p3);

assign select_ln11_5_fu_430_p3 = ((and_ln36_reg_834[0:0] == 1'b1) ? tmp_mid1_fu_417_p3 : select_ln36_8_fu_423_p3);

assign select_ln11_fu_324_p3 = ((or_ln11_fu_318_p2[0:0] == 1'b1) ? 4'd1 : k_fu_80);

assign select_ln36_1_fu_539_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? p_mid_fu_532_p3 : tmp_2_fu_483_p3);

assign select_ln36_2_fu_552_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? or_ln42_1_fu_546_p2 : or_ln42_fu_490_p2);

assign select_ln36_3_fu_565_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? add_ln40_1_fu_559_p2 : add_ln40_fu_510_p2);

assign select_ln36_4_fu_578_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? add_ln41_1_fu_572_p2 : add_ln41_fu_520_p2);

assign select_ln36_5_fu_591_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? add_ln42_1_fu_585_p2 : add_ln42_fu_526_p2);

assign select_ln36_6_fu_278_p3 = ((icmp_ln37_fu_252_p2[0:0] == 1'b1) ? 5'd0 : add_ln43_fu_272_p2);

assign select_ln36_7_fu_304_p3 = ((icmp_ln37_fu_252_p2[0:0] == 1'b1) ? indvars_iv_next3383_fu_266_p2 : i_fu_92);

assign select_ln36_8_fu_423_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? tmp_mid_fu_410_p3 : tmp_fu_404_p3);

assign select_ln36_fu_258_p3 = ((icmp_ln37_fu_252_p2[0:0] == 1'b1) ? 5'd1 : j_fu_84);

assign select_ln37_1_fu_712_p3 = ((icmp_ln37_reg_817[0:0] == 1'b1) ? 9'd1 : add_ln37_fu_707_p2);

assign select_ln37_fu_340_p3 = ((and_ln36_fu_298_p2[0:0] == 1'b1) ? indvars_iv_next19_dup_fu_312_p2 : select_ln36_fu_258_p3);

assign sext_ln41_1_fu_625_p1 = zext_ln40_5_cast_fu_601_p3;

assign sext_ln41_fu_516_p1 = zext_ln40_2_cast_fu_499_p3;

assign sol_address0 = zext_ln39_reg_869_pp0_iter1_reg;

assign sol_d0 = (mul1_reg_929 + mul0_reg_914);

assign sum1_fu_736_p2 = (add_ln44_5_reg_909 + add_ln44_3_fu_730_p2);

assign tmp_2_fu_483_p3 = {{i_1_reg_802}, {5'd0}};

assign tmp_fu_404_p3 = {{i_1_reg_802}, {j_1_reg_795}};

assign tmp_mid1_fu_417_p3 = {{select_ln36_7_reg_842}, {indvars_iv_next19_dup_reg_848}};

assign tmp_mid_fu_410_p3 = {{indvars_iv_next3383_reg_828}, {5'd1}};

assign xor_ln36_fu_286_p2 = (icmp_ln37_fu_252_p2 ^ 1'd1);

assign zext_ln39_fu_358_p1 = add_ln2_fu_348_p4;

assign zext_ln40_1_fu_662_p1 = add_ln40_2_fu_655_p3;

assign zext_ln40_2_cast_fu_499_p3 = {{1'd1}, {j_1_reg_795}};

assign zext_ln40_2_fu_506_p1 = $unsigned(zext_ln40_2_cast_fu_499_p3);

assign zext_ln40_3_fu_598_p1 = indvars_iv_next19_dup_reg_848;

assign zext_ln40_4_fu_451_p1 = select_ln11_reg_855;

assign zext_ln40_5_cast_fu_601_p3 = {{1'd1}, {indvars_iv_next19_dup_reg_848}};

assign zext_ln40_5_fu_608_p1 = $unsigned(zext_ln40_5_cast_fu_601_p3);

assign zext_ln40_fu_496_p1 = j_1_reg_795;

assign zext_ln41_fu_674_p1 = add_ln41_2_fu_667_p3;

assign zext_ln42_fu_702_p1 = add_ln42_2_fu_696_p3;

assign zext_ln43_fu_373_p1 = add_ln43_2_fu_363_p4;

assign zext_ln44_fu_460_p1 = add_ln44_1_fu_454_p2;

assign zext_ln45_fu_478_p1 = add_ln45_1_fu_470_p4;

always @ (posedge ap_clk) begin
    zext_ln39_reg_869[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln39_reg_869_pp0_iter1_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //stencil3d_stencil3d_Pipeline_loop_height_loop_col_loop_row
