-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_rj_sbox is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes256_encrypt_ecb_rj_sbox is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_63 : STD_LOGIC_VECTOR (7 downto 0) := "01100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln37_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rj_sbox_Pipeline_glog_fu_73_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal targetBlock_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln15_fu_102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln15_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln15_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rj_sbox_Pipeline_glog_fu_73_ap_start : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_glog_fu_73_ap_done : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_glog_fu_73_ap_idle : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_glog_fu_73_ap_ready : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_glog_fu_73_i_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rj_sbox_Pipeline_glog_fu_73_i_out_ap_vld : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_alog_fu_80_ap_start : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_alog_fu_80_ap_done : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_alog_fu_80_ap_idle : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_alog_fu_80_ap_ready : STD_LOGIC;
    signal grp_rj_sbox_Pipeline_alog_fu_80_atb_9_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rj_sbox_Pipeline_alog_fu_80_atb_9_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_y_5_phi_fu_63_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_5_reg_58 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_rj_sbox_Pipeline_glog_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal i_loc_fu_48 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rj_sbox_Pipeline_alog_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal atb_9_loc_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_95_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_fu_119_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_123_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_1_fu_139_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_143_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_fu_161_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_165_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_1_fu_183_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_187_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_fu_131_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_fu_153_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_1_fu_205_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_4_fu_197_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_3_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_fu_175_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_4_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_2_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_rj_sbox_Pipeline_glog IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (7 downto 0);
        i_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes256_encrypt_ecb_rj_sbox_Pipeline_alog IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_ln15 : IN STD_LOGIC_VECTOR (7 downto 0);
        atb_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        atb_9_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_rj_sbox_Pipeline_glog_fu_73 : component aes256_encrypt_ecb_rj_sbox_Pipeline_glog
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rj_sbox_Pipeline_glog_fu_73_ap_start,
        ap_done => grp_rj_sbox_Pipeline_glog_fu_73_ap_done,
        ap_idle => grp_rj_sbox_Pipeline_glog_fu_73_ap_idle,
        ap_ready => grp_rj_sbox_Pipeline_glog_fu_73_ap_ready,
        x => x,
        i_out => grp_rj_sbox_Pipeline_glog_fu_73_i_out,
        i_out_ap_vld => grp_rj_sbox_Pipeline_glog_fu_73_i_out_ap_vld,
        ap_return => grp_rj_sbox_Pipeline_glog_fu_73_ap_return);

    grp_rj_sbox_Pipeline_alog_fu_80 : component aes256_encrypt_ecb_rj_sbox_Pipeline_alog
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rj_sbox_Pipeline_alog_fu_80_ap_start,
        ap_done => grp_rj_sbox_Pipeline_alog_fu_80_ap_done,
        ap_idle => grp_rj_sbox_Pipeline_alog_fu_80_ap_idle,
        ap_ready => grp_rj_sbox_Pipeline_alog_fu_80_ap_ready,
        sub_ln15 => sub_ln15_reg_261,
        atb_9_out => grp_rj_sbox_Pipeline_alog_fu_80_atb_9_out,
        atb_9_out_ap_vld => grp_rj_sbox_Pipeline_alog_fu_80_atb_9_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_preg <= xor_ln49_fu_229_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_rj_sbox_Pipeline_alog_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rj_sbox_Pipeline_alog_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln15_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_rj_sbox_Pipeline_alog_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rj_sbox_Pipeline_alog_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_rj_sbox_Pipeline_alog_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rj_sbox_Pipeline_glog_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rj_sbox_Pipeline_glog_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln37_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_rj_sbox_Pipeline_glog_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rj_sbox_Pipeline_glog_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_rj_sbox_Pipeline_glog_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_5_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_5_reg_58 <= ap_const_lv8_1;
            elsif (((icmp_ln37_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_5_reg_58 <= ap_const_lv8_0;
            elsif (((icmp_ln15_reg_266 = ap_const_lv1_0) and (icmp_ln37_reg_252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_5_reg_58 <= atb_9_loc_fu_44;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_rj_sbox_Pipeline_alog_fu_80_atb_9_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                atb_9_loc_fu_44 <= grp_rj_sbox_Pipeline_alog_fu_80_atb_9_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_rj_sbox_Pipeline_glog_fu_73_i_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_loc_fu_48 <= grp_rj_sbox_Pipeline_glog_fu_73_i_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln15_reg_266 <= icmp_ln15_fu_109_p2;
                sub_ln15_reg_261 <= sub_ln15_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln37_reg_252 <= icmp_ln37_fu_86_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                targetBlock_reg_256 <= grp_rj_sbox_Pipeline_glog_fu_73_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln37_fu_86_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln15_fu_109_p2, grp_rj_sbox_Pipeline_glog_fu_73_ap_done, grp_rj_sbox_Pipeline_alog_fu_80_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln37_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((icmp_ln37_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_rj_sbox_Pipeline_glog_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln15_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_rj_sbox_Pipeline_alog_fu_80_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_rj_sbox_Pipeline_glog_fu_73_ap_done)
    begin
        if ((grp_rj_sbox_Pipeline_glog_fu_73_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_rj_sbox_Pipeline_alog_fu_80_ap_done)
    begin
        if ((grp_rj_sbox_Pipeline_alog_fu_80_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_y_5_phi_fu_63_p6_assign_proc : process(icmp_ln37_reg_252, icmp_ln15_reg_266, y_5_reg_58, ap_CS_fsm_state5, atb_9_loc_fu_44)
    begin
        if (((icmp_ln15_reg_266 = ap_const_lv1_0) and (icmp_ln37_reg_252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_y_5_phi_fu_63_p6 <= atb_9_loc_fu_44;
        else 
            ap_phi_mux_y_5_phi_fu_63_p6 <= y_5_reg_58;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, xor_ln49_fu_229_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= xor_ln49_fu_229_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_rj_sbox_Pipeline_alog_fu_80_ap_start <= grp_rj_sbox_Pipeline_alog_fu_80_ap_start_reg;
    grp_rj_sbox_Pipeline_glog_fu_73_ap_start <= grp_rj_sbox_Pipeline_glog_fu_73_ap_start_reg;
    i_fu_95_p3 <= 
        i_loc_fu_48 when (targetBlock_reg_256(0) = '1') else 
        ap_const_lv8_0;
    icmp_ln15_fu_109_p2 <= "1" when (i_fu_95_p3 = ap_const_lv8_FF) else "0";
    icmp_ln37_fu_86_p2 <= "1" when (x = ap_const_lv8_0) else "0";
    sub_ln15_fu_102_p2 <= std_logic_vector(signed(ap_const_lv8_FE) - signed(i_fu_95_p3));
    tmp_4_fu_143_p4 <= ap_phi_mux_y_5_phi_fu_63_p6(7 downto 6);
    tmp_6_fu_165_p4 <= ap_phi_mux_y_5_phi_fu_63_p6(7 downto 5);
    tmp_8_fu_187_p4 <= ap_phi_mux_y_5_phi_fu_63_p6(7 downto 4);
    tmp_fu_123_p3 <= ap_phi_mux_y_5_phi_fu_63_p6(7 downto 7);
    trunc_ln46_1_fu_139_p1 <= ap_phi_mux_y_5_phi_fu_63_p6(6 - 1 downto 0);
    trunc_ln46_fu_119_p1 <= ap_phi_mux_y_5_phi_fu_63_p6(7 - 1 downto 0);
    trunc_ln47_1_fu_183_p1 <= ap_phi_mux_y_5_phi_fu_63_p6(4 - 1 downto 0);
    trunc_ln47_fu_161_p1 <= ap_phi_mux_y_5_phi_fu_63_p6(5 - 1 downto 0);
    xor_ln49_1_fu_205_p2 <= (y_fu_131_p3 xor y_2_fu_153_p3);
    xor_ln49_2_fu_211_p2 <= (xor_ln49_1_fu_205_p2 xor ap_phi_mux_y_5_phi_fu_63_p6);
    xor_ln49_3_fu_217_p2 <= (y_4_fu_197_p3 xor ap_const_lv8_63);
    xor_ln49_4_fu_223_p2 <= (y_3_fu_175_p3 xor xor_ln49_3_fu_217_p2);
    xor_ln49_fu_229_p2 <= (xor_ln49_4_fu_223_p2 xor xor_ln49_2_fu_211_p2);
    y_2_fu_153_p3 <= (trunc_ln46_1_fu_139_p1 & tmp_4_fu_143_p4);
    y_3_fu_175_p3 <= (trunc_ln47_fu_161_p1 & tmp_6_fu_165_p4);
    y_4_fu_197_p3 <= (trunc_ln47_1_fu_183_p1 & tmp_8_fu_187_p4);
    y_fu_131_p3 <= (trunc_ln46_fu_119_p1 & tmp_fu_123_p3);
end behav;
