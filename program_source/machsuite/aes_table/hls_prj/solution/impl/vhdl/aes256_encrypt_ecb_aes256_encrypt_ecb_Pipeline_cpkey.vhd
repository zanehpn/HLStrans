-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx7_reload : IN STD_LOGIC_VECTOR (767 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    or_ln74_1_out : OUT STD_LOGIC_VECTOR (767 downto 0);
    or_ln74_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_cpkey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv129_lc_38 : STD_LOGIC_VECTOR (128 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv257_lc_39 : STD_LOGIC_VECTOR (256 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln74_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln74_fu_167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln74_reg_410 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_addr_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln74_2_fu_345_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal or_ln74_2_reg_421 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_93_reg_426 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln74_reg_431 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln74_1_cast48_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_2_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln74_fu_361_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_partset10_fu_84 : STD_LOGIC_VECTOR (767 downto 0);
    signal or_ln74_1_fu_384_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_sig_allocacmp_p_partset10_load : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln74_cast_fu_147_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln74_fu_157_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln74_fu_161_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal shl_ln_fu_139_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln74_1_fu_171_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln74_fu_175_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln74_3_fu_185_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln74_2_fu_181_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal xor_ln74_fu_195_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal sext_ln74_fu_201_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal trunc_ln74_2_fu_209_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln74_1_fu_205_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln74_2_fu_219_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln74_1_fu_189_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln74_fu_213_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_s_fu_231_p4 : STD_LOGIC_VECTOR (639 downto 0);
    signal or_ln74_fu_225_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln74_5_cast_fu_259_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln74_2_fu_269_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_251_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln74_4_fu_273_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal lshr_ln74_1_fu_277_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal zext_ln74_5_fu_287_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln74_2_fu_291_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln74_3_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln74_7_fu_301_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln74_6_fu_297_p1 : STD_LOGIC_VECTOR (256 downto 0);
    signal xor_ln74_2_fu_311_p2 : STD_LOGIC_VECTOR (256 downto 0);
    signal tmp_91_fu_241_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln74_1_fu_317_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_92_fu_325_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln74_4_fu_321_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln74_3_fu_339_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln74_3_fu_305_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln74_1_fu_333_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_80 <= ap_const_lv4_F;
                elsif (((icmp_ln74_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_2_fu_80 <= add_ln74_fu_361_p2;
                end if;
            end if; 
        end if;
    end process;

    p_partset10_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_partset10_fu_84 <= ctx7_reload;
                elsif (((icmp_ln74_reg_431 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    p_partset10_fu_84 <= or_ln74_1_fu_384_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                buf_r_addr_reg_415 <= trunc_ln74_1_cast48_fu_134_p1(4 - 1 downto 0);
                icmp_ln74_reg_431 <= icmp_ln74_fu_367_p2;
                or_ln74_2_reg_421 <= or_ln74_2_fu_345_p2;
                tmp_93_reg_426 <= and_ln74_1_fu_333_p2(767 downto 256);
                trunc_ln74_reg_410 <= trunc_ln74_fu_167_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln74_fu_361_p2 <= std_logic_vector(unsigned(i_2_fu_80) + unsigned(ap_const_lv4_F));
    and_ln74_1_fu_333_p2 <= (sext_ln74_1_fu_317_p1 and or_ln_fu_251_p3);
    and_ln74_2_fu_219_p2 <= (trunc_ln74_2_fu_209_p1 and trunc_ln74_1_fu_205_p1);
    and_ln74_3_fu_339_p2 <= (trunc_ln74_4_fu_321_p1 and tmp_92_fu_325_p3);
    and_ln74_fu_213_p2 <= (sext_ln74_fu_201_p1 and ap_sig_allocacmp_p_partset10_load);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln74_fu_367_p2)
    begin
        if (((icmp_ln74_fu_367_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_partset10_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln74_reg_431, ap_block_pp0_stage0, p_partset10_fu_84, or_ln74_1_fu_384_p3)
    begin
        if (((icmp_ln74_reg_431 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_partset10_load <= or_ln74_1_fu_384_p3;
        else 
            ap_sig_allocacmp_p_partset10_load <= p_partset10_fu_84;
        end if; 
    end process;

    buf_r_address0 <= buf_r_addr_reg_415;
    buf_r_address1 <= trunc_ln74_1_cast48_fu_134_p1(4 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d0 <= (trunc_ln74_reg_410 xor buf_r_q1);

    buf_r_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buf_r_we0 <= ap_const_logic_1;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln74_fu_367_p2 <= "1" when (i_2_fu_80 = ap_const_lv4_0) else "0";
    lshr_ln74_1_fu_277_p2 <= std_logic_vector(shift_right(unsigned(or_ln_fu_251_p3),to_integer(unsigned('0' & zext_ln74_4_fu_273_p1(31-1 downto 0)))));
    lshr_ln74_fu_161_p2 <= std_logic_vector(shift_right(unsigned(ap_sig_allocacmp_p_partset10_load),to_integer(unsigned('0' & zext_ln74_fu_157_p1(31-1 downto 0)))));
    or_ln74_1_fu_384_p3 <= (tmp_93_reg_426 & or_ln74_2_reg_421);
    or_ln74_1_out <= (tmp_93_reg_426 & or_ln74_2_reg_421);

    or_ln74_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln74_reg_431)
    begin
        if (((icmp_ln74_reg_431 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            or_ln74_1_out_ap_vld <= ap_const_logic_1;
        else 
            or_ln74_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln74_2_fu_345_p2 <= (shl_ln74_3_fu_305_p2 or and_ln74_3_fu_339_p2);
    or_ln74_fu_225_p2 <= (shl_ln74_1_fu_189_p2 or and_ln74_2_fu_219_p2);
    or_ln_fu_251_p3 <= (tmp_s_fu_231_p4 & or_ln74_fu_225_p2);
        sext_ln74_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln74_2_fu_311_p2),768));

        sext_ln74_2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln74_5_cast_fu_259_p4),9));

        sext_ln74_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln74_fu_195_p2),768));

    shl_ln74_1_fu_189_p2 <= std_logic_vector(shift_left(unsigned(zext_ln74_3_fu_185_p1),to_integer(unsigned('0' & zext_ln74_1_fu_171_p1(31-1 downto 0)))));
    shl_ln74_2_fu_291_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & zext_ln74_5_fu_287_p1(31-1 downto 0)))));
    shl_ln74_3_fu_305_p2 <= std_logic_vector(shift_left(unsigned(zext_ln74_7_fu_301_p1),to_integer(unsigned('0' & zext_ln74_5_fu_287_p1(31-1 downto 0)))));
    shl_ln74_fu_175_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln74_1_fu_171_p1(31-1 downto 0)))));
    shl_ln_fu_139_p3 <= (i_2_fu_80 & ap_const_lv3_0);
    tmp_91_fu_241_p4 <= and_ln74_fu_213_p2(255 downto 128);
    tmp_92_fu_325_p3 <= (tmp_91_fu_241_p4 & or_ln74_fu_225_p2);
    tmp_s_fu_231_p4 <= and_ln74_fu_213_p2(767 downto 128);
    trunc_ln74_1_cast48_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_80),64));
    trunc_ln74_1_fu_205_p1 <= xor_ln74_fu_195_p2(128 - 1 downto 0);
    trunc_ln74_2_fu_209_p1 <= ap_sig_allocacmp_p_partset10_load(128 - 1 downto 0);
    trunc_ln74_3_fu_283_p1 <= lshr_ln74_1_fu_277_p2(8 - 1 downto 0);
    trunc_ln74_4_fu_321_p1 <= xor_ln74_2_fu_311_p2(256 - 1 downto 0);
    trunc_ln74_fu_167_p1 <= lshr_ln74_fu_161_p2(8 - 1 downto 0);
    xor_ln74_2_fu_311_p2 <= (zext_ln74_6_fu_297_p1 xor ap_const_lv257_lc_39);
    xor_ln74_fu_195_p2 <= (zext_ln74_2_fu_181_p1 xor ap_const_lv129_lc_38);
    zext_ln74_1_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_139_p3),128));
    zext_ln74_2_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln74_fu_175_p2),129));
    zext_ln74_3_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln74_fu_167_p1),128));
    zext_ln74_4_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln74_2_fu_269_p1),768));
    zext_ln74_5_cast_fu_259_p4 <= ((ap_const_lv1_1 & i_2_fu_80) & ap_const_lv3_0);
    zext_ln74_5_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln74_5_cast_fu_259_p4),256));
    zext_ln74_6_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln74_2_fu_291_p2),257));
    zext_ln74_7_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln74_3_fu_283_p1),256));
    zext_ln74_cast_fu_147_p4 <= ((ap_const_lv2_2 & i_2_fu_80) & ap_const_lv3_0);
    zext_ln74_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln74_cast_fu_147_p4),768));
end behav;
