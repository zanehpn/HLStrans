// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="edge_detect_edge_detect,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=4241,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2653,HLS_SYN_LUT=3571,HLS_VERSION=2022_2_2}" *)

module edge_detect (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY,
        m_axi_in_r_AWADDR,
        m_axi_in_r_AWID,
        m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID,
        m_axi_in_r_WREADY,
        m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST,
        m_axi_in_r_WID,
        m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY,
        m_axi_in_r_ARADDR,
        m_axi_in_r_ARID,
        m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID,
        m_axi_in_r_RREADY,
        m_axi_in_r_RDATA,
        m_axi_in_r_RLAST,
        m_axi_in_r_RID,
        m_axi_in_r_RUSER,
        m_axi_in_r_RRESP,
        m_axi_in_r_BVALID,
        m_axi_in_r_BREADY,
        m_axi_in_r_BRESP,
        m_axi_in_r_BID,
        m_axi_in_r_BUSER,
        m_axi_out_r_AWVALID,
        m_axi_out_r_AWREADY,
        m_axi_out_r_AWADDR,
        m_axi_out_r_AWID,
        m_axi_out_r_AWLEN,
        m_axi_out_r_AWSIZE,
        m_axi_out_r_AWBURST,
        m_axi_out_r_AWLOCK,
        m_axi_out_r_AWCACHE,
        m_axi_out_r_AWPROT,
        m_axi_out_r_AWQOS,
        m_axi_out_r_AWREGION,
        m_axi_out_r_AWUSER,
        m_axi_out_r_WVALID,
        m_axi_out_r_WREADY,
        m_axi_out_r_WDATA,
        m_axi_out_r_WSTRB,
        m_axi_out_r_WLAST,
        m_axi_out_r_WID,
        m_axi_out_r_WUSER,
        m_axi_out_r_ARVALID,
        m_axi_out_r_ARREADY,
        m_axi_out_r_ARADDR,
        m_axi_out_r_ARID,
        m_axi_out_r_ARLEN,
        m_axi_out_r_ARSIZE,
        m_axi_out_r_ARBURST,
        m_axi_out_r_ARLOCK,
        m_axi_out_r_ARCACHE,
        m_axi_out_r_ARPROT,
        m_axi_out_r_ARQOS,
        m_axi_out_r_ARREGION,
        m_axi_out_r_ARUSER,
        m_axi_out_r_RVALID,
        m_axi_out_r_RREADY,
        m_axi_out_r_RDATA,
        m_axi_out_r_RLAST,
        m_axi_out_r_RID,
        m_axi_out_r_RUSER,
        m_axi_out_r_RRESP,
        m_axi_out_r_BVALID,
        m_axi_out_r_BREADY,
        m_axi_out_r_BRESP,
        m_axi_out_r_BID,
        m_axi_out_r_BUSER,
        EDGE_THRESHOLD,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state19 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 64;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 64;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_in_r_AWVALID;
input   m_axi_in_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_in_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_AWID;
output  [7:0] m_axi_in_r_AWLEN;
output  [2:0] m_axi_in_r_AWSIZE;
output  [1:0] m_axi_in_r_AWBURST;
output  [1:0] m_axi_in_r_AWLOCK;
output  [3:0] m_axi_in_r_AWCACHE;
output  [2:0] m_axi_in_r_AWPROT;
output  [3:0] m_axi_in_r_AWQOS;
output  [3:0] m_axi_in_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_in_r_AWUSER;
output   m_axi_in_r_WVALID;
input   m_axi_in_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_in_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_in_r_WSTRB;
output   m_axi_in_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_in_r_WUSER;
output   m_axi_in_r_ARVALID;
input   m_axi_in_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_in_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_ARID;
output  [7:0] m_axi_in_r_ARLEN;
output  [2:0] m_axi_in_r_ARSIZE;
output  [1:0] m_axi_in_r_ARBURST;
output  [1:0] m_axi_in_r_ARLOCK;
output  [3:0] m_axi_in_r_ARCACHE;
output  [2:0] m_axi_in_r_ARPROT;
output  [3:0] m_axi_in_r_ARQOS;
output  [3:0] m_axi_in_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_in_r_ARUSER;
input   m_axi_in_r_RVALID;
output   m_axi_in_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_in_r_RDATA;
input   m_axi_in_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_in_r_RUSER;
input  [1:0] m_axi_in_r_RRESP;
input   m_axi_in_r_BVALID;
output   m_axi_in_r_BREADY;
input  [1:0] m_axi_in_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_in_r_BUSER;
output   m_axi_out_r_AWVALID;
input   m_axi_out_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_out_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_AWID;
output  [7:0] m_axi_out_r_AWLEN;
output  [2:0] m_axi_out_r_AWSIZE;
output  [1:0] m_axi_out_r_AWBURST;
output  [1:0] m_axi_out_r_AWLOCK;
output  [3:0] m_axi_out_r_AWCACHE;
output  [2:0] m_axi_out_r_AWPROT;
output  [3:0] m_axi_out_r_AWQOS;
output  [3:0] m_axi_out_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_out_r_AWUSER;
output   m_axi_out_r_WVALID;
input   m_axi_out_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_out_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_out_r_WSTRB;
output   m_axi_out_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_out_r_WUSER;
output   m_axi_out_r_ARVALID;
input   m_axi_out_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_out_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_ARID;
output  [7:0] m_axi_out_r_ARLEN;
output  [2:0] m_axi_out_r_ARSIZE;
output  [1:0] m_axi_out_r_ARBURST;
output  [1:0] m_axi_out_r_ARLOCK;
output  [3:0] m_axi_out_r_ARCACHE;
output  [2:0] m_axi_out_r_ARPROT;
output  [3:0] m_axi_out_r_ARQOS;
output  [3:0] m_axi_out_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_out_r_ARUSER;
input   m_axi_out_r_RVALID;
output   m_axi_out_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_out_r_RDATA;
input   m_axi_out_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_out_r_RUSER;
input  [1:0] m_axi_out_r_RRESP;
input   m_axi_out_r_BVALID;
output   m_axi_out_r_BREADY;
input  [1:0] m_axi_out_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_out_r_BUSER;
input  [31:0] EDGE_THRESHOLD;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] inputImage;
wire   [63:0] outputImage;
reg    in_r_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln24_reg_899;
reg   [0:0] empty_26_reg_903;
reg    in_r_blk_n_R;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln24_reg_899_pp0_iter7_reg;
reg   [0:0] empty_26_reg_903_pp0_iter7_reg;
reg    out_r_blk_n_AW;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] or_ln51_reg_924;
reg   [0:0] or_ln51_reg_924_pp0_iter9_reg;
reg    out_r_blk_n_W;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] or_ln51_reg_924_pp0_iter10_reg;
reg    out_r_blk_n_B;
reg    ap_enable_reg_pp0_iter16;
reg   [0:0] or_ln51_reg_924_pp0_iter15_reg;
reg   [63:0] outputImage_read_reg_889;
reg   [63:0] inputImage_read_reg_894;
wire   [0:0] icmp_ln24_fu_296_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    in_r_AWREADY;
wire    in_r_WREADY;
reg    in_r_ARVALID;
wire    in_r_ARREADY;
wire    in_r_RVALID;
reg    in_r_RREADY;
wire   [31:0] in_r_RDATA;
wire   [8:0] in_r_RFIFONUM;
wire    in_r_BVALID;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op102_readreq_state3;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_predicate_op113_read_state10;
reg    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    out_r_AWVALID;
wire    out_r_AWREADY;
reg    out_r_WVALID;
wire    out_r_WREADY;
wire    out_r_ARREADY;
wire    out_r_RVALID;
wire   [31:0] out_r_RDATA;
wire   [8:0] out_r_RFIFONUM;
wire    out_r_BVALID;
reg    out_r_BREADY;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter11;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
reg    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln24_reg_899_pp0_iter1_reg;
reg   [0:0] icmp_ln24_reg_899_pp0_iter2_reg;
reg   [0:0] icmp_ln24_reg_899_pp0_iter3_reg;
reg   [0:0] icmp_ln24_reg_899_pp0_iter4_reg;
reg   [0:0] icmp_ln24_reg_899_pp0_iter5_reg;
reg   [0:0] icmp_ln24_reg_899_pp0_iter6_reg;
reg   [0:0] icmp_ln24_reg_899_pp0_iter8_reg;
wire   [0:0] empty_26_fu_404_p2;
reg   [0:0] empty_26_reg_903_pp0_iter1_reg;
reg   [0:0] empty_26_reg_903_pp0_iter2_reg;
reg   [0:0] empty_26_reg_903_pp0_iter3_reg;
reg   [0:0] empty_26_reg_903_pp0_iter4_reg;
reg   [0:0] empty_26_reg_903_pp0_iter5_reg;
reg   [0:0] empty_26_reg_903_pp0_iter6_reg;
reg   [0:0] empty_26_reg_903_pp0_iter8_reg;
reg   [63:0] in_r_addr_reg_907;
reg   [6:0] lineBuffer1_addr_reg_913;
reg   [6:0] lineBuffer2_addr_reg_918;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter1_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter2_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter3_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter4_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter5_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter6_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter7_reg;
reg   [6:0] lineBuffer2_addr_reg_918_pp0_iter8_reg;
wire   [0:0] or_ln51_fu_485_p2;
reg   [0:0] or_ln51_reg_924_pp0_iter1_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter2_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter3_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter4_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter5_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter6_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter7_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter8_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter11_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter12_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter13_reg;
reg   [0:0] or_ln51_reg_924_pp0_iter14_reg;
wire   [12:0] add_ln67_2_fu_501_p2;
reg   [12:0] add_ln67_2_reg_928;
reg   [12:0] add_ln67_2_reg_928_pp0_iter1_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter2_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter3_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter4_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter5_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter6_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter7_reg;
reg   [12:0] add_ln67_2_reg_928_pp0_iter8_reg;
wire   [7:0] lineBuffer2_q0;
reg   [7:0] lineBuffer2_load_reg_933;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter2_reg;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter3_reg;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter4_reg;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter5_reg;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter6_reg;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter7_reg;
reg   [7:0] lineBuffer2_load_reg_933_pp0_iter8_reg;
wire   [7:0] lineBuffer1_q1;
reg   [7:0] lineBuffer1_load_reg_939;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] lineBuffer1_load_reg_939_pp0_iter3_reg;
reg   [7:0] lineBuffer1_load_reg_939_pp0_iter4_reg;
reg   [7:0] lineBuffer1_load_reg_939_pp0_iter5_reg;
reg   [7:0] lineBuffer1_load_reg_939_pp0_iter6_reg;
reg   [7:0] lineBuffer1_load_reg_939_pp0_iter7_reg;
reg   [7:0] lineBuffer1_load_reg_939_pp0_iter8_reg;
wire   [7:0] newPixel_2_fu_528_p1;
reg   [7:0] newPixel_2_reg_945;
wire   [10:0] Gx_fu_625_p2;
reg   [10:0] Gx_reg_950;
wire   [10:0] Gy_fu_686_p2;
reg   [10:0] Gy_reg_957;
reg   [63:0] out_r_addr_reg_964;
wire   [31:0] select_ln57_fu_819_p3;
reg   [31:0] select_ln57_reg_970;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_condition_pp0_exit_iter9_state11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    lineBuffer1_ce1;
reg    lineBuffer1_we1;
wire   [6:0] lineBuffer2_address0;
reg    lineBuffer2_ce0;
reg    lineBuffer2_ce1;
reg    lineBuffer2_we1;
reg   [7:0] ap_phi_mux_newPixel_1_phi_fu_270_p4;
reg   [7:0] ap_phi_reg_pp0_iter9_newPixel_1_reg_266;
wire   [7:0] ap_phi_reg_pp0_iter0_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter1_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter2_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter3_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter4_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter5_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter6_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter7_newPixel_1_reg_266;
reg   [7:0] ap_phi_reg_pp0_iter8_newPixel_1_reg_266;
wire   [63:0] trunc_ln51_cast12_fu_382_p1;
wire  signed [63:0] sext_ln32_fu_453_p1;
wire  signed [63:0] sext_ln67_fu_718_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] empty_fu_144;
reg   [7:0] empty_19_fu_148;
reg   [7:0] empty_20_fu_152;
reg   [6:0] col_fu_156;
wire   [6:0] add_ln25_fu_507_p2;
reg   [6:0] row_fu_160;
wire   [6:0] select_ln24_2_fu_354_p3;
reg   [12:0] indvar_flatten_fu_164;
wire   [12:0] add_ln24_fu_302_p2;
reg   [7:0] newPixel_fu_168;
reg   [7:0] empty_21_fu_172;
reg   [7:0] empty_22_fu_176;
wire   [0:0] icmp_ln25_fu_314_p2;
wire   [6:0] add_ln24_1_fu_328_p2;
wire   [0:0] cmp50_not_mid1_fu_334_p2;
wire   [0:0] cmp50_not11_fu_340_p2;
wire   [5:0] trunc_ln24_fu_362_p1;
wire   [11:0] zext_ln25_mid2_v_fu_366_p3;
wire   [6:0] select_ln24_fu_320_p3;
wire   [0:0] empty_25_fu_398_p2;
wire   [0:0] empty_24_fu_392_p2;
wire   [7:0] zext_ln29_fu_388_p1;
wire   [7:0] add_ln32_fu_410_p2;
wire  signed [13:0] sext_ln32_1_fu_416_p1;
wire   [13:0] zext_ln24_1_fu_378_p1;
wire   [13:0] add_ln32_1_fu_420_p2;
wire   [15:0] tmp_1_fu_426_p3;
wire  signed [63:0] sext_ln32_2_fu_434_p1;
wire   [63:0] add_ln32_2_fu_438_p2;
wire   [61:0] trunc_ln_fu_443_p4;
wire   [7:0] add_ln51_fu_463_p2;
wire   [1:0] tmp_fu_469_p4;
wire   [0:0] icmp_ln51_fu_479_p2;
wire   [0:0] select_ln24_1_fu_346_p3;
wire   [7:0] add_ln67_fu_491_p2;
wire  signed [12:0] sext_ln67_1_fu_497_p1;
wire   [12:0] zext_ln24_fu_374_p1;
wire   [8:0] shl_ln_fu_558_p3;
wire   [8:0] shl_ln1_fu_581_p3;
wire   [9:0] zext_ln52_2_fu_566_p1;
wire   [9:0] zext_ln52_1_fu_554_p1;
wire   [9:0] add_ln52_fu_597_p2;
wire   [10:0] zext_ln52_4_fu_603_p1;
wire   [10:0] zext_ln53_2_fu_577_p1;
wire   [10:0] sub_ln52_fu_607_p2;
wire   [10:0] zext_ln53_3_fu_589_p1;
wire   [10:0] sub_ln53_fu_613_p2;
wire   [10:0] zext_ln52_3_fu_593_p1;
wire   [10:0] sub_ln53_1_fu_619_p2;
wire   [10:0] zext_ln53_fu_570_p1;
wire   [8:0] shl_ln2_fu_631_p3;
wire   [8:0] shl_ln3_fu_643_p3;
wire   [8:0] zext_ln52_fu_550_p1;
wire   [8:0] zext_ln53_1_fu_573_p1;
wire   [8:0] add_ln54_fu_654_p2;
wire   [9:0] zext_ln54_1_fu_660_p1;
wire   [9:0] zext_ln55_fu_639_p1;
wire   [9:0] add_ln54_1_fu_664_p2;
wire   [10:0] zext_ln55_1_fu_670_p1;
wire   [10:0] sub_ln55_fu_674_p2;
wire   [10:0] sub_ln55_1_fu_680_p2;
wire   [10:0] zext_ln54_fu_650_p1;
wire   [14:0] tmp_2_fu_692_p3;
wire  signed [63:0] sext_ln67_2_fu_699_p1;
wire   [63:0] add_ln67_1_fu_703_p2;
wire   [61:0] trunc_ln1_fu_708_p4;
wire   [0:0] abscond_fu_761_p2;
wire   [10:0] neg_fu_756_p2;
wire   [10:0] abs_fu_766_p3;
wire   [0:0] abscond28_fu_782_p2;
wire   [10:0] neg27_fu_777_p2;
wire   [10:0] abs29_fu_787_p3;
wire  signed [11:0] sext_ln57_fu_794_p1;
wire  signed [11:0] abs_cast_fu_773_p1;
wire   [11:0] gradient_fu_798_p2;
wire  signed [31:0] sext_ln57_1_fu_804_p1;
wire   [0:0] icmp_ln60_fu_808_p2;
wire   [0:0] gradient_1_fu_813_p2;
wire    ap_CS_fsm_state19;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_651;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

edge_detect_lineBuffer1_RAM_2P_BRAM_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 66 ),
    .AddressWidth( 7 ))
lineBuffer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lineBuffer1_addr_reg_913),
    .ce1(lineBuffer1_ce1),
    .we1(lineBuffer1_we1),
    .d1(lineBuffer2_q0),
    .q1(lineBuffer1_q1)
);

edge_detect_lineBuffer2_RAM_2P_BRAM_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 66 ),
    .AddressWidth( 7 ))
lineBuffer2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuffer2_address0),
    .ce0(lineBuffer2_ce0),
    .q0(lineBuffer2_q0),
    .address1(lineBuffer2_addr_reg_918_pp0_iter8_reg),
    .ce1(lineBuffer2_ce1),
    .we1(lineBuffer2_we1),
    .d1(ap_phi_mux_newPixel_1_phi_fu_270_p4)
);

edge_detect_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .inputImage(inputImage),
    .outputImage(outputImage)
);

edge_detect_in_r_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
in_r_m_axi_U(
    .AWVALID(m_axi_in_r_AWVALID),
    .AWREADY(m_axi_in_r_AWREADY),
    .AWADDR(m_axi_in_r_AWADDR),
    .AWID(m_axi_in_r_AWID),
    .AWLEN(m_axi_in_r_AWLEN),
    .AWSIZE(m_axi_in_r_AWSIZE),
    .AWBURST(m_axi_in_r_AWBURST),
    .AWLOCK(m_axi_in_r_AWLOCK),
    .AWCACHE(m_axi_in_r_AWCACHE),
    .AWPROT(m_axi_in_r_AWPROT),
    .AWQOS(m_axi_in_r_AWQOS),
    .AWREGION(m_axi_in_r_AWREGION),
    .AWUSER(m_axi_in_r_AWUSER),
    .WVALID(m_axi_in_r_WVALID),
    .WREADY(m_axi_in_r_WREADY),
    .WDATA(m_axi_in_r_WDATA),
    .WSTRB(m_axi_in_r_WSTRB),
    .WLAST(m_axi_in_r_WLAST),
    .WID(m_axi_in_r_WID),
    .WUSER(m_axi_in_r_WUSER),
    .ARVALID(m_axi_in_r_ARVALID),
    .ARREADY(m_axi_in_r_ARREADY),
    .ARADDR(m_axi_in_r_ARADDR),
    .ARID(m_axi_in_r_ARID),
    .ARLEN(m_axi_in_r_ARLEN),
    .ARSIZE(m_axi_in_r_ARSIZE),
    .ARBURST(m_axi_in_r_ARBURST),
    .ARLOCK(m_axi_in_r_ARLOCK),
    .ARCACHE(m_axi_in_r_ARCACHE),
    .ARPROT(m_axi_in_r_ARPROT),
    .ARQOS(m_axi_in_r_ARQOS),
    .ARREGION(m_axi_in_r_ARREGION),
    .ARUSER(m_axi_in_r_ARUSER),
    .RVALID(m_axi_in_r_RVALID),
    .RREADY(m_axi_in_r_RREADY),
    .RDATA(m_axi_in_r_RDATA),
    .RLAST(m_axi_in_r_RLAST),
    .RID(m_axi_in_r_RID),
    .RUSER(m_axi_in_r_RUSER),
    .RRESP(m_axi_in_r_RRESP),
    .BVALID(m_axi_in_r_BVALID),
    .BREADY(m_axi_in_r_BREADY),
    .BRESP(m_axi_in_r_BRESP),
    .BID(m_axi_in_r_BID),
    .BUSER(m_axi_in_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in_r_ARVALID),
    .I_ARREADY(in_r_ARREADY),
    .I_ARADDR(in_r_addr_reg_907),
    .I_ARLEN(32'd1),
    .I_RVALID(in_r_RVALID),
    .I_RREADY(in_r_RREADY),
    .I_RDATA(in_r_RDATA),
    .I_RFIFONUM(in_r_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(in_r_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in_r_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(in_r_BVALID),
    .I_BREADY(1'b0)
);

edge_detect_out_r_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
out_r_m_axi_U(
    .AWVALID(m_axi_out_r_AWVALID),
    .AWREADY(m_axi_out_r_AWREADY),
    .AWADDR(m_axi_out_r_AWADDR),
    .AWID(m_axi_out_r_AWID),
    .AWLEN(m_axi_out_r_AWLEN),
    .AWSIZE(m_axi_out_r_AWSIZE),
    .AWBURST(m_axi_out_r_AWBURST),
    .AWLOCK(m_axi_out_r_AWLOCK),
    .AWCACHE(m_axi_out_r_AWCACHE),
    .AWPROT(m_axi_out_r_AWPROT),
    .AWQOS(m_axi_out_r_AWQOS),
    .AWREGION(m_axi_out_r_AWREGION),
    .AWUSER(m_axi_out_r_AWUSER),
    .WVALID(m_axi_out_r_WVALID),
    .WREADY(m_axi_out_r_WREADY),
    .WDATA(m_axi_out_r_WDATA),
    .WSTRB(m_axi_out_r_WSTRB),
    .WLAST(m_axi_out_r_WLAST),
    .WID(m_axi_out_r_WID),
    .WUSER(m_axi_out_r_WUSER),
    .ARVALID(m_axi_out_r_ARVALID),
    .ARREADY(m_axi_out_r_ARREADY),
    .ARADDR(m_axi_out_r_ARADDR),
    .ARID(m_axi_out_r_ARID),
    .ARLEN(m_axi_out_r_ARLEN),
    .ARSIZE(m_axi_out_r_ARSIZE),
    .ARBURST(m_axi_out_r_ARBURST),
    .ARLOCK(m_axi_out_r_ARLOCK),
    .ARCACHE(m_axi_out_r_ARCACHE),
    .ARPROT(m_axi_out_r_ARPROT),
    .ARQOS(m_axi_out_r_ARQOS),
    .ARREGION(m_axi_out_r_ARREGION),
    .ARUSER(m_axi_out_r_ARUSER),
    .RVALID(m_axi_out_r_RVALID),
    .RREADY(m_axi_out_r_RREADY),
    .RDATA(m_axi_out_r_RDATA),
    .RLAST(m_axi_out_r_RLAST),
    .RID(m_axi_out_r_RID),
    .RUSER(m_axi_out_r_RUSER),
    .RRESP(m_axi_out_r_RRESP),
    .BVALID(m_axi_out_r_BVALID),
    .BREADY(m_axi_out_r_BREADY),
    .BRESP(m_axi_out_r_BRESP),
    .BID(m_axi_out_r_BID),
    .BUSER(m_axi_out_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(out_r_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(out_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(out_r_RDATA),
    .I_RFIFONUM(out_r_RFIFONUM),
    .I_AWVALID(out_r_AWVALID),
    .I_AWREADY(out_r_AWREADY),
    .I_AWADDR(out_r_addr_reg_964),
    .I_AWLEN(32'd1),
    .I_WVALID(out_r_WVALID),
    .I_WREADY(out_r_WREADY),
    .I_WDATA(select_ln57_reg_970),
    .I_WSTRB(4'd15),
    .I_BVALID(out_r_BVALID),
    .I_BREADY(out_r_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter9_state11)) begin
                ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter8;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_651)) begin
        if (((empty_26_fu_404_p2 == 1'd1) & (icmp_ln24_fu_296_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_newPixel_1_reg_266 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter0_newPixel_1_reg_266;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_fu_156 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_fu_156 <= add_ln25_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_164 <= 13'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_164 <= add_ln24_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_fu_160 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_fu_160 <= select_ln24_2_fu_354_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln51_reg_924_pp0_iter8_reg == 1'd0) & (icmp_ln24_reg_899_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Gx_reg_950 <= Gx_fu_625_p2;
        Gy_reg_957 <= Gy_fu_686_p2;
        out_r_addr_reg_964 <= sext_ln67_fu_718_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln51_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln67_2_reg_928 <= add_ln67_2_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln67_2_reg_928_pp0_iter1_reg <= add_ln67_2_reg_928;
        empty_26_reg_903_pp0_iter1_reg <= empty_26_reg_903;
        icmp_ln24_reg_899 <= icmp_ln24_fu_296_p2;
        icmp_ln24_reg_899_pp0_iter1_reg <= icmp_ln24_reg_899;
        lineBuffer2_addr_reg_918_pp0_iter1_reg <= lineBuffer2_addr_reg_918;
        or_ln51_reg_924_pp0_iter1_reg <= or_ln51_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln67_2_reg_928_pp0_iter2_reg <= add_ln67_2_reg_928_pp0_iter1_reg;
        add_ln67_2_reg_928_pp0_iter3_reg <= add_ln67_2_reg_928_pp0_iter2_reg;
        add_ln67_2_reg_928_pp0_iter4_reg <= add_ln67_2_reg_928_pp0_iter3_reg;
        add_ln67_2_reg_928_pp0_iter5_reg <= add_ln67_2_reg_928_pp0_iter4_reg;
        add_ln67_2_reg_928_pp0_iter6_reg <= add_ln67_2_reg_928_pp0_iter5_reg;
        add_ln67_2_reg_928_pp0_iter7_reg <= add_ln67_2_reg_928_pp0_iter6_reg;
        add_ln67_2_reg_928_pp0_iter8_reg <= add_ln67_2_reg_928_pp0_iter7_reg;
        empty_26_reg_903_pp0_iter2_reg <= empty_26_reg_903_pp0_iter1_reg;
        empty_26_reg_903_pp0_iter3_reg <= empty_26_reg_903_pp0_iter2_reg;
        empty_26_reg_903_pp0_iter4_reg <= empty_26_reg_903_pp0_iter3_reg;
        empty_26_reg_903_pp0_iter5_reg <= empty_26_reg_903_pp0_iter4_reg;
        empty_26_reg_903_pp0_iter6_reg <= empty_26_reg_903_pp0_iter5_reg;
        empty_26_reg_903_pp0_iter7_reg <= empty_26_reg_903_pp0_iter6_reg;
        empty_26_reg_903_pp0_iter8_reg <= empty_26_reg_903_pp0_iter7_reg;
        icmp_ln24_reg_899_pp0_iter2_reg <= icmp_ln24_reg_899_pp0_iter1_reg;
        icmp_ln24_reg_899_pp0_iter3_reg <= icmp_ln24_reg_899_pp0_iter2_reg;
        icmp_ln24_reg_899_pp0_iter4_reg <= icmp_ln24_reg_899_pp0_iter3_reg;
        icmp_ln24_reg_899_pp0_iter5_reg <= icmp_ln24_reg_899_pp0_iter4_reg;
        icmp_ln24_reg_899_pp0_iter6_reg <= icmp_ln24_reg_899_pp0_iter5_reg;
        icmp_ln24_reg_899_pp0_iter7_reg <= icmp_ln24_reg_899_pp0_iter6_reg;
        icmp_ln24_reg_899_pp0_iter8_reg <= icmp_ln24_reg_899_pp0_iter7_reg;
        lineBuffer1_load_reg_939_pp0_iter3_reg <= lineBuffer1_load_reg_939;
        lineBuffer1_load_reg_939_pp0_iter4_reg <= lineBuffer1_load_reg_939_pp0_iter3_reg;
        lineBuffer1_load_reg_939_pp0_iter5_reg <= lineBuffer1_load_reg_939_pp0_iter4_reg;
        lineBuffer1_load_reg_939_pp0_iter6_reg <= lineBuffer1_load_reg_939_pp0_iter5_reg;
        lineBuffer1_load_reg_939_pp0_iter7_reg <= lineBuffer1_load_reg_939_pp0_iter6_reg;
        lineBuffer1_load_reg_939_pp0_iter8_reg <= lineBuffer1_load_reg_939_pp0_iter7_reg;
        lineBuffer2_addr_reg_918_pp0_iter2_reg <= lineBuffer2_addr_reg_918_pp0_iter1_reg;
        lineBuffer2_addr_reg_918_pp0_iter3_reg <= lineBuffer2_addr_reg_918_pp0_iter2_reg;
        lineBuffer2_addr_reg_918_pp0_iter4_reg <= lineBuffer2_addr_reg_918_pp0_iter3_reg;
        lineBuffer2_addr_reg_918_pp0_iter5_reg <= lineBuffer2_addr_reg_918_pp0_iter4_reg;
        lineBuffer2_addr_reg_918_pp0_iter6_reg <= lineBuffer2_addr_reg_918_pp0_iter5_reg;
        lineBuffer2_addr_reg_918_pp0_iter7_reg <= lineBuffer2_addr_reg_918_pp0_iter6_reg;
        lineBuffer2_addr_reg_918_pp0_iter8_reg <= lineBuffer2_addr_reg_918_pp0_iter7_reg;
        lineBuffer2_load_reg_933_pp0_iter2_reg <= lineBuffer2_load_reg_933;
        lineBuffer2_load_reg_933_pp0_iter3_reg <= lineBuffer2_load_reg_933_pp0_iter2_reg;
        lineBuffer2_load_reg_933_pp0_iter4_reg <= lineBuffer2_load_reg_933_pp0_iter3_reg;
        lineBuffer2_load_reg_933_pp0_iter5_reg <= lineBuffer2_load_reg_933_pp0_iter4_reg;
        lineBuffer2_load_reg_933_pp0_iter6_reg <= lineBuffer2_load_reg_933_pp0_iter5_reg;
        lineBuffer2_load_reg_933_pp0_iter7_reg <= lineBuffer2_load_reg_933_pp0_iter6_reg;
        lineBuffer2_load_reg_933_pp0_iter8_reg <= lineBuffer2_load_reg_933_pp0_iter7_reg;
        or_ln51_reg_924_pp0_iter10_reg <= or_ln51_reg_924_pp0_iter9_reg;
        or_ln51_reg_924_pp0_iter11_reg <= or_ln51_reg_924_pp0_iter10_reg;
        or_ln51_reg_924_pp0_iter12_reg <= or_ln51_reg_924_pp0_iter11_reg;
        or_ln51_reg_924_pp0_iter13_reg <= or_ln51_reg_924_pp0_iter12_reg;
        or_ln51_reg_924_pp0_iter14_reg <= or_ln51_reg_924_pp0_iter13_reg;
        or_ln51_reg_924_pp0_iter15_reg <= or_ln51_reg_924_pp0_iter14_reg;
        or_ln51_reg_924_pp0_iter2_reg <= or_ln51_reg_924_pp0_iter1_reg;
        or_ln51_reg_924_pp0_iter3_reg <= or_ln51_reg_924_pp0_iter2_reg;
        or_ln51_reg_924_pp0_iter4_reg <= or_ln51_reg_924_pp0_iter3_reg;
        or_ln51_reg_924_pp0_iter5_reg <= or_ln51_reg_924_pp0_iter4_reg;
        or_ln51_reg_924_pp0_iter6_reg <= or_ln51_reg_924_pp0_iter5_reg;
        or_ln51_reg_924_pp0_iter7_reg <= or_ln51_reg_924_pp0_iter6_reg;
        or_ln51_reg_924_pp0_iter8_reg <= or_ln51_reg_924_pp0_iter7_reg;
        or_ln51_reg_924_pp0_iter9_reg <= or_ln51_reg_924_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter1_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter2_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter3_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter4_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter5_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter6_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter7_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_newPixel_1_reg_266 <= ap_phi_reg_pp0_iter8_newPixel_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln24_reg_899_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_19_fu_148 <= empty_21_fu_172;
        empty_20_fu_152 <= empty_22_fu_176;
        empty_21_fu_172 <= lineBuffer2_load_reg_933_pp0_iter8_reg;
        empty_22_fu_176 <= lineBuffer1_load_reg_939_pp0_iter8_reg;
        empty_fu_144 <= newPixel_fu_168;
        newPixel_fu_168 <= ap_phi_mux_newPixel_1_phi_fu_270_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_26_reg_903 <= empty_26_fu_404_p2;
        lineBuffer1_addr_reg_913 <= trunc_ln51_cast12_fu_382_p1;
        lineBuffer2_addr_reg_918 <= trunc_ln51_cast12_fu_382_p1;
        or_ln51_reg_924 <= or_ln51_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_26_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_addr_reg_907 <= sext_ln32_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        inputImage_read_reg_894 <= inputImage;
        outputImage_read_reg_889 <= outputImage;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln24_reg_899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuffer1_load_reg_939 <= lineBuffer1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_reg_899 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuffer2_load_reg_933 <= lineBuffer2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_26_reg_903_pp0_iter7_reg == 1'd0) & (icmp_ln24_reg_899_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        newPixel_2_reg_945 <= newPixel_2_fu_528_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln51_reg_924_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln57_reg_970[7 : 0] <= select_ln57_fu_819_p3[7 : 0];
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_condition_pp0_exit_iter9_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter9_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_fu_296_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_26_reg_903_pp0_iter8_reg == 1'd0) & (icmp_ln24_reg_899_pp0_iter8_reg == 1'd0))) begin
        ap_phi_mux_newPixel_1_phi_fu_270_p4 = newPixel_2_reg_945;
    end else begin
        ap_phi_mux_newPixel_1_phi_fu_270_p4 = ap_phi_reg_pp0_iter9_newPixel_1_reg_266;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op102_readreq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        in_r_ARVALID = 1'b1;
    end else begin
        in_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op113_read_state10 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_RREADY = 1'b1;
    end else begin
        in_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (empty_26_reg_903 == 1'd0) & (icmp_ln24_reg_899 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        in_r_blk_n_AR = m_axi_in_r_ARREADY;
    end else begin
        in_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((empty_26_reg_903_pp0_iter7_reg == 1'd0) & (icmp_ln24_reg_899_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        in_r_blk_n_R = m_axi_in_r_RVALID;
    end else begin
        in_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_reg_899 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuffer1_ce1 = 1'b1;
    end else begin
        lineBuffer1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_reg_899 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuffer1_we1 = 1'b1;
    end else begin
        lineBuffer1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuffer2_ce0 = 1'b1;
    end else begin
        lineBuffer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuffer2_ce1 = 1'b1;
    end else begin
        lineBuffer2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln24_reg_899_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuffer2_we1 = 1'b1;
    end else begin
        lineBuffer2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln51_reg_924_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_AWVALID = 1'b1;
    end else begin
        out_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln51_reg_924_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_BREADY = 1'b1;
    end else begin
        out_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln51_reg_924_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_WVALID = 1'b1;
    end else begin
        out_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln51_reg_924_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_blk_n_AW = m_axi_out_r_AWREADY;
    end else begin
        out_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln51_reg_924_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_blk_n_B = m_axi_out_r_BVALID;
    end else begin
        out_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln51_reg_924_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_r_blk_n_W = m_axi_out_r_WREADY;
    end else begin
        out_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Gx_fu_625_p2 = (sub_ln53_1_fu_619_p2 + zext_ln53_fu_570_p1);

assign Gy_fu_686_p2 = (sub_ln55_1_fu_680_p2 - zext_ln54_fu_650_p1);

assign abs29_fu_787_p3 = ((abscond28_fu_782_p2[0:0] == 1'b1) ? Gy_reg_957 : neg27_fu_777_p2);

assign abs_cast_fu_773_p1 = $signed(abs_fu_766_p3);

assign abs_fu_766_p3 = ((abscond_fu_761_p2[0:0] == 1'b1) ? Gx_reg_950 : neg_fu_756_p2);

assign abscond28_fu_782_p2 = (($signed(Gy_reg_957) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_761_p2 = (($signed(Gx_reg_950) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign add_ln24_1_fu_328_p2 = (row_fu_160 + 7'd1);

assign add_ln24_fu_302_p2 = (indvar_flatten_fu_164 + 13'd1);

assign add_ln25_fu_507_p2 = (select_ln24_fu_320_p3 + 7'd1);

assign add_ln32_1_fu_420_p2 = ($signed(sext_ln32_1_fu_416_p1) + $signed(zext_ln24_1_fu_378_p1));

assign add_ln32_2_fu_438_p2 = ($signed(sext_ln32_2_fu_434_p1) + $signed(inputImage_read_reg_894));

assign add_ln32_fu_410_p2 = ($signed(zext_ln29_fu_388_p1) + $signed(8'd255));

assign add_ln51_fu_463_p2 = ($signed(zext_ln29_fu_388_p1) + $signed(8'd255));

assign add_ln52_fu_597_p2 = (zext_ln52_2_fu_566_p1 + zext_ln52_1_fu_554_p1);

assign add_ln54_1_fu_664_p2 = (zext_ln54_1_fu_660_p1 + zext_ln55_fu_639_p1);

assign add_ln54_fu_654_p2 = (zext_ln52_fu_550_p1 + zext_ln53_1_fu_573_p1);

assign add_ln67_1_fu_703_p2 = ($signed(sext_ln67_2_fu_699_p1) + $signed(outputImage_read_reg_889));

assign add_ln67_2_fu_501_p2 = ($signed(sext_ln67_1_fu_497_p1) + $signed(zext_ln24_fu_374_p1));

assign add_ln67_fu_491_p2 = ($signed(zext_ln29_fu_388_p1) + $signed(8'd191));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_r_BVALID == 1'b0) & (or_ln51_reg_924_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_predicate_op113_read_state10 == 1'b1) & (in_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((out_r_BVALID == 1'b0) & (or_ln51_reg_924_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((ap_predicate_op113_read_state10 == 1'b1) & (in_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((out_r_BVALID == 1'b0) & (or_ln51_reg_924_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((ap_predicate_op113_read_state10 == 1'b1) & (in_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((ap_predicate_op113_read_state10 == 1'b1) & (in_r_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((out_r_AWREADY == 1'b0) & (or_ln51_reg_924_pp0_iter9_reg == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((out_r_WREADY == 1'b0) & (or_ln51_reg_924_pp0_iter10_reg == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter16 = ((out_r_BVALID == 1'b0) & (or_ln51_reg_924_pp0_iter15_reg == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op102_readreq_state3 == 1'b1) & (in_r_ARREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_651 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_newPixel_1_reg_266 = 'bx;

always @ (*) begin
    ap_predicate_op102_readreq_state3 = ((empty_26_reg_903 == 1'd0) & (icmp_ln24_reg_899 == 1'd0));
end

always @ (*) begin
    ap_predicate_op113_read_state10 = ((empty_26_reg_903_pp0_iter7_reg == 1'd0) & (icmp_ln24_reg_899_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp50_not11_fu_340_p2 = ((row_fu_160 == 7'd0) ? 1'b1 : 1'b0);

assign cmp50_not_mid1_fu_334_p2 = ((add_ln24_1_fu_328_p2 == 7'd0) ? 1'b1 : 1'b0);

assign empty_24_fu_392_p2 = ((select_ln24_fu_320_p3 == 7'd65) ? 1'b1 : 1'b0);

assign empty_25_fu_398_p2 = ((select_ln24_fu_320_p3 == 7'd0) ? 1'b1 : 1'b0);

assign empty_26_fu_404_p2 = (empty_25_fu_398_p2 | empty_24_fu_392_p2);

assign gradient_1_fu_813_p2 = (icmp_ln60_fu_808_p2 ^ 1'd1);

assign gradient_fu_798_p2 = ($signed(sext_ln57_fu_794_p1) + $signed(abs_cast_fu_773_p1));

assign icmp_ln24_fu_296_p2 = ((indvar_flatten_fu_164 == 13'd4224) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_314_p2 = ((col_fu_156 == 7'd66) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_479_p2 = ((tmp_fu_469_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_808_p2 = (($signed(sext_ln57_1_fu_804_p1) < $signed(EDGE_THRESHOLD)) ? 1'b1 : 1'b0);

assign lineBuffer2_address0 = trunc_ln51_cast12_fu_382_p1;

assign neg27_fu_777_p2 = (11'd0 - Gy_reg_957);

assign neg_fu_756_p2 = (11'd0 - Gx_reg_950);

assign newPixel_2_fu_528_p1 = in_r_RDATA[7:0];

assign or_ln51_fu_485_p2 = (select_ln24_1_fu_346_p3 | icmp_ln51_fu_479_p2);

assign select_ln24_1_fu_346_p3 = ((icmp_ln25_fu_314_p2[0:0] == 1'b1) ? cmp50_not_mid1_fu_334_p2 : cmp50_not11_fu_340_p2);

assign select_ln24_2_fu_354_p3 = ((icmp_ln25_fu_314_p2[0:0] == 1'b1) ? add_ln24_1_fu_328_p2 : row_fu_160);

assign select_ln24_fu_320_p3 = ((icmp_ln25_fu_314_p2[0:0] == 1'b1) ? 7'd0 : col_fu_156);

assign select_ln57_fu_819_p3 = ((gradient_1_fu_813_p2[0:0] == 1'b1) ? 32'd255 : 32'd0);

assign sext_ln32_1_fu_416_p1 = $signed(add_ln32_fu_410_p2);

assign sext_ln32_2_fu_434_p1 = $signed(tmp_1_fu_426_p3);

assign sext_ln32_fu_453_p1 = $signed(trunc_ln_fu_443_p4);

assign sext_ln57_1_fu_804_p1 = $signed(gradient_fu_798_p2);

assign sext_ln57_fu_794_p1 = $signed(abs29_fu_787_p3);

assign sext_ln67_1_fu_497_p1 = $signed(add_ln67_fu_491_p2);

assign sext_ln67_2_fu_699_p1 = $signed(tmp_2_fu_692_p3);

assign sext_ln67_fu_718_p1 = $signed(trunc_ln1_fu_708_p4);

assign shl_ln1_fu_581_p3 = {{newPixel_fu_168}, {1'd0}};

assign shl_ln2_fu_631_p3 = {{empty_19_fu_148}, {1'd0}};

assign shl_ln3_fu_643_p3 = {{lineBuffer2_load_reg_933_pp0_iter8_reg}, {1'd0}};

assign shl_ln_fu_558_p3 = {{empty_22_fu_176}, {1'd0}};

assign sub_ln52_fu_607_p2 = (zext_ln52_4_fu_603_p1 - zext_ln53_2_fu_577_p1);

assign sub_ln53_1_fu_619_p2 = (sub_ln53_fu_613_p2 - zext_ln52_3_fu_593_p1);

assign sub_ln53_fu_613_p2 = (sub_ln52_fu_607_p2 - zext_ln53_3_fu_589_p1);

assign sub_ln55_1_fu_680_p2 = (sub_ln55_fu_674_p2 - zext_ln53_fu_570_p1);

assign sub_ln55_fu_674_p2 = (zext_ln55_1_fu_670_p1 - zext_ln52_3_fu_593_p1);

assign tmp_1_fu_426_p3 = {{add_ln32_1_fu_420_p2}, {2'd0}};

assign tmp_2_fu_692_p3 = {{add_ln67_2_reg_928_pp0_iter8_reg}, {2'd0}};

assign tmp_fu_469_p4 = {{add_ln51_fu_463_p2[7:6]}};

assign trunc_ln1_fu_708_p4 = {{add_ln67_1_fu_703_p2[63:2]}};

assign trunc_ln24_fu_362_p1 = select_ln24_2_fu_354_p3[5:0];

assign trunc_ln51_cast12_fu_382_p1 = select_ln24_fu_320_p3;

assign trunc_ln_fu_443_p4 = {{add_ln32_2_fu_438_p2[63:2]}};

assign zext_ln24_1_fu_378_p1 = zext_ln25_mid2_v_fu_366_p3;

assign zext_ln24_fu_374_p1 = zext_ln25_mid2_v_fu_366_p3;

assign zext_ln25_mid2_v_fu_366_p3 = {{trunc_ln24_fu_362_p1}, {6'd0}};

assign zext_ln29_fu_388_p1 = select_ln24_fu_320_p3;

assign zext_ln52_1_fu_554_p1 = empty_20_fu_152;

assign zext_ln52_2_fu_566_p1 = shl_ln_fu_558_p3;

assign zext_ln52_3_fu_593_p1 = ap_phi_mux_newPixel_1_phi_fu_270_p4;

assign zext_ln52_4_fu_603_p1 = add_ln52_fu_597_p2;

assign zext_ln52_fu_550_p1 = empty_20_fu_152;

assign zext_ln53_1_fu_573_p1 = empty_fu_144;

assign zext_ln53_2_fu_577_p1 = empty_fu_144;

assign zext_ln53_3_fu_589_p1 = shl_ln1_fu_581_p3;

assign zext_ln53_fu_570_p1 = lineBuffer1_load_reg_939_pp0_iter8_reg;

assign zext_ln54_1_fu_660_p1 = add_ln54_fu_654_p2;

assign zext_ln54_fu_650_p1 = shl_ln3_fu_643_p3;

assign zext_ln55_1_fu_670_p1 = add_ln54_1_fu_664_p2;

assign zext_ln55_fu_639_p1 = shl_ln2_fu_631_p3;

always @ (posedge ap_clk) begin
    select_ln57_reg_970[31:8] <= 24'b000000000000000000000000;
end

endmodule //edge_detect
