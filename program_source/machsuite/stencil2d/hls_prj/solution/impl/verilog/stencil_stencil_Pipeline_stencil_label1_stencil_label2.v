// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil_stencil_Pipeline_stencil_label1_stencil_label2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        orig_address0,
        orig_ce0,
        orig_q0,
        orig_address1,
        orig_ce1,
        orig_q1,
        filter_load,
        filter_load_1,
        filter_load_2,
        filter_load_3,
        filter_load_4,
        filter_load_5,
        filter_load_6,
        filter_load_7,
        filter_load_8,
        sol_address0,
        sol_ce0,
        sol_we0,
        sol_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] orig_address0;
output   orig_ce0;
input  [31:0] orig_q0;
output  [12:0] orig_address1;
output   orig_ce1;
input  [31:0] orig_q1;
input  [31:0] filter_load;
input  [31:0] filter_load_1;
input  [31:0] filter_load_2;
input  [31:0] filter_load_3;
input  [31:0] filter_load_4;
input  [31:0] filter_load_5;
input  [31:0] filter_load_6;
input  [31:0] filter_load_7;
input  [31:0] filter_load_8;
output  [12:0] sol_address0;
output   sol_ce0;
output   sol_we0;
output  [31:0] sol_d0;

reg ap_idle;
reg[12:0] orig_address0;
reg orig_ce0;
reg[12:0] orig_address1;
reg orig_ce1;
reg sol_ce0;
reg sol_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln7_reg_600;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
reg  signed [31:0] reg_236;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] reg_241;
wire   [0:0] icmp_ln7_fu_263_p2;
reg   [6:0] r_load_reg_604;
wire   [0:0] icmp_ln8_fu_281_p2;
reg   [0:0] icmp_ln8_reg_610;
wire   [5:0] select_ln4_fu_287_p3;
reg   [5:0] select_ln4_reg_616;
wire   [6:0] empty_6_fu_295_p2;
reg   [6:0] empty_6_reg_623;
wire   [12:0] add_ln_fu_309_p3;
reg   [12:0] add_ln_reg_628;
wire   [63:0] zext_ln12_fu_317_p1;
reg   [63:0] zext_ln12_reg_633;
reg   [63:0] zext_ln12_reg_633_pp0_iter1_reg;
wire   [12:0] add_ln12_3_fu_364_p3;
reg   [12:0] add_ln12_3_reg_653;
wire   [31:0] mul_ln12_fu_376_p2;
reg   [31:0] mul_ln12_reg_664;
wire   [31:0] mul_ln12_1_fu_381_p2;
reg   [31:0] mul_ln12_1_reg_669;
wire   [31:0] mul_ln12_2_fu_418_p2;
reg   [31:0] mul_ln12_2_reg_684;
wire   [31:0] mul_ln12_3_fu_423_p2;
reg   [31:0] mul_ln12_3_reg_689;
wire   [12:0] add_ln12_6_fu_428_p3;
reg   [12:0] add_ln12_6_reg_694;
wire   [31:0] add_ln13_fu_451_p2;
reg   [31:0] add_ln13_reg_709;
wire   [31:0] mul_ln12_4_fu_455_p2;
reg   [31:0] mul_ln12_4_reg_714;
wire   [31:0] mul_ln12_5_fu_460_p2;
reg   [31:0] mul_ln12_5_reg_719;
wire   [31:0] add_ln13_1_fu_475_p2;
reg   [31:0] add_ln13_1_reg_729;
wire   [31:0] mul_ln12_6_fu_489_p2;
reg   [31:0] mul_ln12_6_reg_734;
wire   [31:0] mul_ln12_7_fu_494_p2;
reg   [31:0] mul_ln12_7_reg_739;
wire   [31:0] mul_ln12_8_fu_499_p2;
reg   [31:0] mul_ln12_8_reg_744;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln12_1_fu_328_p1;
wire   [63:0] zext_ln12_2_fu_359_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln12_3_fu_371_p1;
wire   [63:0] zext_ln12_4_fu_391_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln12_5_fu_401_p1;
wire   [63:0] zext_ln12_6_fu_435_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln12_7_fu_446_p1;
wire   [63:0] zext_ln12_8_fu_470_p1;
wire    ap_block_pp0_stage4;
reg   [5:0] c_fu_76;
wire   [5:0] add_ln8_fu_479_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_c_load;
reg   [6:0] r_fu_80;
wire   [6:0] select_ln7_fu_301_p3;
reg   [6:0] ap_sig_allocacmp_r_load;
reg   [12:0] indvar_flatten_fu_84;
wire   [12:0] add_ln7_fu_269_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [12:0] add_ln12_fu_322_p2;
wire   [6:0] p_mid1_fu_343_p2;
wire   [12:0] add_ln12_1_fu_354_p2;
wire   [6:0] select_ln4_1_fu_348_p3;
wire   [12:0] add_ln12_2_fu_386_p2;
wire   [12:0] add_ln12_4_fu_396_p2;
wire   [6:0] select_ln4_2_fu_406_p3;
wire   [6:0] add_ln4_fu_413_p2;
wire   [12:0] add_ln12_5_fu_440_p2;
wire   [12:0] add_ln12_7_fu_465_p2;
wire   [31:0] add_ln13_4_fu_512_p2;
wire   [31:0] add_ln13_5_fu_516_p2;
wire   [31:0] add_ln13_3_fu_508_p2;
wire   [31:0] add_ln13_6_fu_521_p2;
wire   [31:0] add_ln13_2_fu_504_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(reg_236),
    .din1(filter_load),
    .dout(mul_ln12_fu_376_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(reg_241),
    .din1(filter_load_1),
    .dout(mul_ln12_1_fu_381_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(reg_236),
    .din1(filter_load_2),
    .dout(mul_ln12_2_fu_418_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(reg_241),
    .din1(filter_load_3),
    .dout(mul_ln12_3_fu_423_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(reg_236),
    .din1(filter_load_4),
    .dout(mul_ln12_4_fu_455_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(reg_241),
    .din1(filter_load_5),
    .dout(mul_ln12_5_fu_460_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(reg_236),
    .din1(filter_load_6),
    .dout(mul_ln12_6_fu_489_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(reg_241),
    .din1(filter_load_7),
    .dout(mul_ln12_7_fu_494_p2)
);

stencil_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(reg_236),
    .din1(filter_load_8),
    .dout(mul_ln12_8_fu_499_p2)
);

stencil_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_fu_76 <= 6'd0;
    end else if (((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        c_fu_76 <= add_ln8_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_263_p2 == 1'd0))) begin
            indvar_flatten_fu_84 <= add_ln7_fu_269_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_263_p2 == 1'd0))) begin
            r_fu_80 <= select_ln7_fu_301_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_80 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_236 <= orig_q0;
    end else if ((((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_236 <= orig_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln12_3_reg_653 <= add_ln12_3_fu_364_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln12_6_reg_694 <= add_ln12_6_fu_428_p3;
        add_ln13_reg_709 <= add_ln13_fu_451_p2;
        mul_ln12_2_reg_684 <= mul_ln12_2_fu_418_p2;
        mul_ln12_3_reg_689 <= mul_ln12_3_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln13_1_reg_729 <= add_ln13_1_fu_475_p2;
        mul_ln12_4_reg_714 <= mul_ln12_4_fu_455_p2;
        mul_ln12_5_reg_719 <= mul_ln12_5_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_fu_263_p2 == 1'd0))) begin
        add_ln_reg_628 <= add_ln_fu_309_p3;
        empty_6_reg_623 <= empty_6_fu_295_p2;
        icmp_ln8_reg_610 <= icmp_ln8_fu_281_p2;
        r_load_reg_604 <= ap_sig_allocacmp_r_load;
        select_ln4_reg_616 <= select_ln4_fu_287_p3;
        zext_ln12_reg_633[12 : 0] <= zext_ln12_fu_317_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln7_reg_600 <= icmp_ln7_fu_263_p2;
        mul_ln12_6_reg_734 <= mul_ln12_6_fu_489_p2;
        mul_ln12_7_reg_739 <= mul_ln12_7_fu_494_p2;
        zext_ln12_reg_633_pp0_iter1_reg[12 : 0] <= zext_ln12_reg_633[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln12_1_reg_669 <= mul_ln12_1_fu_381_p2;
        mul_ln12_reg_664 <= mul_ln12_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln12_8_reg_744 <= mul_ln12_8_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln7_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_241 <= orig_q0;
    end
end

always @ (*) begin
    if (((icmp_ln7_reg_600 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c_load = 6'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_r_load = 7'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_80;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            orig_address0 = zext_ln12_8_fu_470_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            orig_address0 = zext_ln12_7_fu_446_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            orig_address0 = zext_ln12_5_fu_401_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            orig_address0 = zext_ln12_3_fu_371_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            orig_address0 = zext_ln12_1_fu_328_p1;
        end else begin
            orig_address0 = 'bx;
        end
    end else begin
        orig_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            orig_address1 = zext_ln12_6_fu_435_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            orig_address1 = zext_ln12_4_fu_391_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            orig_address1 = zext_ln12_2_fu_359_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            orig_address1 = zext_ln12_fu_317_p1;
        end else begin
            orig_address1 = 'bx;
        end
    end else begin
        orig_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_ce0 = 1'b1;
    end else begin
        orig_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_ce1 = 1'b1;
    end else begin
        orig_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sol_ce0 = 1'b1;
    end else begin
        sol_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sol_we0 = 1'b1;
    end else begin
        sol_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_354_p2 = (add_ln_reg_628 + 13'd2);

assign add_ln12_2_fu_386_p2 = (add_ln12_3_reg_653 + 13'd1);

assign add_ln12_3_fu_364_p3 = {{select_ln4_1_fu_348_p3}, {select_ln4_reg_616}};

assign add_ln12_4_fu_396_p2 = (add_ln12_3_reg_653 + 13'd2);

assign add_ln12_5_fu_440_p2 = (add_ln12_6_fu_428_p3 + 13'd1);

assign add_ln12_6_fu_428_p3 = {{add_ln4_fu_413_p2}, {select_ln4_reg_616}};

assign add_ln12_7_fu_465_p2 = (add_ln12_6_reg_694 + 13'd2);

assign add_ln12_fu_322_p2 = (add_ln_fu_309_p3 + 13'd1);

assign add_ln13_1_fu_475_p2 = (mul_ln12_2_reg_684 + mul_ln12_3_reg_689);

assign add_ln13_2_fu_504_p2 = (add_ln13_1_reg_729 + add_ln13_reg_709);

assign add_ln13_3_fu_508_p2 = (mul_ln12_4_reg_714 + mul_ln12_5_reg_719);

assign add_ln13_4_fu_512_p2 = (mul_ln12_7_reg_739 + mul_ln12_8_reg_744);

assign add_ln13_5_fu_516_p2 = (add_ln13_4_fu_512_p2 + mul_ln12_6_reg_734);

assign add_ln13_6_fu_521_p2 = (add_ln13_5_fu_516_p2 + add_ln13_3_fu_508_p2);

assign add_ln13_fu_451_p2 = (mul_ln12_1_reg_669 + mul_ln12_reg_664);

assign add_ln4_fu_413_p2 = (r_load_reg_604 + select_ln4_2_fu_406_p3);

assign add_ln7_fu_269_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign add_ln8_fu_479_p2 = (select_ln4_reg_616 + 6'd1);

assign add_ln_fu_309_p3 = {{select_ln7_fu_301_p3}, {select_ln4_fu_287_p3}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign empty_6_fu_295_p2 = (ap_sig_allocacmp_r_load + 7'd1);

assign icmp_ln7_fu_263_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd7812) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_281_p2 = ((ap_sig_allocacmp_c_load == 6'd62) ? 1'b1 : 1'b0);

assign p_mid1_fu_343_p2 = (r_load_reg_604 + 7'd2);

assign select_ln4_1_fu_348_p3 = ((icmp_ln8_reg_610[0:0] == 1'b1) ? p_mid1_fu_343_p2 : empty_6_reg_623);

assign select_ln4_2_fu_406_p3 = ((icmp_ln8_reg_610[0:0] == 1'b1) ? 7'd3 : 7'd2);

assign select_ln4_fu_287_p3 = ((icmp_ln8_fu_281_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_c_load);

assign select_ln7_fu_301_p3 = ((icmp_ln8_fu_281_p2[0:0] == 1'b1) ? empty_6_fu_295_p2 : ap_sig_allocacmp_r_load);

assign sol_address0 = zext_ln12_reg_633_pp0_iter1_reg;

assign sol_d0 = (add_ln13_6_fu_521_p2 + add_ln13_2_fu_504_p2);

assign zext_ln12_1_fu_328_p1 = add_ln12_fu_322_p2;

assign zext_ln12_2_fu_359_p1 = add_ln12_1_fu_354_p2;

assign zext_ln12_3_fu_371_p1 = add_ln12_3_fu_364_p3;

assign zext_ln12_4_fu_391_p1 = add_ln12_2_fu_386_p2;

assign zext_ln12_5_fu_401_p1 = add_ln12_4_fu_396_p2;

assign zext_ln12_6_fu_435_p1 = add_ln12_6_fu_428_p3;

assign zext_ln12_7_fu_446_p1 = add_ln12_5_fu_440_p2;

assign zext_ln12_8_fu_470_p1 = add_ln12_7_fu_465_p2;

assign zext_ln12_fu_317_p1 = add_ln_fu_309_p3;

always @ (posedge ap_clk) begin
    zext_ln12_reg_633[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln12_reg_633_pp0_iter1_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //stencil_stencil_Pipeline_stencil_label1_stencil_label2
