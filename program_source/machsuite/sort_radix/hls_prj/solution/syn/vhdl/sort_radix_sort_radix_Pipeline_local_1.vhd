-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sort_radix_sort_radix_Pipeline_local_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bucket_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    bucket_ce0 : OUT STD_LOGIC;
    bucket_we0 : OUT STD_LOGIC;
    bucket_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bucket_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    bucket_ce1 : OUT STD_LOGIC;
    bucket_we1 : OUT STD_LOGIC;
    bucket_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bucket_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sort_radix_sort_radix_Pipeline_local_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv11_A : STD_LOGIC_VECTOR (10 downto 0) := "00000001010";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv11_C : STD_LOGIC_VECTOR (10 downto 0) := "00000001100";
    constant ap_const_lv11_D : STD_LOGIC_VECTOR (10 downto 0) := "00000001101";
    constant ap_const_lv11_E : STD_LOGIC_VECTOR (10 downto 0) := "00000001110";
    constant ap_const_lv11_F : STD_LOGIC_VECTOR (10 downto 0) := "00000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln13_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_241_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_500 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_1_reg_523 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal bucket_addr_2_reg_535 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_3_reg_541 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_4_reg_547 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_5_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_load_4_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal bucket_load_5_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_addr_6_reg_569 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_7_reg_575 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_load_6_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal bucket_load_7_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_addr_8_reg_591 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_9_reg_597 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_load_8_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal bucket_load_9_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_addr_10_reg_613 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_11_reg_619 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_load_10_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal bucket_load_11_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_addr_12_reg_635 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_13_reg_641 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_load_12_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal bucket_load_13_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal bucket_addr_14_reg_657 : STD_LOGIC_VECTOR (10 downto 0);
    signal bucket_addr_15_reg_663 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_2_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_2_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal add_ln16_6_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_6_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal add_ln16_8_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_8_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal add_ln16_10_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_10_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal add_ln16_12_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_12_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal add_ln16_14_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_14_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal p_cast_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_1_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_2_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_3_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_4_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_5_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_6_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_7_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_8_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_9_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_10_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_11_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_12_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_13_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_14_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal radixID_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_radixID_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_3_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_5_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_7_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_9_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_11_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_13_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_14_fu_237_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln16_fu_254_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_1_fu_276_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_2_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_3_fu_296_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_4_fu_306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_5_fu_316_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_6_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_7_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_8_fu_346_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_9_fu_356_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_10_fu_366_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_11_fu_376_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_12_fu_386_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_13_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln16_14_fu_406_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sort_radix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sort_radix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    radixID_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln13_fu_225_p2 = ap_const_lv1_0)) then 
                    radixID_fu_68 <= add_ln13_fu_231_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    radixID_fu_68 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln16_10_reg_692 <= add_ln16_10_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln16_12_reg_698 <= add_ln16_12_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln16_14_reg_704 <= add_ln16_14_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln16_2_reg_668 <= add_ln16_2_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln16_4_reg_674 <= add_ln16_4_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln16_6_reg_680 <= add_ln16_6_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln16_8_reg_686 <= add_ln16_8_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln16_reg_529 <= add_ln16_fu_270_p2;
                    bucket_addr_2_reg_535(10 downto 4) <= zext_ln16_1_fu_281_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_3_reg_541(10 downto 4) <= zext_ln16_2_fu_291_p1(11 - 1 downto 0)(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    bucket_addr_10_reg_613(10 downto 4) <= zext_ln16_9_fu_361_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_11_reg_619(10 downto 4) <= zext_ln16_10_fu_371_p1(11 - 1 downto 0)(10 downto 4);
                bucket_load_8_reg_603 <= bucket_q1;
                bucket_load_9_reg_608 <= bucket_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    bucket_addr_12_reg_635(10 downto 4) <= zext_ln16_11_fu_381_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_13_reg_641(10 downto 4) <= zext_ln16_12_fu_391_p1(11 - 1 downto 0)(10 downto 4);
                bucket_load_10_reg_625 <= bucket_q1;
                bucket_load_11_reg_630 <= bucket_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    bucket_addr_14_reg_657(10 downto 4) <= zext_ln16_13_fu_401_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_15_reg_663(10 downto 4) <= zext_ln16_14_fu_411_p1(11 - 1 downto 0)(10 downto 4);
                bucket_load_12_reg_647 <= bucket_q1;
                bucket_load_13_reg_652 <= bucket_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln13_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    bucket_addr_1_reg_523(10 downto 4) <= zext_ln16_fu_260_p1(11 - 1 downto 0)(10 downto 4);
                    tmp_3_reg_500(10 downto 4) <= tmp_3_fu_241_p3(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    bucket_addr_4_reg_547(10 downto 4) <= zext_ln16_3_fu_301_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_5_reg_553(10 downto 4) <= zext_ln16_4_fu_311_p1(11 - 1 downto 0)(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    bucket_addr_6_reg_569(10 downto 4) <= zext_ln16_5_fu_321_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_7_reg_575(10 downto 4) <= zext_ln16_6_fu_331_p1(11 - 1 downto 0)(10 downto 4);
                bucket_load_4_reg_559 <= bucket_q1;
                bucket_load_5_reg_564 <= bucket_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    bucket_addr_8_reg_591(10 downto 4) <= zext_ln16_7_fu_341_p1(11 - 1 downto 0)(10 downto 4);
                    bucket_addr_9_reg_597(10 downto 4) <= zext_ln16_8_fu_351_p1(11 - 1 downto 0)(10 downto 4);
                bucket_load_6_reg_581 <= bucket_q1;
                bucket_load_7_reg_586 <= bucket_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_209 <= bucket_q1;
                reg_213 <= bucket_q0;
            end if;
        end if;
    end process;
    tmp_3_reg_500(3 downto 0) <= "0000";
    bucket_addr_1_reg_523(3 downto 0) <= "0001";
    bucket_addr_2_reg_535(3 downto 0) <= "0010";
    bucket_addr_3_reg_541(3 downto 0) <= "0011";
    bucket_addr_4_reg_547(3 downto 0) <= "0100";
    bucket_addr_5_reg_553(3 downto 0) <= "0101";
    bucket_addr_6_reg_569(3 downto 0) <= "0110";
    bucket_addr_7_reg_575(3 downto 0) <= "0111";
    bucket_addr_8_reg_591(3 downto 0) <= "1000";
    bucket_addr_9_reg_597(3 downto 0) <= "1001";
    bucket_addr_10_reg_613(3 downto 0) <= "1010";
    bucket_addr_11_reg_619(3 downto 0) <= "1011";
    bucket_addr_12_reg_635(3 downto 0) <= "1100";
    bucket_addr_13_reg_641(3 downto 0) <= "1101";
    bucket_addr_14_reg_657(3 downto 0) <= "1110";
    bucket_addr_15_reg_663(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_225_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln13_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln13_fu_231_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_radixID_2) + unsigned(ap_const_lv8_1));
    add_ln16_10_fu_463_p2 <= std_logic_vector(unsigned(bucket_load_11_reg_630) + unsigned(add_ln16_9_fu_458_p2));
    add_ln16_11_fu_468_p2 <= std_logic_vector(unsigned(bucket_load_12_reg_647) + unsigned(add_ln16_10_reg_692));
    add_ln16_12_fu_473_p2 <= std_logic_vector(unsigned(bucket_load_13_reg_652) + unsigned(add_ln16_11_fu_468_p2));
    add_ln16_13_fu_478_p2 <= std_logic_vector(unsigned(reg_209) + unsigned(add_ln16_12_reg_698));
    add_ln16_14_fu_484_p2 <= std_logic_vector(unsigned(reg_213) + unsigned(add_ln16_13_fu_478_p2));
    add_ln16_1_fu_416_p2 <= std_logic_vector(unsigned(reg_209) + unsigned(add_ln16_reg_529));
    add_ln16_2_fu_422_p2 <= std_logic_vector(unsigned(reg_213) + unsigned(add_ln16_1_fu_416_p2));
    add_ln16_3_fu_428_p2 <= std_logic_vector(unsigned(bucket_load_4_reg_559) + unsigned(add_ln16_2_reg_668));
    add_ln16_4_fu_433_p2 <= std_logic_vector(unsigned(bucket_load_5_reg_564) + unsigned(add_ln16_3_fu_428_p2));
    add_ln16_5_fu_438_p2 <= std_logic_vector(unsigned(bucket_load_6_reg_581) + unsigned(add_ln16_4_reg_674));
    add_ln16_6_fu_443_p2 <= std_logic_vector(unsigned(bucket_load_7_reg_586) + unsigned(add_ln16_5_fu_438_p2));
    add_ln16_7_fu_448_p2 <= std_logic_vector(unsigned(bucket_load_8_reg_603) + unsigned(add_ln16_6_reg_680));
    add_ln16_8_fu_453_p2 <= std_logic_vector(unsigned(bucket_load_9_reg_608) + unsigned(add_ln16_7_fu_448_p2));
    add_ln16_9_fu_458_p2 <= std_logic_vector(unsigned(bucket_load_10_reg_625) + unsigned(add_ln16_8_reg_686));
    add_ln16_fu_270_p2 <= std_logic_vector(unsigned(bucket_q0) + unsigned(bucket_q1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln13_fu_225_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln13_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_radixID_2_assign_proc : process(ap_CS_fsm_state1, radixID_fu_68, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_radixID_2 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_radixID_2 <= radixID_fu_68;
        end if; 
    end process;


    bucket_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln13_fu_225_p2, ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state2, bucket_addr_2_reg_535, bucket_addr_4_reg_547, ap_CS_fsm_state4, bucket_addr_6_reg_569, ap_CS_fsm_state5, bucket_addr_8_reg_591, ap_CS_fsm_state6, bucket_addr_10_reg_613, ap_CS_fsm_state7, bucket_addr_12_reg_635, ap_CS_fsm_state8, bucket_addr_14_reg_657, bucket_addr_15_reg_663, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln16_fu_260_p1, zext_ln16_2_fu_291_p1, zext_ln16_4_fu_311_p1, zext_ln16_6_fu_331_p1, zext_ln16_8_fu_351_p1, zext_ln16_10_fu_371_p1, zext_ln16_12_fu_391_p1, zext_ln16_14_fu_411_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bucket_address0 <= bucket_addr_15_reg_663;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bucket_address0 <= bucket_addr_14_reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bucket_address0 <= bucket_addr_12_reg_635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bucket_address0 <= bucket_addr_10_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_address0 <= bucket_addr_8_reg_591;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bucket_address0 <= bucket_addr_6_reg_569;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_address0 <= bucket_addr_4_reg_547;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bucket_address0 <= bucket_addr_2_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_address0 <= zext_ln16_14_fu_411_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bucket_address0 <= zext_ln16_12_fu_391_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bucket_address0 <= zext_ln16_10_fu_371_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bucket_address0 <= zext_ln16_8_fu_351_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bucket_address0 <= zext_ln16_6_fu_331_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_address0 <= zext_ln16_4_fu_311_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bucket_address0 <= zext_ln16_2_fu_291_p1(11 - 1 downto 0);
        elsif (((icmp_ln13_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_address0 <= zext_ln16_fu_260_p1(11 - 1 downto 0);
        else 
            bucket_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    bucket_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln13_fu_225_p2, ap_CS_fsm_state3, ap_CS_fsm_state9, bucket_addr_1_reg_523, ap_CS_fsm_state2, bucket_addr_3_reg_541, bucket_addr_5_reg_553, ap_CS_fsm_state4, bucket_addr_7_reg_575, ap_CS_fsm_state5, bucket_addr_9_reg_597, ap_CS_fsm_state6, bucket_addr_11_reg_619, ap_CS_fsm_state7, bucket_addr_13_reg_641, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, p_cast_fu_249_p1, zext_ln16_1_fu_281_p1, zext_ln16_3_fu_301_p1, zext_ln16_5_fu_321_p1, zext_ln16_7_fu_341_p1, zext_ln16_9_fu_361_p1, zext_ln16_11_fu_381_p1, zext_ln16_13_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bucket_address1 <= bucket_addr_13_reg_641;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bucket_address1 <= bucket_addr_11_reg_619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bucket_address1 <= bucket_addr_9_reg_597;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_address1 <= bucket_addr_7_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bucket_address1 <= bucket_addr_5_reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_address1 <= bucket_addr_3_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bucket_address1 <= bucket_addr_1_reg_523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bucket_address1 <= zext_ln16_13_fu_401_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bucket_address1 <= zext_ln16_11_fu_381_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bucket_address1 <= zext_ln16_9_fu_361_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bucket_address1 <= zext_ln16_7_fu_341_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bucket_address1 <= zext_ln16_5_fu_321_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bucket_address1 <= zext_ln16_3_fu_301_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bucket_address1 <= zext_ln16_1_fu_281_p1(11 - 1 downto 0);
        elsif (((icmp_ln13_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bucket_address1 <= p_cast_fu_249_p1(11 - 1 downto 0);
        else 
            bucket_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    bucket_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln13_fu_225_p2, ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln13_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bucket_ce0 <= ap_const_logic_1;
        else 
            bucket_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln13_fu_225_p2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start_int = ap_const_logic_1) and (icmp_ln13_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bucket_ce1 <= ap_const_logic_1;
        else 
            bucket_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, add_ln16_14_reg_704, ap_CS_fsm_state15, add_ln16_1_fu_416_p2, add_ln16_3_fu_428_p2, add_ln16_5_fu_438_p2, add_ln16_7_fu_448_p2, add_ln16_9_fu_458_p2, add_ln16_11_fu_468_p2, add_ln16_13_fu_478_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bucket_d0 <= add_ln16_14_reg_704;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bucket_d0 <= add_ln16_13_fu_478_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bucket_d0 <= add_ln16_11_fu_468_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bucket_d0 <= add_ln16_9_fu_458_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_d0 <= add_ln16_7_fu_448_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bucket_d0 <= add_ln16_5_fu_438_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_d0 <= add_ln16_3_fu_428_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bucket_d0 <= add_ln16_1_fu_416_p2;
        else 
            bucket_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bucket_d1_assign_proc : process(ap_CS_fsm_state9, add_ln16_reg_529, add_ln16_2_reg_668, add_ln16_4_reg_674, ap_CS_fsm_state10, add_ln16_6_reg_680, ap_CS_fsm_state11, add_ln16_8_reg_686, ap_CS_fsm_state12, add_ln16_10_reg_692, ap_CS_fsm_state13, add_ln16_12_reg_698, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bucket_d1 <= add_ln16_12_reg_698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bucket_d1 <= add_ln16_10_reg_692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bucket_d1 <= add_ln16_8_reg_686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bucket_d1 <= add_ln16_6_reg_680;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bucket_d1 <= add_ln16_4_reg_674;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bucket_d1 <= add_ln16_2_reg_668;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bucket_d1 <= add_ln16_reg_529;
        else 
            bucket_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bucket_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            bucket_we0 <= ap_const_logic_1;
        else 
            bucket_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bucket_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            bucket_we1 <= ap_const_logic_1;
        else 
            bucket_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_14_fu_237_p1 <= ap_sig_allocacmp_radixID_2(7 - 1 downto 0);
    icmp_ln13_fu_225_p2 <= "1" when (ap_sig_allocacmp_radixID_2 = ap_const_lv8_80) else "0";
    or_ln16_10_fu_366_p2 <= (tmp_3_reg_500 or ap_const_lv11_B);
    or_ln16_11_fu_376_p2 <= (tmp_3_reg_500 or ap_const_lv11_C);
    or_ln16_12_fu_386_p2 <= (tmp_3_reg_500 or ap_const_lv11_D);
    or_ln16_13_fu_396_p2 <= (tmp_3_reg_500 or ap_const_lv11_E);
    or_ln16_14_fu_406_p2 <= (tmp_3_reg_500 or ap_const_lv11_F);
    or_ln16_1_fu_276_p2 <= (tmp_3_reg_500 or ap_const_lv11_2);
    or_ln16_2_fu_286_p2 <= (tmp_3_reg_500 or ap_const_lv11_3);
    or_ln16_3_fu_296_p2 <= (tmp_3_reg_500 or ap_const_lv11_4);
    or_ln16_4_fu_306_p2 <= (tmp_3_reg_500 or ap_const_lv11_5);
    or_ln16_5_fu_316_p2 <= (tmp_3_reg_500 or ap_const_lv11_6);
    or_ln16_6_fu_326_p2 <= (tmp_3_reg_500 or ap_const_lv11_7);
    or_ln16_7_fu_336_p2 <= (tmp_3_reg_500 or ap_const_lv11_8);
    or_ln16_8_fu_346_p2 <= (tmp_3_reg_500 or ap_const_lv11_9);
    or_ln16_9_fu_356_p2 <= (tmp_3_reg_500 or ap_const_lv11_A);
    or_ln16_fu_254_p2 <= (tmp_3_fu_241_p3 or ap_const_lv11_1);
    p_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_241_p3),64));
    tmp_3_fu_241_p3 <= (empty_14_fu_237_p1 & ap_const_lv4_0);
    zext_ln16_10_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_10_fu_366_p2),64));
    zext_ln16_11_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_11_fu_376_p2),64));
    zext_ln16_12_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_12_fu_386_p2),64));
    zext_ln16_13_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_13_fu_396_p2),64));
    zext_ln16_14_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_14_fu_406_p2),64));
    zext_ln16_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_1_fu_276_p2),64));
    zext_ln16_2_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_2_fu_286_p2),64));
    zext_ln16_3_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_3_fu_296_p2),64));
    zext_ln16_4_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_4_fu_306_p2),64));
    zext_ln16_5_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_5_fu_316_p2),64));
    zext_ln16_6_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_6_fu_326_p2),64));
    zext_ln16_7_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_7_fu_336_p2),64));
    zext_ln16_8_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_8_fu_346_p2),64));
    zext_ln16_9_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_9_fu_356_p2),64));
    zext_ln16_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_fu_254_p2),64));
end behav;
