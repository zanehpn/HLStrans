// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kalman_filter_kalman_filter_Pipeline_VITIS_LOOP_52_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_local_V_address0,
        in_local_V_ce0,
        in_local_V_q0,
        u_hat_arr_V_address0,
        u_hat_arr_V_ce0,
        u_hat_arr_V_we0,
        u_hat_arr_V_d0,
        p_arr_1_V_address0,
        p_arr_1_V_ce0,
        p_arr_1_V_we0,
        p_arr_1_V_d0,
        out_local_V_address0,
        out_local_V_ce0,
        out_local_V_we0,
        out_local_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] in_local_V_address0;
output   in_local_V_ce0;
input  [18:0] in_local_V_q0;
output  [5:0] u_hat_arr_V_address0;
output   u_hat_arr_V_ce0;
output   u_hat_arr_V_we0;
output  [18:0] u_hat_arr_V_d0;
output  [5:0] p_arr_1_V_address0;
output   p_arr_1_V_ce0;
output   p_arr_1_V_we0;
output  [18:0] p_arr_1_V_d0;
output  [17:0] out_local_V_address0;
output   out_local_V_ce0;
output   out_local_V_we0;
output  [18:0] out_local_V_d0;

reg ap_idle;
reg in_local_V_ce0;
reg u_hat_arr_V_ce0;
reg u_hat_arr_V_we0;
reg p_arr_1_V_ce0;
reg p_arr_1_V_we0;
reg out_local_V_ce0;
reg out_local_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_1_cast175_fu_119_p1;
reg   [63:0] i_1_cast175_reg_156;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln53_fu_136_p1;
reg   [63:0] zext_ln53_reg_161;
wire    ap_block_pp0_stage0;
reg   [6:0] i_1_fu_40;
wire   [6:0] add_ln52_fu_113_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i;
wire   [5:0] trunc_ln53_fu_124_p1;
wire   [17:0] shl_ln_fu_128_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kalman_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_40 <= add_ln52_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_40 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_cast175_reg_156[6 : 0] <= i_1_cast175_fu_119_p1[6 : 0];
        zext_ln53_reg_161[17 : 12] <= zext_ln53_fu_136_p1[17 : 12];
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 7'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_local_V_ce0 = 1'b1;
    end else begin
        in_local_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_local_V_ce0 = 1'b1;
    end else begin
        out_local_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_local_V_we0 = 1'b1;
    end else begin
        out_local_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_arr_1_V_ce0 = 1'b1;
    end else begin
        p_arr_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_arr_1_V_we0 = 1'b1;
    end else begin
        p_arr_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_hat_arr_V_ce0 = 1'b1;
    end else begin
        u_hat_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_hat_arr_V_we0 = 1'b1;
    end else begin
        u_hat_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_113_p2 = (ap_sig_allocacmp_i + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_1_cast175_fu_119_p1 = ap_sig_allocacmp_i;

assign icmp_ln52_fu_107_p2 = ((ap_sig_allocacmp_i == 7'd64) ? 1'b1 : 1'b0);

assign in_local_V_address0 = zext_ln53_fu_136_p1;

assign out_local_V_address0 = zext_ln53_reg_161;

assign out_local_V_d0 = in_local_V_q0;

assign p_arr_1_V_address0 = i_1_cast175_fu_119_p1;

assign p_arr_1_V_d0 = 19'd32;

assign shl_ln_fu_128_p3 = {{trunc_ln53_fu_124_p1}, {12'd0}};

assign trunc_ln53_fu_124_p1 = ap_sig_allocacmp_i[5:0];

assign u_hat_arr_V_address0 = i_1_cast175_reg_156;

assign u_hat_arr_V_d0 = in_local_V_q0;

assign zext_ln53_fu_136_p1 = shl_ln_fu_128_p3;

always @ (posedge ap_clk) begin
    i_1_cast175_reg_156[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln53_reg_161[11:0] <= 12'b000000000000;
    zext_ln53_reg_161[63:18] <= 46'b0000000000000000000000000000000000000000000000;
end

endmodule //kalman_filter_kalman_filter_Pipeline_VITIS_LOOP_52_3
