-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity floyd_warshall is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    path_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    path_ce0 : OUT STD_LOGIC;
    path_we0 : OUT STD_LOGIC;
    path_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    path_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    path_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    path_ce1 : OUT STD_LOGIC;
    path_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of floyd_warshall is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "floyd_warshall_floyd_warshall,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.550000,HLS_SYN_LAT=432004,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=317,HLS_SYN_LUT=597,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_34BC0 : STD_LOGIC_VECTOR (17 downto 0) := "110100101111000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv12_E10 : STD_LOGIC_VECTOR (11 downto 0) := "111000010000";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln10_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_load_reg_489 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_load_reg_494 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_fu_192_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_reg_507 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_fu_206_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_reg_517 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal path_addr_1_reg_527 : STD_LOGIC_VECTOR (11 downto 0);
    signal path_addr_1_reg_527_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_3_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_3_reg_533 : STD_LOGIC_VECTOR (11 downto 0);
    signal addr_cmp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal path_load_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal path_load_1_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln13_3_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln13_5_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_6_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal reuse_addr_reg_fu_66 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln12_fu_363_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln11_1_fu_285_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_82 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln11_2_fu_374_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal k_fu_86 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln10_1_fu_226_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten14_fu_90 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln10_1_fu_171_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_allocacmp_indvar_flatten14_load : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln10_fu_220_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_237_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_1_fu_253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln10_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_299_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_291_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_2_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln13_1_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_fu_233_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_1_fu_317_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln11_fu_278_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln13_4_fu_328_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_2_fu_332_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln13_fu_257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_1_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal reuse_select_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_98 : BOOLEAN;
    signal ap_condition_383 : BOOLEAN;
    signal ap_condition_146 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component floyd_warshall_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component floyd_warshall_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_383)) then 
                    i_fu_78 <= ap_const_lv6_0;
                elsif ((ap_const_boolean_1 = ap_condition_98)) then 
                    i_fu_78 <= select_ln11_1_fu_285_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten14_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_146)) then
                if ((icmp_ln10_fu_165_p2 = ap_const_lv1_0)) then 
                    indvar_flatten14_fu_90 <= add_ln10_1_fu_171_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten14_fu_90 <= ap_const_lv18_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_383)) then 
                    indvar_flatten_fu_82 <= ap_const_lv12_0;
                elsif ((ap_const_boolean_1 = ap_condition_98)) then 
                    indvar_flatten_fu_82 <= select_ln11_2_fu_374_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_383)) then 
                    j_fu_74 <= ap_const_lv6_0;
                elsif ((ap_const_boolean_1 = ap_condition_98)) then 
                    j_fu_74 <= add_ln12_fu_363_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_383)) then 
                    k_fu_86 <= ap_const_lv6_0;
                elsif ((ap_const_boolean_1 = ap_condition_98)) then 
                    k_fu_86 <= select_ln10_1_fu_226_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_383)) then 
                    reuse_addr_reg_fu_66 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_const_boolean_1 = ap_condition_98)) then 
                    reuse_addr_reg_fu_66 <= zext_ln13_5_fu_338_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    reuse_reg_fu_70 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    reuse_reg_fu_70 <= select_ln13_fu_424_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_165_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln11_reg_517 <= add_ln11_fu_206_p2;
                icmp_ln11_reg_499 <= icmp_ln11_fu_186_p2;
                icmp_ln12_reg_512 <= icmp_ln12_fu_200_p2;
                indvar_flatten_load_reg_494 <= ap_sig_allocacmp_indvar_flatten_load;
                j_load_reg_489 <= ap_sig_allocacmp_j_load;
                select_ln10_reg_507 <= select_ln10_fu_192_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln13_3_reg_533 <= add_ln13_3_fu_343_p2;
                addr_cmp_reg_538 <= addr_cmp_fu_352_p2;
                path_addr_1_reg_527 <= zext_ln13_5_fu_338_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln13_reg_559 <= add_ln13_fu_414_p2;
                path_addr_1_reg_527_pp0_iter1_reg <= path_addr_1_reg_527;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_485 <= icmp_ln10_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                path_load_1_reg_554 <= path_q0;
                path_load_reg_548 <= path_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln10_1_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten14_load) + unsigned(ap_const_lv18_1));
    add_ln10_fu_220_p2 <= std_logic_vector(unsigned(k_fu_86) + unsigned(ap_const_lv6_1));
    add_ln11_1_fu_369_p2 <= std_logic_vector(unsigned(indvar_flatten_load_reg_494) + unsigned(ap_const_lv12_1));
    add_ln11_fu_206_p2 <= std_logic_vector(unsigned(select_ln10_fu_192_p3) + unsigned(ap_const_lv6_1));
    add_ln12_fu_363_p2 <= std_logic_vector(unsigned(select_ln11_fu_278_p3) + unsigned(ap_const_lv6_1));
    add_ln13_1_fu_317_p2 <= std_logic_vector(unsigned(sub_ln13_1_fu_311_p2) + unsigned(zext_ln13_fu_233_p1));
    add_ln13_2_fu_332_p2 <= std_logic_vector(unsigned(sub_ln13_1_fu_311_p2) + unsigned(zext_ln13_4_fu_328_p1));
    add_ln13_3_fu_343_p2 <= std_logic_vector(unsigned(sub_ln13_fu_257_p2) + unsigned(zext_ln13_4_fu_328_p1));
    add_ln13_fu_414_p2 <= std_logic_vector(unsigned(path_q1) + unsigned(reuse_select_fu_408_p3));
    addr_cmp_fu_352_p2 <= "1" when (reuse_addr_reg_fu_66 = zext_ln13_3_fu_323_p1) else "0";
    and_ln10_fu_268_p2 <= (xor_ln10_fu_263_p2 and icmp_ln12_reg_512);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_146_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_146 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_383_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_383 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_98_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln10_reg_485, ap_block_pp0_stage1_11001)
    begin
                ap_condition_98 <= ((icmp_ln10_reg_485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln10_reg_485)
    begin
        if (((icmp_ln10_reg_485 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_485, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln10_reg_485 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten14_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten14_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten14_load <= ap_const_lv18_0;
        else 
            ap_sig_allocacmp_indvar_flatten14_load <= indvar_flatten14_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, j_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_74;
        end if; 
    end process;

    icmp_ln10_fu_165_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten14_load = ap_const_lv18_34BC0) else "0";
    icmp_ln11_fu_186_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_E10) else "0";
    icmp_ln12_fu_200_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv6_3C) else "0";
    icmp_ln13_fu_420_p2 <= "1" when (signed(path_load_reg_548) < signed(add_ln13_reg_559)) else "0";
    or_ln11_fu_273_p2 <= (icmp_ln11_reg_499 or and_ln10_fu_268_p2);
    p_shl_fu_291_p3 <= (select_ln11_1_fu_285_p3 & ap_const_lv6_0);

    path_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, path_addr_1_reg_527_pp0_iter1_reg, zext_ln13_3_fu_323_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            path_address0 <= path_addr_1_reg_527_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            path_address0 <= zext_ln13_3_fu_323_p1(12 - 1 downto 0);
        else 
            path_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    path_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln13_5_fu_338_p1, zext_ln13_6_fu_401_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            path_address1 <= zext_ln13_6_fu_401_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            path_address1 <= zext_ln13_5_fu_338_p1(12 - 1 downto 0);
        else 
            path_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    path_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            path_ce0 <= ap_const_logic_1;
        else 
            path_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    path_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            path_ce1 <= ap_const_logic_1;
        else 
            path_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    path_d0 <= 
        path_load_reg_548 when (icmp_ln13_fu_420_p2(0) = '1') else 
        add_ln13_reg_559;

    path_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            path_we0 <= ap_const_logic_1;
        else 
            path_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_408_p3 <= 
        reuse_reg_fu_70 when (addr_cmp_reg_538(0) = '1') else 
        path_load_1_reg_554;
    select_ln10_1_fu_226_p3 <= 
        add_ln10_fu_220_p2 when (icmp_ln11_reg_499(0) = '1') else 
        k_fu_86;
    select_ln10_fu_192_p3 <= 
        ap_const_lv6_0 when (icmp_ln11_fu_186_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln11_1_fu_285_p3 <= 
        add_ln11_reg_517 when (and_ln10_fu_268_p2(0) = '1') else 
        select_ln10_reg_507;
    select_ln11_2_fu_374_p3 <= 
        ap_const_lv12_1 when (icmp_ln11_reg_499(0) = '1') else 
        add_ln11_1_fu_369_p2;
    select_ln11_fu_278_p3 <= 
        ap_const_lv6_0 when (or_ln11_fu_273_p2(0) = '1') else 
        j_load_reg_489;
    select_ln13_fu_424_p3 <= 
        path_load_reg_548 when (icmp_ln13_fu_420_p2(0) = '1') else 
        add_ln13_reg_559;
    sub_ln13_1_fu_311_p2 <= std_logic_vector(unsigned(p_shl_fu_291_p3) - unsigned(zext_ln13_2_fu_307_p1));
    sub_ln13_fu_257_p2 <= std_logic_vector(unsigned(tmp_fu_237_p3) - unsigned(zext_ln13_1_fu_253_p1));
    tmp_1_fu_245_p3 <= (select_ln10_1_fu_226_p3 & ap_const_lv2_0);
    tmp_2_fu_299_p3 <= (select_ln11_1_fu_285_p3 & ap_const_lv2_0);
    tmp_fu_237_p3 <= (select_ln10_1_fu_226_p3 & ap_const_lv6_0);
    xor_ln10_fu_263_p2 <= (icmp_ln11_reg_499 xor ap_const_lv1_1);
    zext_ln13_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_245_p3),12));
    zext_ln13_2_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_299_p3),12));
    zext_ln13_3_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_fu_317_p2),64));
    zext_ln13_4_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_fu_278_p3),12));
    zext_ln13_5_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_332_p2),64));
    zext_ln13_6_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_reg_533),64));
    zext_ln13_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_fu_226_p3),12));
end behav;
