-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity block_mm_block_mm_Pipeline_writeoutput is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ABpartial_load : IN STD_LOGIC_VECTOR (511 downto 0);
    p_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_164_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_268_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_372_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_12961_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_165_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_169_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_173_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_23462_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_266_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_270_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_274_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_33963_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_1_367_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_2_371_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add_3_375_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_partset4_out : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_partset4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of block_mm_block_mm_Pipeline_writeoutput is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv416_lc_1 : STD_LOGIC_VECTOR (415 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv417_lc_2 : STD_LOGIC_VECTOR (416 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv9_60 : STD_LOGIC_VECTOR (8 downto 0) := "001100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln54_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_5_fu_238_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln_fu_252_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln57_fu_260_p1 : STD_LOGIC_VECTOR (415 downto 0);
    signal zext_ln57_reg_549 : STD_LOGIC_VECTOR (415 downto 0);
    signal xor_ln57_fu_274_p2 : STD_LOGIC_VECTOR (416 downto 0);
    signal xor_ln57_reg_554 : STD_LOGIC_VECTOR (416 downto 0);
    signal tmp_6_fu_280_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_294_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_308_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln54_fu_228_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_partset4_fu_96 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln57_6_fu_504_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln57_fu_234_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln57_fu_264_p2 : STD_LOGIC_VECTOR (415 downto 0);
    signal zext_ln57_1_fu_270_p1 : STD_LOGIC_VECTOR (416 downto 0);
    signal zext_ln57_8_fu_330_p1 : STD_LOGIC_VECTOR (415 downto 0);
    signal sext_ln57_fu_338_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln57_2_fu_344_p1 : STD_LOGIC_VECTOR (415 downto 0);
    signal trunc_ln57_1_fu_341_p1 : STD_LOGIC_VECTOR (415 downto 0);
    signal and_ln57_4_fu_354_p2 : STD_LOGIC_VECTOR (415 downto 0);
    signal shl_ln57_1_fu_333_p2 : STD_LOGIC_VECTOR (415 downto 0);
    signal and_ln57_fu_348_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_2_fu_366_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal or_ln57_fu_360_p2 : STD_LOGIC_VECTOR (415 downto 0);
    signal or_ln57_1_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln57_2_fu_389_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln57_3_fu_399_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln57_2_fu_393_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln_fu_376_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln57_1_fu_408_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln57_1_fu_414_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln57_3_fu_402_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln57_3_fu_426_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln57_4_fu_431_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln57_5_fu_441_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln57_4_fu_435_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln57_2_fu_420_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln57_2_fu_450_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln57_2_fu_456_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln57_5_fu_444_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln57_5_fu_468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln57_6_fu_473_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln57_7_fu_483_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln57_6_fu_477_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln57_4_fu_462_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln57_3_fu_492_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln57_3_fu_498_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln57_7_fu_486_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component block_mm_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component block_mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U76 : component block_mm_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_reload,
        din1 => add_164_reload,
        din2 => add_268_reload,
        din3 => add_372_reload,
        din4 => trunc_ln57_fu_234_p1,
        dout => tmp_5_fu_238_p6);

    mux_42_32_1_1_U77 : component block_mm_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => add_12961_reload,
        din1 => add_1_165_reload,
        din2 => add_2_169_reload,
        din3 => add_3_173_reload,
        din4 => trunc_ln57_fu_234_p1,
        dout => tmp_6_fu_280_p6);

    mux_42_32_1_1_U78 : component block_mm_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => add_23462_reload,
        din1 => add_1_266_reload,
        din2 => add_2_270_reload,
        din3 => add_3_274_reload,
        din4 => trunc_ln57_fu_234_p1,
        dout => tmp_7_fu_294_p6);

    mux_42_32_1_1_U79 : component block_mm_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => add_33963_reload,
        din1 => add_1_367_reload,
        din2 => add_2_371_reload,
        din3 => add_3_375_reload,
        din4 => trunc_ln57_fu_234_p1,
        dout => tmp_8_fu_308_p6);

    flow_control_loop_pipe_sequential_init_U : component block_mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_92 <= add_ln54_fu_228_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    p_partset4_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_partset4_fu_96 <= ABpartial_load;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_partset4_fu_96 <= or_ln57_6_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_222_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    shl_ln_reg_542(8 downto 7) <= shl_ln_fu_252_p3(8 downto 7);
                tmp_5_reg_537 <= tmp_5_fu_238_p6;
                tmp_6_reg_560 <= tmp_6_fu_280_p6;
                tmp_7_reg_565 <= tmp_7_fu_294_p6;
                tmp_8_reg_570 <= tmp_8_fu_308_p6;
                xor_ln57_reg_554 <= xor_ln57_fu_274_p2;
                    zext_ln57_reg_549(8 downto 7) <= zext_ln57_fu_260_p1(8 downto 7);
            end if;
        end if;
    end process;
    shl_ln_reg_542(6 downto 0) <= "0000000";
    zext_ln57_reg_549(6 downto 0) <= "0000000";
    zext_ln57_reg_549(415 downto 9) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln54_fu_228_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    and_ln57_1_fu_414_p2 <= (xor_ln57_1_fu_408_p2 and or_ln_fu_376_p3);
    and_ln57_2_fu_456_p2 <= (xor_ln57_2_fu_450_p2 and or_ln57_2_fu_420_p2);
    and_ln57_3_fu_498_p2 <= (xor_ln57_3_fu_492_p2 and or_ln57_4_fu_462_p2);
    and_ln57_4_fu_354_p2 <= (trunc_ln57_2_fu_344_p1 and trunc_ln57_1_fu_341_p1);
    and_ln57_fu_348_p2 <= (sext_ln57_fu_338_p1 and p_partset4_fu_96);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln54_fu_222_p2)
    begin
        if (((icmp_ln54_fu_222_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_92, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_92;
        end if; 
    end process;

    icmp_ln54_fu_222_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_4) else "0";
    or_ln57_1_fu_384_p2 <= (shl_ln_reg_542 or ap_const_lv9_20);
    or_ln57_2_fu_420_p2 <= (shl_ln57_3_fu_402_p2 or and_ln57_1_fu_414_p2);
    or_ln57_3_fu_426_p2 <= (shl_ln_reg_542 or ap_const_lv9_40);
    or_ln57_4_fu_462_p2 <= (shl_ln57_5_fu_444_p2 or and_ln57_2_fu_456_p2);
    or_ln57_5_fu_468_p2 <= (shl_ln_reg_542 or ap_const_lv9_60);
    or_ln57_6_fu_504_p2 <= (shl_ln57_7_fu_486_p2 or and_ln57_3_fu_498_p2);
    or_ln57_fu_360_p2 <= (shl_ln57_1_fu_333_p2 or and_ln57_4_fu_354_p2);
    or_ln_fu_376_p3 <= (tmp_2_fu_366_p4 & or_ln57_fu_360_p2);
    p_partset4_out <= p_partset4_fu_96;

    p_partset4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln54_fu_222_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln54_fu_222_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_partset4_out_ap_vld <= ap_const_logic_1;
        else 
            p_partset4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln57_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln57_reg_554),512));

    shl_ln57_1_fu_333_p2 <= std_logic_vector(shift_left(unsigned(zext_ln57_8_fu_330_p1),to_integer(unsigned('0' & zext_ln57_reg_549(31-1 downto 0)))));
    shl_ln57_2_fu_393_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln57_2_fu_389_p1(31-1 downto 0)))));
    shl_ln57_3_fu_402_p2 <= std_logic_vector(shift_left(unsigned(zext_ln57_3_fu_399_p1),to_integer(unsigned('0' & zext_ln57_2_fu_389_p1(31-1 downto 0)))));
    shl_ln57_4_fu_435_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln57_4_fu_431_p1(31-1 downto 0)))));
    shl_ln57_5_fu_444_p2 <= std_logic_vector(shift_left(unsigned(zext_ln57_5_fu_441_p1),to_integer(unsigned('0' & zext_ln57_4_fu_431_p1(31-1 downto 0)))));
    shl_ln57_6_fu_477_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln57_6_fu_473_p1(31-1 downto 0)))));
    shl_ln57_7_fu_486_p2 <= std_logic_vector(shift_left(unsigned(zext_ln57_7_fu_483_p1),to_integer(unsigned('0' & zext_ln57_6_fu_473_p1(31-1 downto 0)))));
    shl_ln57_fu_264_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv416_lc_1),to_integer(unsigned('0' & zext_ln57_fu_260_p1(31-1 downto 0)))));
    shl_ln_fu_252_p3 <= (trunc_ln57_fu_234_p1 & ap_const_lv7_0);
    tmp_2_fu_366_p4 <= and_ln57_fu_348_p2(511 downto 416);
    trunc_ln57_1_fu_341_p1 <= xor_ln57_reg_554(416 - 1 downto 0);
    trunc_ln57_2_fu_344_p1 <= p_partset4_fu_96(416 - 1 downto 0);
    trunc_ln57_fu_234_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    xor_ln57_1_fu_408_p2 <= (shl_ln57_2_fu_393_p2 xor ap_const_lv512_lc_3);
    xor_ln57_2_fu_450_p2 <= (shl_ln57_4_fu_435_p2 xor ap_const_lv512_lc_3);
    xor_ln57_3_fu_492_p2 <= (shl_ln57_6_fu_477_p2 xor ap_const_lv512_lc_3);
    xor_ln57_fu_274_p2 <= (zext_ln57_1_fu_270_p1 xor ap_const_lv417_lc_2);
    zext_ln57_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_fu_264_p2),417));
    zext_ln57_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_1_fu_384_p2),512));
    zext_ln57_3_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_560),512));
    zext_ln57_4_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_3_fu_426_p2),512));
    zext_ln57_5_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_565),512));
    zext_ln57_6_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_5_fu_468_p2),512));
    zext_ln57_7_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_570),512));
    zext_ln57_8_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_537),416));
    zext_ln57_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_252_p3),416));
end behav;
