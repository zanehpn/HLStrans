// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes_subBytes_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] buf_r_addr_reg_321;
wire    ap_CS_fsm_state2;
reg   [7:0] buf_r_load_reg_326;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln37_fu_134_p2;
reg   [0:0] icmp_ln37_reg_331;
wire   [0:0] grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_return;
reg   [0:0] targetBlock_reg_335;
wire    ap_CS_fsm_state4;
wire   [7:0] sub_ln15_fu_150_p2;
reg   [7:0] sub_ln15_reg_340;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln15_fu_157_p2;
reg   [0:0] icmp_ln15_reg_345;
wire    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start;
wire    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done;
wire    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_idle;
wire    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_ready;
wire   [7:0] grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out;
wire    grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out_ap_vld;
wire    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start;
wire    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done;
wire    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_idle;
wire    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_ready;
wire   [7:0] grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out;
wire    grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out_ap_vld;
reg   [7:0] ap_phi_mux_y_10_phi_fu_98_p6;
reg   [7:0] y_10_reg_93;
wire    ap_CS_fsm_state7;
reg    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg;
reg   [7:0] i_loc_fu_76;
reg    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [7:0] atb_20_loc_fu_72;
wire   [63:0] zext_ln63_fu_129_p1;
reg   [3:0] i_fu_68;
wire   [3:0] add_ln63_fu_284_p2;
wire   [0:0] icmp_ln63_fu_289_p2;
wire   [7:0] i_5_fu_143_p3;
wire   [6:0] trunc_ln46_fu_167_p1;
wire   [0:0] tmp_fu_171_p3;
wire   [5:0] trunc_ln46_2_fu_187_p1;
wire   [1:0] tmp_s_fu_191_p4;
wire   [4:0] trunc_ln47_fu_209_p1;
wire   [2:0] tmp_1_fu_213_p4;
wire   [3:0] trunc_ln47_2_fu_231_p1;
wire   [3:0] tmp_2_fu_235_p4;
wire   [7:0] y_fu_179_p3;
wire   [7:0] y_7_fu_201_p3;
wire   [7:0] xor_ln49_5_fu_253_p2;
wire   [7:0] y_9_fu_245_p3;
wire   [7:0] xor_ln49_7_fu_265_p2;
wire   [7:0] y_8_fu_223_p3;
wire   [7:0] xor_ln49_8_fu_271_p2;
wire   [7:0] xor_ln49_6_fu_259_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg = 1'b0;
#0 grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg = 1'b0;
end

aes256_encrypt_ecb_aes_subBytes_1_Pipeline_glog grp_aes_subBytes_1_Pipeline_glog_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start),
    .ap_done(grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done),
    .ap_idle(grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_idle),
    .ap_ready(grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_ready),
    .buf_r_load(buf_r_load_reg_326),
    .i_out(grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out),
    .i_out_ap_vld(grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out_ap_vld),
    .ap_return(grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_return)
);

aes256_encrypt_ecb_aes_subBytes_1_Pipeline_alog grp_aes_subBytes_1_Pipeline_alog_fu_115(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start),
    .ap_done(grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done),
    .ap_idle(grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_idle),
    .ap_ready(grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_ready),
    .sub_ln15(sub_ln15_reg_340),
    .atb_20_out(grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out),
    .atb_20_out_ap_vld(grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln15_fu_157_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg <= 1'b1;
        end else if ((grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_ready == 1'b1)) begin
            grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln37_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_ready == 1'b1)) begin
            grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_68 <= 4'd15;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln63_fu_289_p2 == 1'd0))) begin
        i_fu_68 <= add_ln63_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        y_10_reg_93 <= 8'd1;
    end else if (((icmp_ln37_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_10_reg_93 <= 8'd0;
    end else if (((icmp_ln15_reg_345 == 1'd0) & (icmp_ln37_reg_331 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        y_10_reg_93 <= atb_20_loc_fu_72;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        atb_20_loc_fu_72 <= grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_addr_reg_321 <= zext_ln63_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_load_reg_326 <= buf_r_q0;
        icmp_ln37_reg_331 <= icmp_ln37_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_loc_fu_76 <= grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln15_reg_345 <= icmp_ln15_fu_157_p2;
        sub_ln15_reg_340 <= sub_ln15_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        targetBlock_reg_335 <= grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_return;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln63_fu_289_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_345 == 1'd0) & (icmp_ln37_reg_331 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_y_10_phi_fu_98_p6 = atb_20_loc_fu_72;
    end else begin
        ap_phi_mux_y_10_phi_fu_98_p6 = y_10_reg_93;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln63_fu_289_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_address0 = buf_r_addr_reg_321;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0 = zext_ln63_fu_129_p1;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln37_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln15_fu_157_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln63_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln63_fu_284_p2 = ($signed(i_fu_68) + $signed(4'd15));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign buf_r_d0 = (xor_ln49_8_fu_271_p2 ^ xor_ln49_6_fu_259_p2);

assign grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start = grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg;

assign grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start = grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg;

assign i_5_fu_143_p3 = ((targetBlock_reg_335[0:0] == 1'b1) ? i_loc_fu_76 : 8'd0);

assign icmp_ln15_fu_157_p2 = ((i_5_fu_143_p3 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_134_p2 = ((buf_r_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_289_p2 = ((i_fu_68 == 4'd0) ? 1'b1 : 1'b0);

assign sub_ln15_fu_150_p2 = ($signed(8'd254) - $signed(i_5_fu_143_p3));

assign tmp_1_fu_213_p4 = {{ap_phi_mux_y_10_phi_fu_98_p6[7:5]}};

assign tmp_2_fu_235_p4 = {{ap_phi_mux_y_10_phi_fu_98_p6[7:4]}};

assign tmp_fu_171_p3 = ap_phi_mux_y_10_phi_fu_98_p6[32'd7];

assign tmp_s_fu_191_p4 = {{ap_phi_mux_y_10_phi_fu_98_p6[7:6]}};

assign trunc_ln46_2_fu_187_p1 = ap_phi_mux_y_10_phi_fu_98_p6[5:0];

assign trunc_ln46_fu_167_p1 = ap_phi_mux_y_10_phi_fu_98_p6[6:0];

assign trunc_ln47_2_fu_231_p1 = ap_phi_mux_y_10_phi_fu_98_p6[3:0];

assign trunc_ln47_fu_209_p1 = ap_phi_mux_y_10_phi_fu_98_p6[4:0];

assign xor_ln49_5_fu_253_p2 = (y_fu_179_p3 ^ y_7_fu_201_p3);

assign xor_ln49_6_fu_259_p2 = (xor_ln49_5_fu_253_p2 ^ ap_phi_mux_y_10_phi_fu_98_p6);

assign xor_ln49_7_fu_265_p2 = (y_9_fu_245_p3 ^ 8'd99);

assign xor_ln49_8_fu_271_p2 = (y_8_fu_223_p3 ^ xor_ln49_7_fu_265_p2);

assign y_7_fu_201_p3 = {{trunc_ln46_2_fu_187_p1}, {tmp_s_fu_191_p4}};

assign y_8_fu_223_p3 = {{trunc_ln47_fu_209_p1}, {tmp_1_fu_213_p4}};

assign y_9_fu_245_p3 = {{trunc_ln47_2_fu_231_p1}, {tmp_2_fu_235_p4}};

assign y_fu_179_p3 = {{trunc_ln46_fu_167_p1}, {tmp_fu_171_p3}};

assign zext_ln63_fu_129_p1 = i_fu_68;

endmodule //aes256_encrypt_ecb_aes_subBytes_1
