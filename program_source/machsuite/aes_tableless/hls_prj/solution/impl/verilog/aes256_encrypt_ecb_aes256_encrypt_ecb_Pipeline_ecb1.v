// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_load,
        k_address0,
        k_ce0,
        k_q0,
        p_partset613_out_i,
        p_partset613_out_o,
        p_partset613_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [767:0] ctx_load;
output  [4:0] k_address0;
output   k_ce0;
input  [7:0] k_q0;
input  [767:0] p_partset613_out_i;
output  [767:0] p_partset613_out_o;
output   p_partset613_out_o_ap_vld;

reg ap_idle;
reg k_ce0;
reg[767:0] p_partset613_out_o;
reg p_partset613_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln139_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] trunc_ln140_fu_122_p1;
reg   [4:0] trunc_ln140_reg_316;
wire   [63:0] i_cast6_fu_117_p1;
wire    ap_block_pp0_stage0;
wire   [767:0] or_ln140_1_fu_287_p3;
wire    ap_loop_init;
reg   [5:0] i_fu_68;
wire   [5:0] add_ln139_fu_111_p2;
reg   [5:0] ap_sig_allocacmp_i_9;
wire   [9:0] zext_ln140_cast_fu_135_p4;
wire   [767:0] zext_ln140_fu_144_p1;
wire   [767:0] zext_ln140_1_fu_154_p1;
wire   [767:0] shl_ln140_fu_148_p2;
wire   [511:0] trunc_ln140_1_fu_168_p1;
wire   [767:0] xor_ln140_fu_172_p2;
wire   [511:0] trunc_ln140_2_fu_184_p1;
wire   [511:0] xor_ln140_2_fu_178_p2;
wire   [767:0] shl_ln140_1_fu_162_p2;
wire   [767:0] and_ln140_fu_188_p2;
wire   [8:0] zext_ln140_3_cast_fu_210_p4;
wire   [511:0] zext_ln140_3_fu_219_p1;
wire   [511:0] shl_ln140_2_fu_223_p2;
wire   [511:0] zext_ln140_2_fu_158_p1;
wire   [512:0] zext_ln140_4_fu_229_p1;
wire  signed [512:0] xor_ln140_1_fu_239_p2;
wire   [511:0] trunc_ln140_3_fu_200_p1;
wire   [511:0] and_ln140_2_fu_194_p2;
wire   [767:0] or_ln140_fu_204_p2;
wire  signed [767:0] sext_ln140_fu_245_p1;
wire   [511:0] or_ln140_2_fu_253_p2;
wire   [511:0] trunc_ln140_4_fu_249_p1;
wire   [511:0] and_ln140_3_fu_265_p2;
wire   [511:0] shl_ln140_3_fu_233_p2;
wire   [767:0] and_ln140_1_fu_259_p2;
wire   [255:0] tmp_s_fu_277_p4;
wire   [511:0] or_ln140_3_fu_271_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

aes256_encrypt_ecb_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln139_fu_105_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= add_ln139_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_105_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln140_reg_316 <= trunc_ln140_fu_122_p1;
    end
end

always @ (*) begin
    if (((icmp_ln139_fu_105_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_9 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_partset613_out_o = ctx_load;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_partset613_out_o = or_ln140_1_fu_287_p3;
        end else begin
            p_partset613_out_o = p_partset613_out_i;
        end
    end else begin
        p_partset613_out_o = p_partset613_out_i;
    end
end

always @ (*) begin
    if ((((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_partset613_out_o_ap_vld = 1'b1;
    end else begin
        p_partset613_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln139_fu_111_p2 = (ap_sig_allocacmp_i_9 + 6'd1);

assign and_ln140_1_fu_259_p2 = (sext_ln140_fu_245_p1 & or_ln140_fu_204_p2);

assign and_ln140_2_fu_194_p2 = (xor_ln140_2_fu_178_p2 & trunc_ln140_2_fu_184_p1);

assign and_ln140_3_fu_265_p2 = (trunc_ln140_4_fu_249_p1 & or_ln140_2_fu_253_p2);

assign and_ln140_fu_188_p2 = (xor_ln140_fu_172_p2 & p_partset613_out_i);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast6_fu_117_p1 = ap_sig_allocacmp_i_9;

assign icmp_ln139_fu_105_p2 = ((ap_sig_allocacmp_i_9 == 6'd32) ? 1'b1 : 1'b0);

assign k_address0 = i_cast6_fu_117_p1;

assign or_ln140_1_fu_287_p3 = {{tmp_s_fu_277_p4}, {or_ln140_3_fu_271_p2}};

assign or_ln140_2_fu_253_p2 = (trunc_ln140_3_fu_200_p1 | and_ln140_2_fu_194_p2);

assign or_ln140_3_fu_271_p2 = (shl_ln140_3_fu_233_p2 | and_ln140_3_fu_265_p2);

assign or_ln140_fu_204_p2 = (shl_ln140_1_fu_162_p2 | and_ln140_fu_188_p2);

assign sext_ln140_fu_245_p1 = xor_ln140_1_fu_239_p2;

assign shl_ln140_1_fu_162_p2 = zext_ln140_1_fu_154_p1 << zext_ln140_fu_144_p1;

assign shl_ln140_2_fu_223_p2 = 512'd255 << zext_ln140_3_fu_219_p1;

assign shl_ln140_3_fu_233_p2 = zext_ln140_2_fu_158_p1 << zext_ln140_3_fu_219_p1;

assign shl_ln140_fu_148_p2 = 768'd255 << zext_ln140_fu_144_p1;

assign tmp_s_fu_277_p4 = {{and_ln140_1_fu_259_p2[767:512]}};

assign trunc_ln140_1_fu_168_p1 = shl_ln140_fu_148_p2[511:0];

assign trunc_ln140_2_fu_184_p1 = p_partset613_out_i[511:0];

assign trunc_ln140_3_fu_200_p1 = shl_ln140_1_fu_162_p2[511:0];

assign trunc_ln140_4_fu_249_p1 = xor_ln140_1_fu_239_p2[511:0];

assign trunc_ln140_fu_122_p1 = ap_sig_allocacmp_i_9[4:0];

assign xor_ln140_1_fu_239_p2 = (zext_ln140_4_fu_229_p1 ^ 513'd26815615859885194199148049996411692254958731641184786755447122887443528060147093953603748596333806855380063716372972101707507765623893139892867298012168191);

assign xor_ln140_2_fu_178_p2 = (trunc_ln140_1_fu_168_p1 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln140_fu_172_p2 = (shl_ln140_fu_148_p2 ^ 768'd1552518092300708935148979488462502555256886017116696611139052038026050952686376886330878408828646477950487730697131073206171580044114814391444287275041181139204454976020849905550265285631598444825262999193716468750892846853816057855);

assign zext_ln140_1_fu_154_p1 = k_q0;

assign zext_ln140_2_fu_158_p1 = k_q0;

assign zext_ln140_3_cast_fu_210_p4 = {{{{1'd1}, {trunc_ln140_reg_316}}}, {3'd0}};

assign zext_ln140_3_fu_219_p1 = zext_ln140_3_cast_fu_210_p4;

assign zext_ln140_4_fu_229_p1 = shl_ln140_2_fu_223_p2;

assign zext_ln140_cast_fu_135_p4 = {{{{2'd2}, {trunc_ln140_reg_316}}}, {3'd0}};

assign zext_ln140_fu_144_p1 = zext_ln140_cast_fu_135_p4;

endmodule //aes256_encrypt_ecb_aes256_encrypt_ecb_Pipeline_ecb1
