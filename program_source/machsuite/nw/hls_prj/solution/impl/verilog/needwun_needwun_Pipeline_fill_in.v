// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module needwun_needwun_Pipeline_fill_in (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_load,
        SEQA_address0,
        SEQA_ce0,
        SEQA_q0,
        SEQB_load,
        add_ln39_3,
        M_address0,
        M_ce0,
        M_we0,
        M_d0,
        M_q0,
        M_address1,
        M_ce1,
        M_q1,
        zext_ln29,
        zext_ln28,
        p_shl2,
        ptr_address0,
        ptr_ce0,
        ptr_we0,
        ptr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] M_load;
output  [6:0] SEQA_address0;
output   SEQA_ce0;
input  [7:0] SEQA_q0;
input  [7:0] SEQB_load;
input  [14:0] add_ln39_3;
output  [14:0] M_address0;
output   M_ce0;
output   M_we0;
output  [31:0] M_d0;
input  [31:0] M_q0;
output  [14:0] M_address1;
output   M_ce1;
input  [31:0] M_q1;
input  [13:0] zext_ln29;
input  [7:0] zext_ln28;
input  [14:0] p_shl2;
output  [14:0] ptr_address0;
output   ptr_ce0;
output   ptr_we0;
output  [7:0] ptr_d0;

reg ap_idle;
reg SEQA_ce0;
reg[14:0] M_address0;
reg M_ce0;
reg M_we0;
reg M_ce1;
reg ptr_ce0;
reg ptr_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln29_reg_464;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] zext_ln28_cast_fu_177_p1;
reg   [8:0] zext_ln28_cast_reg_453;
reg   [7:0] a_idx_reg_458;
wire   [0:0] icmp_ln29_fu_208_p2;
wire   [63:0] zext_ln39_fu_239_p1;
reg   [63:0] zext_ln39_reg_473;
wire   [31:0] up_left_fu_293_p2;
reg   [31:0] up_left_reg_488;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] up_fu_299_p2;
reg   [31:0] up_reg_494;
wire   [31:0] left_fu_305_p2;
reg   [31:0] left_reg_499;
wire   [31:0] select_ln43_fu_317_p3;
reg   [31:0] select_ln43_reg_504;
wire   [8:0] add_ln45_1_fu_325_p2;
reg   [8:0] add_ln45_1_reg_510;
wire   [31:0] max_fu_344_p3;
reg   [31:0] max_reg_515;
wire   [63:0] zext_ln45_1_fu_358_p1;
reg   [63:0] zext_ln45_1_reg_520;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln30_1_fu_228_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln40_fu_250_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] reuse_addr_reg_fu_66;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_70;
reg   [7:0] a_idx_2_fu_74;
wire   [7:0] add_ln29_fu_330_p2;
reg   [7:0] ap_sig_allocacmp_a_idx;
reg   [31:0] max_1_fu_78;
wire   [6:0] empty_18_fu_214_p1;
wire   [6:0] add_ln30_fu_222_p2;
wire   [14:0] zext_ln30_fu_218_p1;
wire   [14:0] add_ln39_fu_233_p2;
wire   [14:0] zext_ln29_cast_fu_181_p1;
wire   [14:0] add_ln40_fu_244_p2;
wire   [0:0] icmp_ln30_fu_261_p2;
wire   [0:0] addr_cmp_fu_280_p2;
wire   [31:0] reuse_select_fu_285_p3;
wire   [31:0] select_ln39_fu_266_p3;
wire   [0:0] icmp_ln43_fu_311_p2;
wire   [8:0] trunc_ln30_cast12_fu_258_p1;
wire   [0:0] icmp_ln43_1_fu_340_p2;
wire   [14:0] zext_ln45_fu_350_p1;
wire   [14:0] add_ln45_fu_353_p2;
wire   [0:0] icmp_ln46_fu_373_p2;
wire   [0:0] icmp_ln48_fu_378_p2;
wire   [0:0] or_ln46_fu_391_p2;
wire   [6:0] select_ln46_fu_383_p3;
wire   [6:0] select_ln46_1_fu_397_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

needwun_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        a_idx_2_fu_74 <= 8'd1;
    end else if (((icmp_ln29_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_idx_2_fu_74 <= add_ln29_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_1_fu_78 <= M_load;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            max_1_fu_78 <= max_fu_344_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_66 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            reuse_addr_reg_fu_66 <= zext_ln45_1_fu_358_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_70 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            reuse_reg_fu_70 <= max_fu_344_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_idx_reg_458 <= ap_sig_allocacmp_a_idx;
        icmp_ln29_reg_464 <= icmp_ln29_fu_208_p2;
        max_reg_515 <= max_fu_344_p3;
        zext_ln28_cast_reg_453[7 : 0] <= zext_ln28_cast_fu_177_p1[7 : 0];
        zext_ln45_1_reg_520[14 : 0] <= zext_ln45_1_fu_358_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln45_1_reg_510 <= add_ln45_1_fu_325_p2;
        left_reg_499 <= left_fu_305_p2;
        select_ln43_reg_504 <= select_ln43_fu_317_p3;
        up_left_reg_488 <= up_left_fu_293_p2;
        up_reg_494 <= up_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_208_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln39_reg_473[14 : 0] <= zext_ln39_fu_239_p1[14 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        M_address0 = zext_ln45_1_reg_520;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_address0 = zext_ln40_fu_250_p1;
    end else begin
        M_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_ce1 = 1'b1;
    end else begin
        M_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        M_we0 = 1'b1;
    end else begin
        M_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SEQA_ce0 = 1'b1;
    end else begin
        SEQA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_464 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_a_idx = 8'd1;
    end else begin
        ap_sig_allocacmp_a_idx = a_idx_2_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ptr_ce0 = 1'b1;
    end else begin
        ptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ptr_we0 = 1'b1;
    end else begin
        ptr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_address1 = zext_ln39_fu_239_p1;

assign M_d0 = max_reg_515;

assign SEQA_address0 = zext_ln30_1_fu_228_p1;

assign add_ln29_fu_330_p2 = (a_idx_reg_458 + 8'd1);

assign add_ln30_fu_222_p2 = ($signed(empty_18_fu_214_p1) + $signed(7'd127));

assign add_ln39_fu_233_p2 = (add_ln39_3 + zext_ln30_fu_218_p1);

assign add_ln40_fu_244_p2 = (zext_ln30_fu_218_p1 + zext_ln29_cast_fu_181_p1);

assign add_ln45_1_fu_325_p2 = (zext_ln28_cast_reg_453 + trunc_ln30_cast12_fu_258_p1);

assign add_ln45_fu_353_p2 = (zext_ln45_fu_350_p1 + p_shl2);

assign addr_cmp_fu_280_p2 = ((reuse_addr_reg_fu_66 == zext_ln39_reg_473) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_18_fu_214_p1 = ap_sig_allocacmp_a_idx[6:0];

assign icmp_ln29_fu_208_p2 = ((ap_sig_allocacmp_a_idx == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_261_p2 = ((SEQA_q0 == SEQB_load) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_340_p2 = (($signed(up_left_reg_488) > $signed(select_ln43_reg_504)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_311_p2 = (($signed(up_fu_299_p2) > $signed(left_fu_305_p2)) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_373_p2 = ((left_reg_499 == max_fu_344_p3) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_378_p2 = ((max_fu_344_p3 == up_reg_494) ? 1'b1 : 1'b0);

assign left_fu_305_p2 = ($signed(max_1_fu_78) + $signed(32'd4294967295));

assign max_fu_344_p3 = ((icmp_ln43_1_fu_340_p2[0:0] == 1'b1) ? up_left_reg_488 : select_ln43_reg_504);

assign or_ln46_fu_391_p2 = (icmp_ln48_fu_378_p2 | icmp_ln46_fu_373_p2);

assign ptr_address0 = zext_ln45_1_fu_358_p1;

assign ptr_d0 = select_ln46_1_fu_397_p3;

assign reuse_select_fu_285_p3 = ((addr_cmp_fu_280_p2[0:0] == 1'b1) ? reuse_reg_fu_70 : M_q1);

assign select_ln39_fu_266_p3 = ((icmp_ln30_fu_261_p2[0:0] == 1'b1) ? 32'd1 : 32'd4294967295);

assign select_ln43_fu_317_p3 = ((icmp_ln43_fu_311_p2[0:0] == 1'b1) ? up_fu_299_p2 : left_fu_305_p2);

assign select_ln46_1_fu_397_p3 = ((or_ln46_fu_391_p2[0:0] == 1'b1) ? select_ln46_fu_383_p3 : 7'd92);

assign select_ln46_fu_383_p3 = ((icmp_ln46_fu_373_p2[0:0] == 1'b1) ? 7'd60 : 7'd94);

assign trunc_ln30_cast12_fu_258_p1 = a_idx_reg_458;

assign up_fu_299_p2 = ($signed(M_q0) + $signed(32'd4294967295));

assign up_left_fu_293_p2 = (reuse_select_fu_285_p3 + select_ln39_fu_266_p3);

assign zext_ln28_cast_fu_177_p1 = zext_ln28;

assign zext_ln29_cast_fu_181_p1 = zext_ln29;

assign zext_ln30_1_fu_228_p1 = add_ln30_fu_222_p2;

assign zext_ln30_fu_218_p1 = ap_sig_allocacmp_a_idx;

assign zext_ln39_fu_239_p1 = add_ln39_fu_233_p2;

assign zext_ln40_fu_250_p1 = add_ln40_fu_244_p2;

assign zext_ln45_1_fu_358_p1 = add_ln45_fu_353_p2;

assign zext_ln45_fu_350_p1 = add_ln45_1_reg_510;

always @ (posedge ap_clk) begin
    zext_ln28_cast_reg_453[8] <= 1'b0;
    zext_ln39_reg_473[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln45_1_reg_520[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //needwun_needwun_Pipeline_fill_in
