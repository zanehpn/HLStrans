-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity merge_sort_merge_sort_Pipeline_VITIS_LOOP_6_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (63 downto 0);
    i2_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    i1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln6_2 : IN STD_LOGIC_VECTOR (62 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    i3_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of merge_sort_merge_sort_Pipeline_VITIS_LOOP_6_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln6_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln6_2_cast_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln6_2_cast_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_1_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal idx_1_reg_365_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal f1_1_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_1_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_1_reg_376_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln6_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_386_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln8_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln8_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln7_2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_2_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_3_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_3_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_4_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_4_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_5_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_5_reg_430 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_1_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln8_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln7_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal temp_addr_1_gep_fu_142_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_fu_54 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln6_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal f1_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_2_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_f1_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_2_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_f2_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln10_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_228_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_fu_238_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_242_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_1_fu_252_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component merge_sort_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component merge_sort_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U1 : component merge_sort_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_150_p0,
        din1 => grp_fu_150_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_150_p2);

    flow_control_loop_pipe_sequential_init_U : component merge_sort_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    f1_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                f1_fu_58 <= i1_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (((icmp_ln7_1_reg_390 = ap_const_lv1_0) and (icmp_ln7_reg_386 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln7_1_fu_294_p2) and (icmp_ln7_reg_386 = ap_const_lv1_1))))) then 
                f1_fu_58 <= f1_2_fu_310_p2;
            end if; 
        end if;
    end process;

    f2_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                f2_fu_62 <= i2_2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln7_reg_386 = ap_const_lv1_0) or ((ap_const_lv1_0 = and_ln7_1_fu_294_p2) and (icmp_ln7_1_reg_390 = ap_const_lv1_1))))) then 
                f2_fu_62 <= f2_2_fu_300_p2;
            end if; 
        end if;
    end process;

    idx_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                idx_fu_54 <= indvars_iv;
            elsif (((icmp_ln6_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                idx_fu_54 <= add_ln6_fu_207_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln7_1_reg_390 = ap_const_lv1_1) and (icmp_ln7_reg_386 = ap_const_lv1_1))) then
                and_ln7_1_reg_435 <= and_ln7_1_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                f1_1_reg_371 <= ap_sig_allocacmp_f1_1;
                f2_1_reg_376 <= ap_sig_allocacmp_f2_1;
                f2_1_reg_376_pp0_iter1_reg <= f2_1_reg_376;
                icmp_ln6_reg_382 <= icmp_ln6_fu_182_p2;
                icmp_ln7_1_reg_390_pp0_iter1_reg <= icmp_ln7_1_reg_390;
                icmp_ln7_reg_386_pp0_iter1_reg <= icmp_ln7_reg_386;
                idx_1_reg_365 <= idx_fu_54;
                idx_1_reg_365_pp0_iter1_reg <= idx_1_reg_365;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_reg_386 = ap_const_lv1_1) and (icmp_ln6_reg_382 = ap_const_lv1_1))) then
                bitcast_ln8_reg_404 <= bitcast_ln8_fu_218_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln7_fu_187_p2 = ap_const_lv1_1))) then
                icmp_ln7_1_reg_390 <= icmp_ln7_1_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_1_reg_390 = ap_const_lv1_1) and (icmp_ln7_reg_386 = ap_const_lv1_1) and (icmp_ln6_reg_382 = ap_const_lv1_1))) then
                icmp_ln7_2_reg_415 <= icmp_ln7_2_fu_256_p2;
                icmp_ln7_3_reg_420 <= icmp_ln7_3_fu_262_p2;
                icmp_ln7_4_reg_425 <= icmp_ln7_4_fu_268_p2;
                icmp_ln7_5_reg_430 <= icmp_ln7_5_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln7_reg_386 <= icmp_ln7_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln6_2_cast_reg_360(62 downto 0) <= zext_ln6_2_cast_fu_154_p1(62 downto 0);
            end if;
        end if;
    end process;
    zext_ln6_2_cast_reg_360(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln7_fu_202_p1, zext_ln10_fu_320_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address0 <= zext_ln10_fu_320_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_address0 <= zext_ln7_fu_202_p1(4 - 1 downto 0);
        else 
            A_address0 <= "XXXX";
        end if; 
    end process;

    A_address1 <= zext_ln8_fu_197_p1(4 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln6_fu_207_p2 <= std_logic_vector(unsigned(idx_fu_54) + unsigned(ap_const_lv64_1));
    and_ln7_1_fu_294_p2 <= (or_ln7_1_fu_284_p2 and and_ln7_fu_288_p2);
    and_ln7_fu_288_p2 <= (or_ln7_fu_280_p2 and grp_fu_150_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln6_fu_182_p2)
    begin
        if (((icmp_ln6_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_f1_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln7_reg_386, icmp_ln7_1_reg_390, and_ln7_1_fu_294_p2, ap_block_pp0_stage1, f1_fu_58, f1_2_fu_310_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (((icmp_ln7_1_reg_390 = ap_const_lv1_0) and (icmp_ln7_reg_386 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln7_1_fu_294_p2) and (icmp_ln7_reg_386 = ap_const_lv1_1))))) then 
            ap_sig_allocacmp_f1_1 <= f1_2_fu_310_p2;
        else 
            ap_sig_allocacmp_f1_1 <= f1_fu_58;
        end if; 
    end process;


    ap_sig_allocacmp_f2_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln7_reg_386, icmp_ln7_1_reg_390, and_ln7_1_fu_294_p2, ap_block_pp0_stage1, f2_fu_62, f2_2_fu_300_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln7_reg_386 = ap_const_lv1_0) or ((ap_const_lv1_0 = and_ln7_1_fu_294_p2) and (icmp_ln7_1_reg_390 = ap_const_lv1_1))))) then 
            ap_sig_allocacmp_f2_1 <= f2_2_fu_300_p2;
        else 
            ap_sig_allocacmp_f2_1 <= f2_fu_62;
        end if; 
    end process;

    bitcast_ln10_fu_324_p1 <= A_q0;
    bitcast_ln8_fu_218_p1 <= A_q1;
    f1_2_fu_310_p2 <= std_logic_vector(unsigned(f1_1_reg_371) + unsigned(ap_const_lv32_1));
    f2_2_fu_300_p2 <= std_logic_vector(unsigned(f2_1_reg_376) + unsigned(ap_const_lv32_1));
    grp_fu_150_p0 <= A_q1;
    grp_fu_150_p1 <= A_q0;
    icmp_ln6_fu_182_p2 <= "1" when (signed(idx_fu_54) < signed(zext_ln6_2_cast_reg_360)) else "0";
    icmp_ln7_1_fu_192_p2 <= "1" when (signed(i3_1) > signed(ap_sig_allocacmp_f2_1)) else "0";
    icmp_ln7_2_fu_256_p2 <= "0" when (tmp_fu_228_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_3_fu_262_p2 <= "1" when (trunc_ln7_fu_238_p1 = ap_const_lv23_0) else "0";
    icmp_ln7_4_fu_268_p2 <= "0" when (tmp_1_fu_242_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_5_fu_274_p2 <= "1" when (trunc_ln7_1_fu_252_p1 = ap_const_lv23_0) else "0";
    icmp_ln7_fu_187_p2 <= "1" when (signed(ap_sig_allocacmp_f1_1) < signed(i2_2)) else "0";
    or_ln7_1_fu_284_p2 <= (icmp_ln7_5_reg_430 or icmp_ln7_4_reg_425);
    or_ln7_fu_280_p2 <= (icmp_ln7_3_reg_420 or icmp_ln7_2_reg_415);
    temp_addr_1_gep_fu_142_p3 <= idx_1_reg_365_pp0_iter1_reg(4 - 1 downto 0);

    temp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, idx_1_reg_365_pp0_iter1_reg, ap_block_pp0_stage1, ap_block_pp0_stage0, temp_addr_1_gep_fu_142_p3)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                temp_address0 <= temp_addr_1_gep_fu_142_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                temp_address0 <= idx_1_reg_365_pp0_iter1_reg(4 - 1 downto 0);
            else 
                temp_address0 <= "XXXX";
            end if;
        else 
            temp_address0 <= "XXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, bitcast_ln8_reg_404, ap_block_pp0_stage1, ap_block_pp0_stage0, bitcast_ln10_fu_324_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                temp_d0 <= bitcast_ln10_fu_324_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                temp_d0 <= bitcast_ln8_reg_404;
            else 
                temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, icmp_ln7_reg_386_pp0_iter1_reg, icmp_ln7_1_reg_390_pp0_iter1_reg, and_ln7_1_reg_435)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln7_reg_386_pp0_iter1_reg = ap_const_lv1_0) or ((ap_const_lv1_0 = and_ln7_1_reg_435) and (icmp_ln7_1_reg_390_pp0_iter1_reg = ap_const_lv1_1)))) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((icmp_ln7_1_reg_390_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln7_reg_386_pp0_iter1_reg = ap_const_lv1_1)) or ((icmp_ln7_reg_386_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln7_1_reg_435)))))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_242_p4 <= A_q0(30 downto 23);
    tmp_fu_228_p4 <= A_q1(30 downto 23);
    trunc_ln7_1_fu_252_p1 <= A_q0(23 - 1 downto 0);
    trunc_ln7_fu_238_p1 <= A_q1(23 - 1 downto 0);
    zext_ln10_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f2_1_reg_376_pp0_iter1_reg),64));
    zext_ln6_2_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln6_2),64));
    zext_ln7_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_f2_1),64));
    zext_ln8_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_f1_1),64));
end behav;
