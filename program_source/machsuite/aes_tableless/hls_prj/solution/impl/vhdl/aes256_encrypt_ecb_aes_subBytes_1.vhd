-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb_aes_subBytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes256_encrypt_ecb_aes_subBytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_63 : STD_LOGIC_VECTOR (7 downto 0) := "01100011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_r_addr_reg_321 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal buf_r_load_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln37_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal targetBlock_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln15_fu_150_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln15_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln15_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_idle : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_ready : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out_ap_vld : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_idle : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_ready : STD_LOGIC;
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_y_10_phi_fu_98_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_10_reg_93 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal i_loc_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal atb_20_loc_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln63_fu_284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln63_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_143_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_fu_167_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_171_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_2_fu_187_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_191_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_fu_209_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_213_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_2_fu_231_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_235_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_fu_179_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_7_fu_201_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_5_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_9_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_7_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_8_fu_223_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_8_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln49_6_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes256_encrypt_ecb_aes_subBytes_1_Pipeline_glog IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_load : IN STD_LOGIC_VECTOR (7 downto 0);
        i_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aes256_encrypt_ecb_aes_subBytes_1_Pipeline_alog IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_ln15 : IN STD_LOGIC_VECTOR (7 downto 0);
        atb_20_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        atb_20_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_aes_subBytes_1_Pipeline_glog_fu_108 : component aes256_encrypt_ecb_aes_subBytes_1_Pipeline_glog
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start,
        ap_done => grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done,
        ap_idle => grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_idle,
        ap_ready => grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_ready,
        buf_r_load => buf_r_load_reg_326,
        i_out => grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out,
        i_out_ap_vld => grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out_ap_vld,
        ap_return => grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_return);

    grp_aes_subBytes_1_Pipeline_alog_fu_115 : component aes256_encrypt_ecb_aes_subBytes_1_Pipeline_alog
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start,
        ap_done => grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done,
        ap_idle => grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_idle,
        ap_ready => grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_ready,
        sub_ln15 => sub_ln15_reg_340,
        atb_20_out => grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out,
        atb_20_out_ap_vld => grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln15_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_ready = ap_const_logic_1)) then 
                    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln37_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_68 <= ap_const_lv4_F;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_289_p2 = ap_const_lv1_0))) then 
                i_fu_68 <= add_ln63_fu_284_p2;
            end if; 
        end if;
    end process;

    y_10_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_10_reg_93 <= ap_const_lv8_1;
            elsif (((icmp_ln37_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_10_reg_93 <= ap_const_lv8_0;
            elsif (((icmp_ln15_reg_345 = ap_const_lv1_0) and (icmp_ln37_reg_331 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                y_10_reg_93 <= atb_20_loc_fu_72;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                atb_20_loc_fu_72 <= grp_aes_subBytes_1_Pipeline_alog_fu_115_atb_20_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                buf_r_addr_reg_321 <= zext_ln63_fu_129_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buf_r_load_reg_326 <= buf_r_q0;
                icmp_ln37_reg_331 <= icmp_ln37_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_loc_fu_76 <= grp_aes_subBytes_1_Pipeline_glog_fu_108_i_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln15_reg_345 <= icmp_ln15_fu_157_p2;
                sub_ln15_reg_340 <= sub_ln15_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                targetBlock_reg_335 <= grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln37_fu_134_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln15_fu_157_p2, grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done, grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state6, icmp_ln63_fu_289_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln37_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln15_fu_157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln63_fu_284_p2 <= std_logic_vector(unsigned(i_fu_68) + unsigned(ap_const_lv4_F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done)
    begin
        if ((grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done)
    begin
        if ((grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln63_fu_289_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_289_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_y_10_phi_fu_98_p6_assign_proc : process(icmp_ln37_reg_331, icmp_ln15_reg_345, y_10_reg_93, ap_CS_fsm_state7, atb_20_loc_fu_72)
    begin
        if (((icmp_ln15_reg_345 = ap_const_lv1_0) and (icmp_ln37_reg_331 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_y_10_phi_fu_98_p6 <= atb_20_loc_fu_72;
        else 
            ap_phi_mux_y_10_phi_fu_98_p6 <= y_10_reg_93;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln63_fu_289_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_fu_289_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_address0_assign_proc : process(buf_r_addr_reg_321, ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln63_fu_129_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_r_address0 <= buf_r_addr_reg_321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_r_address0 <= zext_ln63_fu_129_p1(4 - 1 downto 0);
        else 
            buf_r_address0 <= "XXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d0 <= (xor_ln49_8_fu_271_p2 xor xor_ln49_6_fu_259_p2);

    buf_r_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_r_we0 <= ap_const_logic_1;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start <= grp_aes_subBytes_1_Pipeline_alog_fu_115_ap_start_reg;
    grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start <= grp_aes_subBytes_1_Pipeline_glog_fu_108_ap_start_reg;
    i_5_fu_143_p3 <= 
        i_loc_fu_76 when (targetBlock_reg_335(0) = '1') else 
        ap_const_lv8_0;
    icmp_ln15_fu_157_p2 <= "1" when (i_5_fu_143_p3 = ap_const_lv8_FF) else "0";
    icmp_ln37_fu_134_p2 <= "1" when (buf_r_q0 = ap_const_lv8_0) else "0";
    icmp_ln63_fu_289_p2 <= "1" when (i_fu_68 = ap_const_lv4_0) else "0";
    sub_ln15_fu_150_p2 <= std_logic_vector(signed(ap_const_lv8_FE) - signed(i_5_fu_143_p3));
    tmp_1_fu_213_p4 <= ap_phi_mux_y_10_phi_fu_98_p6(7 downto 5);
    tmp_2_fu_235_p4 <= ap_phi_mux_y_10_phi_fu_98_p6(7 downto 4);
    tmp_fu_171_p3 <= ap_phi_mux_y_10_phi_fu_98_p6(7 downto 7);
    tmp_s_fu_191_p4 <= ap_phi_mux_y_10_phi_fu_98_p6(7 downto 6);
    trunc_ln46_2_fu_187_p1 <= ap_phi_mux_y_10_phi_fu_98_p6(6 - 1 downto 0);
    trunc_ln46_fu_167_p1 <= ap_phi_mux_y_10_phi_fu_98_p6(7 - 1 downto 0);
    trunc_ln47_2_fu_231_p1 <= ap_phi_mux_y_10_phi_fu_98_p6(4 - 1 downto 0);
    trunc_ln47_fu_209_p1 <= ap_phi_mux_y_10_phi_fu_98_p6(5 - 1 downto 0);
    xor_ln49_5_fu_253_p2 <= (y_fu_179_p3 xor y_7_fu_201_p3);
    xor_ln49_6_fu_259_p2 <= (xor_ln49_5_fu_253_p2 xor ap_phi_mux_y_10_phi_fu_98_p6);
    xor_ln49_7_fu_265_p2 <= (y_9_fu_245_p3 xor ap_const_lv8_63);
    xor_ln49_8_fu_271_p2 <= (y_8_fu_223_p3 xor xor_ln49_7_fu_265_p2);
    y_7_fu_201_p3 <= (trunc_ln46_2_fu_187_p1 & tmp_s_fu_191_p4);
    y_8_fu_223_p3 <= (trunc_ln47_fu_209_p1 & tmp_1_fu_213_p4);
    y_9_fu_245_p3 <= (trunc_ln47_2_fu_231_p1 & tmp_2_fu_235_p4);
    y_fu_179_p3 <= (trunc_ln46_fu_167_p1 & tmp_fu_171_p3);
    zext_ln63_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_68),64));
end behav;
