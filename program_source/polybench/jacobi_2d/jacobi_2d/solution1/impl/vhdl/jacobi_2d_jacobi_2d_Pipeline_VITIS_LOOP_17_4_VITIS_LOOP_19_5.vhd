-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jacobi_2d_jacobi_2d_Pipeline_VITIS_LOOP_17_4_VITIS_LOOP_19_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_101_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_101_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_101_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_101_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_101_p_ce : OUT STD_LOGIC;
    grp_fu_105_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_105_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_105_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_105_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_105_p_ce : OUT STD_LOGIC;
    grp_fu_109_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_109_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_109_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_109_p_ce : OUT STD_LOGIC );
end;


architecture behav of jacobi_2d_jacobi_2d_Pipeline_VITIS_LOOP_17_4_VITIS_LOOP_19_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_3FC999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111001001100110011001100110011001100110011001100110011010";
    constant ap_const_lv13_1E40 : STD_LOGIC_VECTOR (12 downto 0) := "1111001000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_59 : STD_LOGIC_VECTOR (6 downto 0) := "1011001";
    constant ap_const_lv13_5A : STD_LOGIC_VECTOR (12 downto 0) := "0000001011010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln17_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_137 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln17_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_396_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_3_fu_245_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_3_reg_405 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln20_fu_253_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln20_reg_410 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_2_fu_257_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_2_reg_416 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_5_fu_273_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_5_reg_421 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_6_fu_289_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_6_reg_426 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_6_reg_426_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln20_1_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_reg_436_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_361_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_3_reg_451 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_3_reg_451_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_3_reg_451_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln20_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln20_1_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_368_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_4_reg_466 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_4_reg_466_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_4_reg_466_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_4_reg_466_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add4_reg_476 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln20_2_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add5_reg_491 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln20_3_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_load_4_reg_506 : STD_LOGIC_VECTOR (63 downto 0);
    signal add6_reg_511 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln20_4_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add7_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_526 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln20_5_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_7_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln20_2_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_3_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_50 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_1_fu_279_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_54 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_1_fu_203_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten9_fu_58 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln17_fu_171_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten9_load : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln19_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next289_fu_197_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln20_fu_215_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln20_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next28_mid1_fu_221_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_2_fu_227_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_9_fu_239_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_fu_189_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln20_fu_215_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln20_fu_263_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln20_4_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln20_6_fu_285_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_368_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter8_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to9 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_361_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_368_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln20_fu_215_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component jacobi_2d_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_2d_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_2d_mul_7ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component jacobi_2d_mac_muladd_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component jacobi_2d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_7ns_8ns_13_1_1_U14 : component jacobi_2d_mul_7ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln20_fu_215_p0,
        din1 => mul_ln20_fu_215_p1,
        dout => mul_ln20_fu_215_p2);

    mac_muladd_7ns_7ns_7ns_13_4_1_U15 : component jacobi_2d_mac_muladd_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        din2 => grp_fu_361_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p3);

    mac_muladd_7ns_7ns_7ns_13_4_1_U16 : component jacobi_2d_mac_muladd_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_368_p0,
        din1 => grp_fu_368_p1,
        din2 => grp_fu_368_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p3);

    flow_control_loop_pipe_sequential_init_U : component jacobi_2d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_165_p2 = ap_const_lv1_0))) then 
                    i_fu_54 <= select_ln17_1_fu_203_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_54 <= ap_const_lv7_1;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten9_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_165_p2 = ap_const_lv1_0))) then 
                    indvar_flatten9_fu_58 <= add_ln17_fu_171_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten9_fu_58 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_165_p2 = ap_const_lv1_0))) then 
                    j_fu_50 <= add_ln20_1_fu_279_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_50 <= ap_const_lv7_1;
                end if;
            end if; 
        end if;
    end process;

    reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_137 <= B_q0;
            elsif (((icmp_ln17_reg_396 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_137 <= B_q1;
            end if; 
        end if;
    end process;

    reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_142 <= B_q1;
            elsif (((icmp_ln17_reg_396 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_142 <= B_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                B_load_4_reg_506 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add4_reg_476 <= grp_fu_101_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add5_reg_491 <= grp_fu_101_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add6_reg_511 <= grp_fu_101_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add7_reg_521 <= grp_fu_105_p_dout0;
                add_ln20_4_reg_466_pp0_iter2_reg <= add_ln20_4_reg_466;
                add_ln20_4_reg_466_pp0_iter3_reg <= add_ln20_4_reg_466_pp0_iter2_reg;
                add_ln20_4_reg_466_pp0_iter4_reg <= add_ln20_4_reg_466_pp0_iter3_reg;
                    zext_ln20_1_reg_436_pp0_iter1_reg(12 downto 0) <= zext_ln20_1_reg_436(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter2_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter1_reg(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter3_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter2_reg(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter4_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter3_reg(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter5_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter4_reg(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter6_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter5_reg(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter7_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter6_reg(12 downto 0);
                    zext_ln20_1_reg_436_pp0_iter8_reg(12 downto 0) <= zext_ln20_1_reg_436_pp0_iter7_reg(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_165_p2 = ap_const_lv1_0))) then
                add_ln20_2_reg_416 <= add_ln20_2_fu_257_p2;
                add_ln20_5_reg_421 <= add_ln20_5_fu_273_p2;
                add_ln20_6_reg_426 <= add_ln20_6_fu_289_p2;
                select_ln17_3_reg_405 <= select_ln17_3_fu_245_p3;
                    zext_ln20_reg_410(6 downto 0) <= zext_ln20_fu_253_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln20_3_reg_451 <= grp_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln20_3_reg_451_pp0_iter2_reg <= add_ln20_3_reg_451;
                add_ln20_3_reg_451_pp0_iter3_reg <= add_ln20_3_reg_451_pp0_iter2_reg;
                add_ln20_6_reg_426_pp0_iter1_reg <= add_ln20_6_reg_426;
                icmp_ln17_reg_396 <= icmp_ln17_fu_165_p2;
                icmp_ln17_reg_396_pp0_iter1_reg <= icmp_ln17_reg_396;
                icmp_ln17_reg_396_pp0_iter2_reg <= icmp_ln17_reg_396_pp0_iter1_reg;
                icmp_ln17_reg_396_pp0_iter3_reg <= icmp_ln17_reg_396_pp0_iter2_reg;
                icmp_ln17_reg_396_pp0_iter4_reg <= icmp_ln17_reg_396_pp0_iter3_reg;
                icmp_ln17_reg_396_pp0_iter5_reg <= icmp_ln17_reg_396_pp0_iter4_reg;
                icmp_ln17_reg_396_pp0_iter6_reg <= icmp_ln17_reg_396_pp0_iter5_reg;
                icmp_ln17_reg_396_pp0_iter7_reg <= icmp_ln17_reg_396_pp0_iter6_reg;
                icmp_ln17_reg_396_pp0_iter8_reg <= icmp_ln17_reg_396_pp0_iter7_reg;
                mul1_reg_526 <= grp_fu_109_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln20_4_reg_466 <= grp_fu_368_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_396 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln20_1_reg_436(12 downto 0) <= zext_ln20_1_fu_313_p1(12 downto 0);
            end if;
        end if;
    end process;
    zext_ln20_reg_410(12 downto 7) <= "000000";
    zext_ln20_1_reg_436(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter1_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter2_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter3_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter4_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter5_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter6_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter7_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln20_1_reg_436_pp0_iter8_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter8_stage1, ap_idle_pp0_0to7, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to9, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= zext_ln20_1_reg_436_pp0_iter8_reg(13 - 1 downto 0);

    A_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= mul1_reg_526;

    A_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln20_5_fu_317_p1, zext_ln20_7_fu_331_p1, ap_block_pp0_stage2, zext_ln20_3_fu_349_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_address0 <= zext_ln20_3_fu_349_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            B_address0 <= zext_ln20_7_fu_331_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_address0 <= zext_ln20_5_fu_317_p1(13 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln20_1_fu_313_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln20_2_fu_340_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            B_address1 <= zext_ln20_2_fu_340_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_address1 <= zext_ln20_1_fu_313_p1(13 - 1 downto 0);
        else 
            B_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten9_load) + unsigned(ap_const_lv13_1));
    add_ln20_1_fu_279_p2 <= std_logic_vector(unsigned(select_ln17_fu_189_p3) + unsigned(ap_const_lv7_1));
    add_ln20_2_fu_257_p2 <= std_logic_vector(unsigned(mul_ln20_fu_215_p2) + unsigned(zext_ln20_fu_253_p1));
    add_ln20_5_fu_273_p2 <= std_logic_vector(unsigned(mul_ln20_fu_215_p2) + unsigned(zext_ln20_4_fu_269_p1));
    add_ln20_6_fu_289_p2 <= std_logic_vector(unsigned(mul_ln20_fu_215_p2) + unsigned(zext_ln20_6_fu_285_p1));
    add_ln20_fu_263_p2 <= std_logic_vector(unsigned(select_ln17_fu_189_p3) + unsigned(ap_const_lv7_7F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln17_reg_396)
    begin
        if (((icmp_ln17_reg_396 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter8_stage1_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln17_reg_396_pp0_iter8_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln17_reg_396_pp0_iter8_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter8_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter8_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_54)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_54;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten9_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten9_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten9_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten9_load <= indvar_flatten9_fu_58;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_50, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv7_1;
        else 
            ap_sig_allocacmp_j_load <= j_fu_50;
        end if; 
    end process;

    bitcast_ln20_1_fu_326_p1 <= reg_142;
    bitcast_ln20_2_fu_335_p1 <= reg_137;
    bitcast_ln20_3_fu_344_p1 <= reg_142;
    bitcast_ln20_4_fu_353_p1 <= B_load_4_reg_506;
    bitcast_ln20_fu_321_p1 <= reg_137;
    empty_9_fu_239_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_7F));
    grp_fu_101_p_ce <= ap_const_logic_1;
    grp_fu_101_p_din0 <= grp_fu_124_p0;
    grp_fu_101_p_din1 <= grp_fu_124_p1;
    grp_fu_101_p_opcode <= ap_const_lv2_0;
    grp_fu_105_p_ce <= ap_const_logic_1;
    grp_fu_105_p_din0 <= add6_reg_511;
    grp_fu_105_p_din1 <= bitcast_ln20_4_fu_353_p1;
    grp_fu_105_p_opcode <= ap_const_lv2_0;
    grp_fu_109_p_ce <= ap_const_logic_1;
    grp_fu_109_p_din0 <= add7_reg_521;
    grp_fu_109_p_din1 <= ap_const_lv64_3FC999999999999A;

    grp_fu_124_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, bitcast_ln20_fu_321_p1, add4_reg_476, add5_reg_491, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_124_p0 <= add5_reg_491;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_124_p0 <= add4_reg_476;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_124_p0 <= bitcast_ln20_fu_321_p1;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, bitcast_ln20_1_fu_326_p1, bitcast_ln20_2_fu_335_p1, bitcast_ln20_3_fu_344_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_124_p1 <= bitcast_ln20_3_fu_344_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_124_p1 <= bitcast_ln20_2_fu_335_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_124_p1 <= bitcast_ln20_1_fu_326_p1;
        else 
            grp_fu_124_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_361_p0 <= grp_fu_361_p00(7 - 1 downto 0);
    grp_fu_361_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_2_fu_227_p3),13));
    grp_fu_361_p1 <= ap_const_lv13_5A(7 - 1 downto 0);
    grp_fu_361_p2 <= zext_ln20_reg_410(7 - 1 downto 0);
    grp_fu_368_p0 <= grp_fu_368_p00(7 - 1 downto 0);
    grp_fu_368_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_3_reg_405),13));
    grp_fu_368_p1 <= ap_const_lv13_5A(7 - 1 downto 0);
    grp_fu_368_p2 <= zext_ln20_reg_410(7 - 1 downto 0);
    icmp_ln17_fu_165_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten9_load = ap_const_lv13_1E40) else "0";
    icmp_ln19_fu_183_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_59) else "0";
    indvars_iv_next289_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_1));
    indvars_iv_next28_mid1_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_2));
    mul_ln20_fu_215_p0 <= mul_ln20_fu_215_p00(7 - 1 downto 0);
    mul_ln20_fu_215_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_1_fu_203_p3),13));
    mul_ln20_fu_215_p1 <= ap_const_lv13_5A(8 - 1 downto 0);
    select_ln17_1_fu_203_p3 <= 
        indvars_iv_next289_fu_197_p2 when (icmp_ln19_fu_183_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln17_2_fu_227_p3 <= 
        indvars_iv_next28_mid1_fu_221_p2 when (icmp_ln19_fu_183_p2(0) = '1') else 
        indvars_iv_next289_fu_197_p2;
    select_ln17_3_fu_245_p3 <= 
        ap_sig_allocacmp_i_load when (icmp_ln19_fu_183_p2(0) = '1') else 
        empty_9_fu_239_p2;
    select_ln17_fu_189_p3 <= 
        ap_const_lv7_1 when (icmp_ln19_fu_183_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    zext_ln20_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_2_reg_416),64));
    zext_ln20_2_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_3_reg_451_pp0_iter3_reg),64));
    zext_ln20_3_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_4_reg_466_pp0_iter4_reg),64));
    zext_ln20_4_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_263_p2),13));
    zext_ln20_5_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_5_reg_421),64));
    zext_ln20_6_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_1_fu_279_p2),13));
    zext_ln20_7_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_6_reg_426_pp0_iter1_reg),64));
    zext_ln20_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_fu_189_p3),13));
end behav;
