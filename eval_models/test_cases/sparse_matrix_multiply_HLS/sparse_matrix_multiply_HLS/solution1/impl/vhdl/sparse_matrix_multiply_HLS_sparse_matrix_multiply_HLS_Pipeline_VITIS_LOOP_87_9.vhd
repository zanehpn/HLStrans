-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_87_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln87 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln87_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_values_B_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_B_V_ce0 : OUT STD_LOGIC;
    local_values_B_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_values_B_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_B_V_1_ce0 : OUT STD_LOGIC;
    local_values_B_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_values_B_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_B_V_2_ce0 : OUT STD_LOGIC;
    local_values_B_V_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_values_B_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_values_B_V_3_ce0 : OUT STD_LOGIC;
    local_values_B_V_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    local_row_indices_B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_row_indices_B_ce0 : OUT STD_LOGIC;
    local_row_indices_B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_row_indices_B_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_row_indices_B_1_ce0 : OUT STD_LOGIC;
    local_row_indices_B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_row_indices_B_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_row_indices_B_2_ce0 : OUT STD_LOGIC;
    local_row_indices_B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_row_indices_B_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_row_indices_B_3_ce0 : OUT STD_LOGIC;
    local_row_indices_B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_V : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln837_1 : IN STD_LOGIC_VECTOR (9 downto 0);
    accum_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_ce0 : OUT STD_LOGIC;
    accum_V_we0 : OUT STD_LOGIC;
    accum_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    accum_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_1_ce0 : OUT STD_LOGIC;
    accum_V_1_we0 : OUT STD_LOGIC;
    accum_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    accum_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_2_ce0 : OUT STD_LOGIC;
    accum_V_2_we0 : OUT STD_LOGIC;
    accum_V_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    accum_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    accum_V_3_ce0 : OUT STD_LOGIC;
    accum_V_3_we0 : OUT STD_LOGIC;
    accum_V_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    accum_V_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_87_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln87_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_V_cast_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_cast_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln87_1_cast_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln87_1_cast_reg_459 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln87_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln90_fu_323_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln90_reg_488 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln837_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln837_reg_519 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln837_fu_383_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln837_reg_524 : STD_LOGIC_VECTOR (1 downto 0);
    signal accum_V_addr_reg_529 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal accum_V_1_addr_reg_534 : STD_LOGIC_VECTOR (9 downto 0);
    signal accum_V_2_addr_reg_539 : STD_LOGIC_VECTOR (9 downto 0);
    signal accum_V_3_addr_reg_544 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln8_reg_557 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln90_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln837_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal b_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln87_fu_327_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln87_cast_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal icmp_ln1420_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lshr_ln4_fu_301_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_val_V_fu_338_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_fu_351_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln5_fu_368_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_fu_394_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_1_fu_407_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_matrix_multiply_HLS_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sparse_matrix_multiply_HLS_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_matrix_multiply_HLS_mac_muladd_16s_16s_27s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_16_1_1_U193 : component sparse_matrix_multiply_HLS_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => local_values_B_V_q0,
        din1 => local_values_B_V_1_q0,
        din2 => local_values_B_V_2_q0,
        din3 => local_values_B_V_3_q0,
        din4 => trunc_ln90_reg_488,
        dout => b_val_V_fu_338_p6);

    mux_42_32_1_1_U194 : component sparse_matrix_multiply_HLS_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => local_row_indices_B_q0,
        din1 => local_row_indices_B_1_q0,
        din2 => local_row_indices_B_2_q0,
        din3 => local_row_indices_B_3_q0,
        din4 => trunc_ln90_reg_488,
        dout => row_fu_351_p6);

    mux_42_16_1_1_U195 : component sparse_matrix_multiply_HLS_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => accum_V_q0,
        din1 => accum_V_1_q0,
        din2 => accum_V_2_q0,
        din3 => accum_V_3_q0,
        din4 => trunc_ln837_reg_524,
        dout => lhs_fu_394_p6);

    mac_muladd_16s_16s_27s_32_4_1_U196 : component sparse_matrix_multiply_HLS_mac_muladd_16s_16s_27s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 27,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_val_V_fu_338_p6,
        din1 => grp_fu_433_p1,
        din2 => lhs_1_fu_407_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p3);

    flow_control_loop_pipe_sequential_init_U : component sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    b_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_fu_88 <= sext_ln87_cast_fu_284_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln87_fu_296_p2 = ap_const_lv1_1))) then 
                b_fu_88 <= add_ln87_fu_327_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_464 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                accum_V_1_addr_reg_534 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
                accum_V_2_addr_reg_539 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
                accum_V_3_addr_reg_544 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
                accum_V_addr_reg_529 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_464 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln837_reg_519 <= add_ln837_fu_378_p2;
                trunc_ln837_reg_524 <= trunc_ln837_fu_383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln87_reg_464 <= icmp_ln87_fu_296_p2;
                trunc_ln8_reg_557 <= grp_fu_433_p3(26 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_V_cast_reg_454 <= r_V_cast_fu_276_p1;
                sext_ln87_1_cast_reg_459 <= sext_ln87_1_cast_fu_280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln87_fu_296_p2 = ap_const_lv1_1))) then
                trunc_ln90_reg_488 <= trunc_ln90_fu_323_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    accum_V_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, accum_V_1_addr_reg_534, ap_block_pp0_stage1, zext_ln837_fu_387_p1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_1_address0 <= accum_V_1_addr_reg_534;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            accum_V_1_address0 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
        else 
            accum_V_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_1_ce0 <= ap_const_logic_1;
        else 
            accum_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_1_d0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, trunc_ln8_reg_557, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                accum_V_1_d0 <= trunc_ln8_reg_557;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                accum_V_1_d0 <= ap_const_lv16_0;
            else 
                accum_V_1_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            accum_V_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, trunc_ln837_reg_524, icmp_ln1420_fu_419_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1420_fu_419_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_1_we0 <= ap_const_logic_1;
        else 
            accum_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, accum_V_2_addr_reg_539, ap_block_pp0_stage1, zext_ln837_fu_387_p1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_2_address0 <= accum_V_2_addr_reg_539;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            accum_V_2_address0 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
        else 
            accum_V_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_2_ce0 <= ap_const_logic_1;
        else 
            accum_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_2_d0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, trunc_ln8_reg_557, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                accum_V_2_d0 <= trunc_ln8_reg_557;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                accum_V_2_d0 <= ap_const_lv16_0;
            else 
                accum_V_2_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            accum_V_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, trunc_ln837_reg_524, icmp_ln1420_fu_419_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1420_fu_419_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_2_we0 <= ap_const_logic_1;
        else 
            accum_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, accum_V_3_addr_reg_544, ap_block_pp0_stage1, zext_ln837_fu_387_p1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_3_address0 <= accum_V_3_addr_reg_544;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            accum_V_3_address0 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
        else 
            accum_V_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_3_ce0 <= ap_const_logic_1;
        else 
            accum_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_3_d0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, trunc_ln8_reg_557, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                accum_V_3_d0 <= trunc_ln8_reg_557;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                accum_V_3_d0 <= ap_const_lv16_0;
            else 
                accum_V_3_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            accum_V_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_V_3_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, trunc_ln837_reg_524, icmp_ln1420_fu_419_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1420_fu_419_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_3_we0 <= ap_const_logic_1;
        else 
            accum_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, accum_V_addr_reg_529, ap_block_pp0_stage1, zext_ln837_fu_387_p1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_address0 <= accum_V_addr_reg_529;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            accum_V_address0 <= zext_ln837_fu_387_p1(10 - 1 downto 0);
        else 
            accum_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    accum_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_ce0 <= ap_const_logic_1;
        else 
            accum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_V_d0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, trunc_ln8_reg_557, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                accum_V_d0 <= trunc_ln8_reg_557;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                accum_V_d0 <= ap_const_lv16_0;
            else 
                accum_V_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            accum_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, trunc_ln837_reg_524, icmp_ln1420_fu_419_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1420_fu_419_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln837_reg_524 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            accum_V_we0 <= ap_const_logic_1;
        else 
            accum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln837_fu_378_p2 <= std_logic_vector(unsigned(zext_ln837_1) + unsigned(lshr_ln5_fu_368_p4));
    add_ln87_fu_327_p2 <= std_logic_vector(unsigned(b_fu_88) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln87_reg_464)
    begin
        if (((icmp_ln87_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_433_p1 <= r_V_cast_reg_454(16 - 1 downto 0);
    icmp_ln1420_fu_419_p2 <= "1" when (grp_fu_433_p3 = ap_const_lv32_0) else "0";
    icmp_ln87_fu_296_p2 <= "1" when (signed(b_fu_88) < signed(sext_ln87_1_cast_reg_459)) else "0";
    lhs_1_fu_407_p3 <= (lhs_fu_394_p6 & ap_const_lv11_0);
    local_row_indices_B_1_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_row_indices_B_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_row_indices_B_1_ce0 <= ap_const_logic_1;
        else 
            local_row_indices_B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_row_indices_B_2_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_row_indices_B_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_row_indices_B_2_ce0 <= ap_const_logic_1;
        else 
            local_row_indices_B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_row_indices_B_3_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_row_indices_B_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_row_indices_B_3_ce0 <= ap_const_logic_1;
        else 
            local_row_indices_B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_row_indices_B_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_row_indices_B_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_row_indices_B_ce0 <= ap_const_logic_1;
        else 
            local_row_indices_B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_B_V_1_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_values_B_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_values_B_V_1_ce0 <= ap_const_logic_1;
        else 
            local_values_B_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_B_V_2_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_values_B_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_values_B_V_2_ce0 <= ap_const_logic_1;
        else 
            local_values_B_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_B_V_3_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_values_B_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_values_B_V_3_ce0 <= ap_const_logic_1;
        else 
            local_values_B_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_values_B_V_address0 <= zext_ln90_fu_311_p1(10 - 1 downto 0);

    local_values_B_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_values_B_V_ce0 <= ap_const_logic_1;
        else 
            local_values_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln4_fu_301_p4 <= b_fu_88(11 downto 2);
    lshr_ln5_fu_368_p4 <= row_fu_351_p6(11 downto 2);
        r_V_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V),32));

        sext_ln87_1_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln87_1),64));

        sext_ln87_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln87),64));

    trunc_ln837_fu_383_p1 <= row_fu_351_p6(2 - 1 downto 0);
    trunc_ln90_fu_323_p1 <= b_fu_88(2 - 1 downto 0);
    zext_ln837_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln837_reg_519),64));
    zext_ln90_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_301_p4),64));
end behav;
