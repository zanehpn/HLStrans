-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_28_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_edges : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edge_list_ce0 : OUT STD_LOGIC;
    edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edge_list_ce1 : OUT STD_LOGIC;
    edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_1_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_1_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_2_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_2_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    neightbor_table_offsets_temp_3_ce0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_3_we0 : OUT STD_LOGIC;
    neightbor_table_offsets_temp_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neightbor_table_offsets_temp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_we0 : OUT STD_LOGIC;
    neighbor_table_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compute_neighbor_tables_compute_neighbor_tables_Pipeline_VITIS_LOOP_28_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln28_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln28_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal source_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal neightbor_table_offsets_temp_addr_reg_293 : STD_LOGIC_VECTOR (4 downto 0);
    signal neightbor_table_offsets_temp_1_addr_reg_298 : STD_LOGIC_VECTOR (4 downto 0);
    signal neightbor_table_offsets_temp_2_addr_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal neightbor_table_offsets_temp_3_addr_reg_308 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln33_fu_235_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln33_reg_313 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln30_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln31_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln34_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln28_fu_182_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln35_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_fu_168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_188_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln31_fu_201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln2_fu_217_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal offset_fu_239_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component compute_neighbor_tables_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_neighbor_tables_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U8 : component compute_neighbor_tables_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => neightbor_table_offsets_temp_q0,
        din1 => neightbor_table_offsets_temp_1_q0,
        din2 => neightbor_table_offsets_temp_2_q0,
        din3 => neightbor_table_offsets_temp_3_q0,
        din4 => trunc_ln33_reg_313,
        dout => offset_fu_239_p6);

    flow_control_loop_pipe_sequential_init_U : component compute_neighbor_tables_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln28_fu_176_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_60 <= add_ln28_fu_182_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_60 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln28_reg_274 <= icmp_ln28_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_274 = ap_const_lv1_1))) then
                neightbor_table_offsets_temp_1_addr_reg_298 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
                neightbor_table_offsets_temp_2_addr_reg_303 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
                neightbor_table_offsets_temp_3_addr_reg_308 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
                neightbor_table_offsets_temp_addr_reg_293 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
                trunc_ln33_reg_313 <= trunc_ln33_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_274 = ap_const_lv1_1))) then
                source_reg_288 <= edge_list_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln28_fu_182_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv31_1));
    add_ln35_fu_257_p2 <= std_logic_vector(unsigned(offset_fu_239_p6) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln28_fu_176_p2)
    begin
        if (((icmp_ln28_fu_176_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_60;
        end if; 
    end process;

    edge_list_address0 <= zext_ln31_fu_207_p1(11 - 1 downto 0);
    edge_list_address1 <= zext_ln30_fu_196_p1(11 - 1 downto 0);

    edge_list_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            edge_list_ce0 <= ap_const_logic_1;
        else 
            edge_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            edge_list_ce1 <= ap_const_logic_1;
        else 
            edge_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln28_fu_176_p2 <= "1" when (signed(zext_ln28_fu_172_p1) < signed(num_edges)) else "0";
    lshr_ln2_fu_217_p4 <= edge_list_q0(6 downto 2);
    neighbor_table_address0 <= zext_ln34_fu_252_p1(10 - 1 downto 0);

    neighbor_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neighbor_table_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_table_d0 <= source_reg_288;

    neighbor_table_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neighbor_table_we0 <= ap_const_logic_1;
        else 
            neighbor_table_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_1_addr_reg_298, ap_block_pp0_stage0, zext_ln33_fu_227_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neightbor_table_offsets_temp_1_address0 <= neightbor_table_offsets_temp_1_addr_reg_298;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            neightbor_table_offsets_temp_1_address0 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
        else 
            neightbor_table_offsets_temp_1_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            neightbor_table_offsets_temp_1_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_1_d0 <= add_ln35_fu_257_p2;

    neightbor_table_offsets_temp_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln33_reg_313)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln33_reg_313 = ap_const_lv2_1))) then 
            neightbor_table_offsets_temp_1_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_2_addr_reg_303, ap_block_pp0_stage0, zext_ln33_fu_227_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neightbor_table_offsets_temp_2_address0 <= neightbor_table_offsets_temp_2_addr_reg_303;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            neightbor_table_offsets_temp_2_address0 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
        else 
            neightbor_table_offsets_temp_2_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            neightbor_table_offsets_temp_2_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_2_d0 <= add_ln35_fu_257_p2;

    neightbor_table_offsets_temp_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln33_reg_313)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln33_reg_313 = ap_const_lv2_2))) then 
            neightbor_table_offsets_temp_2_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_3_addr_reg_308, ap_block_pp0_stage0, zext_ln33_fu_227_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neightbor_table_offsets_temp_3_address0 <= neightbor_table_offsets_temp_3_addr_reg_308;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            neightbor_table_offsets_temp_3_address0 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
        else 
            neightbor_table_offsets_temp_3_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            neightbor_table_offsets_temp_3_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_3_d0 <= add_ln35_fu_257_p2;

    neightbor_table_offsets_temp_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln33_reg_313)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln33_reg_313 = ap_const_lv2_3))) then 
            neightbor_table_offsets_temp_3_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neightbor_table_offsets_temp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, neightbor_table_offsets_temp_addr_reg_293, ap_block_pp0_stage0, zext_ln33_fu_227_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neightbor_table_offsets_temp_address0 <= neightbor_table_offsets_temp_addr_reg_293;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            neightbor_table_offsets_temp_address0 <= zext_ln33_fu_227_p1(5 - 1 downto 0);
        else 
            neightbor_table_offsets_temp_address0 <= "XXXXX";
        end if; 
    end process;


    neightbor_table_offsets_temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            neightbor_table_offsets_temp_ce0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neightbor_table_offsets_temp_d0 <= add_ln35_fu_257_p2;

    neightbor_table_offsets_temp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln33_reg_313)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln33_reg_313 = ap_const_lv2_0))) then 
            neightbor_table_offsets_temp_we0 <= ap_const_logic_1;
        else 
            neightbor_table_offsets_temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln31_fu_201_p2 <= (tmp_1_fu_188_p3 or ap_const_lv11_1);
    tmp_1_fu_188_p3 <= (trunc_ln28_fu_168_p1 & ap_const_lv1_0);
    trunc_ln28_fu_168_p1 <= ap_sig_allocacmp_i_1(10 - 1 downto 0);
    trunc_ln33_fu_235_p1 <= edge_list_q0(2 - 1 downto 0);
    zext_ln28_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    zext_ln30_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_188_p3),64));
    zext_ln31_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_201_p2),64));
    zext_ln33_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_217_p4),64));
    zext_ln34_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_fu_239_p6),64));
end behav;
