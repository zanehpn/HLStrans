// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_66_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        accum_V_address0,
        accum_V_ce0,
        accum_V_we0,
        accum_V_d0,
        accum_V_address1,
        accum_V_ce1,
        accum_V_we1,
        accum_V_d1,
        accum_V_1_address0,
        accum_V_1_ce0,
        accum_V_1_we0,
        accum_V_1_d0,
        accum_V_1_address1,
        accum_V_1_ce1,
        accum_V_1_we1,
        accum_V_1_d1,
        accum_V_2_address0,
        accum_V_2_ce0,
        accum_V_2_we0,
        accum_V_2_d0,
        accum_V_2_address1,
        accum_V_2_ce1,
        accum_V_2_we1,
        accum_V_2_d1,
        accum_V_3_address0,
        accum_V_3_ce0,
        accum_V_3_we0,
        accum_V_3_d0,
        accum_V_3_address1,
        accum_V_3_ce1,
        accum_V_3_we1,
        accum_V_3_d1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] accum_V_address0;
output   accum_V_ce0;
output   accum_V_we0;
output  [15:0] accum_V_d0;
output  [9:0] accum_V_address1;
output   accum_V_ce1;
output   accum_V_we1;
output  [15:0] accum_V_d1;
output  [9:0] accum_V_1_address0;
output   accum_V_1_ce0;
output   accum_V_1_we0;
output  [15:0] accum_V_1_d0;
output  [9:0] accum_V_1_address1;
output   accum_V_1_ce1;
output   accum_V_1_we1;
output  [15:0] accum_V_1_d1;
output  [9:0] accum_V_2_address0;
output   accum_V_2_ce0;
output   accum_V_2_we0;
output  [15:0] accum_V_2_d0;
output  [9:0] accum_V_2_address1;
output   accum_V_2_ce1;
output   accum_V_2_we1;
output  [15:0] accum_V_2_d1;
output  [9:0] accum_V_3_address0;
output   accum_V_3_ce0;
output   accum_V_3_we0;
output  [15:0] accum_V_3_d0;
output  [9:0] accum_V_3_address1;
output   accum_V_3_ce1;
output   accum_V_3_we1;
output  [15:0] accum_V_3_d1;

reg ap_idle;
reg[9:0] accum_V_address0;
reg accum_V_ce0;
reg accum_V_we0;
reg[9:0] accum_V_address1;
reg accum_V_ce1;
reg accum_V_we1;
reg[9:0] accum_V_1_address0;
reg accum_V_1_ce0;
reg accum_V_1_we0;
reg[9:0] accum_V_1_address1;
reg accum_V_1_ce1;
reg accum_V_1_we1;
reg[9:0] accum_V_2_address0;
reg accum_V_2_ce0;
reg accum_V_2_we0;
reg[9:0] accum_V_2_address1;
reg accum_V_2_ce1;
reg accum_V_2_we1;
reg[9:0] accum_V_3_address0;
reg accum_V_3_ce0;
reg accum_V_3_we0;
reg[9:0] accum_V_3_address1;
reg accum_V_3_ce1;
reg accum_V_3_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln66_fu_642_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire   [9:0] tmp_fu_654_p3;
reg   [9:0] tmp_reg_881;
wire   [63:0] zext_ln70_fu_662_p1;
wire   [63:0] zext_ln70_1_fu_676_p1;
wire   [63:0] zext_ln70_2_fu_694_p1;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln70_3_fu_707_p1;
wire   [63:0] zext_ln70_4_fu_720_p1;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln70_5_fu_733_p1;
wire   [63:0] zext_ln70_6_fu_746_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln70_7_fu_759_p1;
wire   [63:0] zext_ln70_8_fu_772_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln70_9_fu_785_p1;
wire   [63:0] zext_ln70_10_fu_798_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln70_11_fu_811_p1;
wire   [63:0] zext_ln70_12_fu_824_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln70_13_fu_837_p1;
wire   [63:0] zext_ln70_14_fu_850_p1;
wire   [63:0] zext_ln70_15_fu_863_p1;
reg   [6:0] i_fu_70;
wire   [6:0] add_ln66_fu_648_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [5:0] trunc_ln66_fu_638_p1;
wire   [9:0] or_ln70_fu_670_p2;
wire   [9:0] or_ln70_1_fu_689_p2;
wire   [9:0] or_ln70_2_fu_702_p2;
wire   [9:0] or_ln70_3_fu_715_p2;
wire   [9:0] or_ln70_4_fu_728_p2;
wire   [9:0] or_ln70_5_fu_741_p2;
wire   [9:0] or_ln70_6_fu_754_p2;
wire   [9:0] or_ln70_7_fu_767_p2;
wire   [9:0] or_ln70_8_fu_780_p2;
wire   [9:0] or_ln70_9_fu_793_p2;
wire   [9:0] or_ln70_10_fu_806_p2;
wire   [9:0] or_ln70_11_fu_819_p2;
wire   [9:0] or_ln70_12_fu_832_p2;
wire   [9:0] or_ln70_13_fu_845_p2;
wire   [9:0] or_ln70_14_fu_858_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_done_reg = 1'b0;
end

sparse_matrix_multiply_HLS_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln66_fu_642_p2 == 1'd0)) begin
            i_fu_70 <= add_ln66_fu_648_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_881[9 : 4] <= tmp_fu_654_p3[9 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_1_address0 = zext_ln70_15_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_1_address0 = zext_ln70_13_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_1_address0 = zext_ln70_11_fu_811_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_1_address0 = zext_ln70_9_fu_785_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_1_address0 = zext_ln70_7_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_1_address0 = zext_ln70_5_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_1_address0 = zext_ln70_3_fu_707_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_1_address0 = zext_ln70_1_fu_676_p1;
    end else begin
        accum_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_1_address1 = zext_ln70_14_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_1_address1 = zext_ln70_12_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_1_address1 = zext_ln70_10_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_1_address1 = zext_ln70_8_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_1_address1 = zext_ln70_6_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_1_address1 = zext_ln70_4_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_1_address1 = zext_ln70_2_fu_694_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_1_address1 = zext_ln70_fu_662_p1;
    end else begin
        accum_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_1_ce0 = 1'b1;
    end else begin
        accum_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_1_ce1 = 1'b1;
    end else begin
        accum_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_1_we0 = 1'b1;
    end else begin
        accum_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_1_we1 = 1'b1;
    end else begin
        accum_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_2_address0 = zext_ln70_15_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_2_address0 = zext_ln70_13_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_2_address0 = zext_ln70_11_fu_811_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_2_address0 = zext_ln70_9_fu_785_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_2_address0 = zext_ln70_7_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_2_address0 = zext_ln70_5_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_2_address0 = zext_ln70_3_fu_707_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_2_address0 = zext_ln70_1_fu_676_p1;
    end else begin
        accum_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_2_address1 = zext_ln70_14_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_2_address1 = zext_ln70_12_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_2_address1 = zext_ln70_10_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_2_address1 = zext_ln70_8_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_2_address1 = zext_ln70_6_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_2_address1 = zext_ln70_4_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_2_address1 = zext_ln70_2_fu_694_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_2_address1 = zext_ln70_fu_662_p1;
    end else begin
        accum_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_2_ce0 = 1'b1;
    end else begin
        accum_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_2_ce1 = 1'b1;
    end else begin
        accum_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_2_we0 = 1'b1;
    end else begin
        accum_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_2_we1 = 1'b1;
    end else begin
        accum_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_3_address0 = zext_ln70_15_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_3_address0 = zext_ln70_13_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_3_address0 = zext_ln70_11_fu_811_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_3_address0 = zext_ln70_9_fu_785_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_3_address0 = zext_ln70_7_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_3_address0 = zext_ln70_5_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_3_address0 = zext_ln70_3_fu_707_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_3_address0 = zext_ln70_1_fu_676_p1;
    end else begin
        accum_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_3_address1 = zext_ln70_14_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_3_address1 = zext_ln70_12_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_3_address1 = zext_ln70_10_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_3_address1 = zext_ln70_8_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_3_address1 = zext_ln70_6_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_3_address1 = zext_ln70_4_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_3_address1 = zext_ln70_2_fu_694_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_3_address1 = zext_ln70_fu_662_p1;
    end else begin
        accum_V_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_3_ce0 = 1'b1;
    end else begin
        accum_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_3_ce1 = 1'b1;
    end else begin
        accum_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_3_we0 = 1'b1;
    end else begin
        accum_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_3_we1 = 1'b1;
    end else begin
        accum_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_address0 = zext_ln70_15_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_address0 = zext_ln70_13_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_address0 = zext_ln70_11_fu_811_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_address0 = zext_ln70_9_fu_785_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_address0 = zext_ln70_7_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_address0 = zext_ln70_5_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_address0 = zext_ln70_3_fu_707_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_address0 = zext_ln70_1_fu_676_p1;
    end else begin
        accum_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        accum_V_address1 = zext_ln70_14_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        accum_V_address1 = zext_ln70_12_fu_824_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        accum_V_address1 = zext_ln70_10_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        accum_V_address1 = zext_ln70_8_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        accum_V_address1 = zext_ln70_6_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_V_address1 = zext_ln70_4_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        accum_V_address1 = zext_ln70_2_fu_694_p1;
    end else if (((icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_V_address1 = zext_ln70_fu_662_p1;
    end else begin
        accum_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_ce0 = 1'b1;
    end else begin
        accum_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_ce1 = 1'b1;
    end else begin
        accum_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_we0 = 1'b1;
    end else begin
        accum_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        accum_V_we1 = 1'b1;
    end else begin
        accum_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_70;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln66_fu_642_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_V_1_d0 = 16'd0;

assign accum_V_1_d1 = 16'd0;

assign accum_V_2_d0 = 16'd0;

assign accum_V_2_d1 = 16'd0;

assign accum_V_3_d0 = 16'd0;

assign accum_V_3_d1 = 16'd0;

assign accum_V_d0 = 16'd0;

assign accum_V_d1 = 16'd0;

assign add_ln66_fu_648_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln66_fu_642_p2 = ((ap_sig_allocacmp_i_1 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln70_10_fu_806_p2 = (tmp_reg_881 | 10'd11);

assign or_ln70_11_fu_819_p2 = (tmp_reg_881 | 10'd12);

assign or_ln70_12_fu_832_p2 = (tmp_reg_881 | 10'd13);

assign or_ln70_13_fu_845_p2 = (tmp_reg_881 | 10'd14);

assign or_ln70_14_fu_858_p2 = (tmp_reg_881 | 10'd15);

assign or_ln70_1_fu_689_p2 = (tmp_reg_881 | 10'd2);

assign or_ln70_2_fu_702_p2 = (tmp_reg_881 | 10'd3);

assign or_ln70_3_fu_715_p2 = (tmp_reg_881 | 10'd4);

assign or_ln70_4_fu_728_p2 = (tmp_reg_881 | 10'd5);

assign or_ln70_5_fu_741_p2 = (tmp_reg_881 | 10'd6);

assign or_ln70_6_fu_754_p2 = (tmp_reg_881 | 10'd7);

assign or_ln70_7_fu_767_p2 = (tmp_reg_881 | 10'd8);

assign or_ln70_8_fu_780_p2 = (tmp_reg_881 | 10'd9);

assign or_ln70_9_fu_793_p2 = (tmp_reg_881 | 10'd10);

assign or_ln70_fu_670_p2 = (tmp_fu_654_p3 | 10'd1);

assign tmp_fu_654_p3 = {{trunc_ln66_fu_638_p1}, {4'd0}};

assign trunc_ln66_fu_638_p1 = ap_sig_allocacmp_i_1[5:0];

assign zext_ln70_10_fu_798_p1 = or_ln70_9_fu_793_p2;

assign zext_ln70_11_fu_811_p1 = or_ln70_10_fu_806_p2;

assign zext_ln70_12_fu_824_p1 = or_ln70_11_fu_819_p2;

assign zext_ln70_13_fu_837_p1 = or_ln70_12_fu_832_p2;

assign zext_ln70_14_fu_850_p1 = or_ln70_13_fu_845_p2;

assign zext_ln70_15_fu_863_p1 = or_ln70_14_fu_858_p2;

assign zext_ln70_1_fu_676_p1 = or_ln70_fu_670_p2;

assign zext_ln70_2_fu_694_p1 = or_ln70_1_fu_689_p2;

assign zext_ln70_3_fu_707_p1 = or_ln70_2_fu_702_p2;

assign zext_ln70_4_fu_720_p1 = or_ln70_3_fu_715_p2;

assign zext_ln70_5_fu_733_p1 = or_ln70_4_fu_728_p2;

assign zext_ln70_6_fu_746_p1 = or_ln70_5_fu_741_p2;

assign zext_ln70_7_fu_759_p1 = or_ln70_6_fu_754_p2;

assign zext_ln70_8_fu_772_p1 = or_ln70_7_fu_767_p2;

assign zext_ln70_9_fu_785_p1 = or_ln70_8_fu_780_p2;

assign zext_ln70_fu_662_p1 = tmp_fu_654_p3;

always @ (posedge ap_clk) begin
    tmp_reg_881[3:0] <= 4'b0000;
end

endmodule //sparse_matrix_multiply_HLS_sparse_matrix_multiply_HLS_Pipeline_VITIS_LOOP_66_5
