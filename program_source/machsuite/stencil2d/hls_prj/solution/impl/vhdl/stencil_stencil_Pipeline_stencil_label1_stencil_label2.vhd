-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil_stencil_Pipeline_stencil_label1_stencil_label2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    orig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    orig_ce0 : OUT STD_LOGIC;
    orig_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    orig_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    orig_ce1 : OUT STD_LOGIC;
    orig_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    sol_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sol_ce0 : OUT STD_LOGIC;
    sol_we0 : OUT STD_LOGIC;
    sol_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stencil_stencil_Pipeline_stencil_label1_stencil_label2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1E84 : STD_LOGIC_VECTOR (12 downto 0) := "1111010000100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln7_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln7_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_load_reg_604 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln8_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln4_fu_287_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln4_reg_616 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_6_fu_295_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_6_reg_623 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln_fu_309_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln_reg_628 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln12_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_633 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_633_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln12_3_fu_364_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln12_3_reg_653 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln12_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_1_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_1_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_2_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_2_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_3_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_3_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_6_fu_428_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln12_6_reg_694 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln13_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_4_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_4_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_5_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_5_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_1_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_1_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_6_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_6_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_7_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_7_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_8_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_8_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln12_1_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln12_3_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_4_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln12_5_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_6_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln12_7_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_8_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal c_fu_76 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln8_fu_479_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (5 downto 0);
    signal r_fu_80 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln7_fu_301_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_r_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln7_fu_269_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln12_fu_322_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_mid1_fu_343_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_1_fu_354_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln4_1_fu_348_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_2_fu_386_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln12_4_fu_396_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln4_2_fu_406_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln4_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_5_fu_440_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln12_7_fu_465_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln13_4_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_5_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_3_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_6_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_2_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_236,
        din1 => filter_load,
        dout => mul_ln12_fu_376_p2);

    mul_32s_32s_32_1_1_U2 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_241,
        din1 => filter_load_1,
        dout => mul_ln12_1_fu_381_p2);

    mul_32s_32s_32_1_1_U3 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_236,
        din1 => filter_load_2,
        dout => mul_ln12_2_fu_418_p2);

    mul_32s_32s_32_1_1_U4 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_241,
        din1 => filter_load_3,
        dout => mul_ln12_3_fu_423_p2);

    mul_32s_32s_32_1_1_U5 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_236,
        din1 => filter_load_4,
        dout => mul_ln12_4_fu_455_p2);

    mul_32s_32s_32_1_1_U6 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_241,
        din1 => filter_load_5,
        dout => mul_ln12_5_fu_460_p2);

    mul_32s_32s_32_1_1_U7 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_236,
        din1 => filter_load_6,
        dout => mul_ln12_6_fu_489_p2);

    mul_32s_32s_32_1_1_U8 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_241,
        din1 => filter_load_7,
        dout => mul_ln12_7_fu_494_p2);

    mul_32s_32s_32_1_1_U9 : component stencil_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_236,
        din1 => filter_load_8,
        dout => mul_ln12_8_fu_499_p2);

    flow_control_loop_pipe_sequential_init_U : component stencil_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    c_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_fu_76 <= ap_const_lv6_0;
            elsif (((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                c_fu_76 <= add_ln8_fu_479_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln7_fu_263_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_84 <= add_ln7_fu_269_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln7_fu_263_p2 = ap_const_lv1_0))) then 
                    r_fu_80 <= select_ln7_fu_301_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_80 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_236 <= orig_q0;
            elsif ((((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_236 <= orig_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln12_3_reg_653 <= add_ln12_3_fu_364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln12_6_reg_694 <= add_ln12_6_fu_428_p3;
                add_ln13_reg_709 <= add_ln13_fu_451_p2;
                mul_ln12_2_reg_684 <= mul_ln12_2_fu_418_p2;
                mul_ln12_3_reg_689 <= mul_ln12_3_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln13_1_reg_729 <= add_ln13_1_fu_475_p2;
                mul_ln12_4_reg_714 <= mul_ln12_4_fu_455_p2;
                mul_ln12_5_reg_719 <= mul_ln12_5_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_fu_263_p2 = ap_const_lv1_0))) then
                add_ln_reg_628 <= add_ln_fu_309_p3;
                empty_6_reg_623 <= empty_6_fu_295_p2;
                icmp_ln8_reg_610 <= icmp_ln8_fu_281_p2;
                r_load_reg_604 <= ap_sig_allocacmp_r_load;
                select_ln4_reg_616 <= select_ln4_fu_287_p3;
                    zext_ln12_reg_633(12 downto 0) <= zext_ln12_fu_317_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln7_reg_600 <= icmp_ln7_fu_263_p2;
                mul_ln12_6_reg_734 <= mul_ln12_6_fu_489_p2;
                mul_ln12_7_reg_739 <= mul_ln12_7_fu_494_p2;
                    zext_ln12_reg_633_pp0_iter1_reg(12 downto 0) <= zext_ln12_reg_633(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln12_1_reg_669 <= mul_ln12_1_fu_381_p2;
                mul_ln12_reg_664 <= mul_ln12_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln12_8_reg_744 <= mul_ln12_8_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln7_reg_600 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_241 <= orig_q0;
            end if;
        end if;
    end process;
    zext_ln12_reg_633(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_633_pp0_iter1_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln12_1_fu_354_p2 <= std_logic_vector(unsigned(add_ln_reg_628) + unsigned(ap_const_lv13_2));
    add_ln12_2_fu_386_p2 <= std_logic_vector(unsigned(add_ln12_3_reg_653) + unsigned(ap_const_lv13_1));
    add_ln12_3_fu_364_p3 <= (select_ln4_1_fu_348_p3 & select_ln4_reg_616);
    add_ln12_4_fu_396_p2 <= std_logic_vector(unsigned(add_ln12_3_reg_653) + unsigned(ap_const_lv13_2));
    add_ln12_5_fu_440_p2 <= std_logic_vector(unsigned(add_ln12_6_fu_428_p3) + unsigned(ap_const_lv13_1));
    add_ln12_6_fu_428_p3 <= (add_ln4_fu_413_p2 & select_ln4_reg_616);
    add_ln12_7_fu_465_p2 <= std_logic_vector(unsigned(add_ln12_6_reg_694) + unsigned(ap_const_lv13_2));
    add_ln12_fu_322_p2 <= std_logic_vector(unsigned(add_ln_fu_309_p3) + unsigned(ap_const_lv13_1));
    add_ln13_1_fu_475_p2 <= std_logic_vector(unsigned(mul_ln12_2_reg_684) + unsigned(mul_ln12_3_reg_689));
    add_ln13_2_fu_504_p2 <= std_logic_vector(unsigned(add_ln13_1_reg_729) + unsigned(add_ln13_reg_709));
    add_ln13_3_fu_508_p2 <= std_logic_vector(unsigned(mul_ln12_4_reg_714) + unsigned(mul_ln12_5_reg_719));
    add_ln13_4_fu_512_p2 <= std_logic_vector(unsigned(mul_ln12_7_reg_739) + unsigned(mul_ln12_8_reg_744));
    add_ln13_5_fu_516_p2 <= std_logic_vector(unsigned(add_ln13_4_fu_512_p2) + unsigned(mul_ln12_6_reg_734));
    add_ln13_6_fu_521_p2 <= std_logic_vector(unsigned(add_ln13_5_fu_516_p2) + unsigned(add_ln13_3_fu_508_p2));
    add_ln13_fu_451_p2 <= std_logic_vector(unsigned(mul_ln12_1_reg_669) + unsigned(mul_ln12_reg_664));
    add_ln4_fu_413_p2 <= std_logic_vector(unsigned(r_load_reg_604) + unsigned(select_ln4_2_fu_406_p3));
    add_ln7_fu_269_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv13_1));
    add_ln8_fu_479_p2 <= std_logic_vector(unsigned(select_ln4_reg_616) + unsigned(ap_const_lv6_1));
    add_ln_fu_309_p3 <= (select_ln7_fu_301_p3 & select_ln4_fu_287_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln7_reg_600)
    begin
        if (((icmp_ln7_reg_600 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_r_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_r_load <= r_fu_80;
        end if; 
    end process;

    empty_6_fu_295_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_load) + unsigned(ap_const_lv7_1));
    icmp_ln7_fu_263_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv13_1E84) else "0";
    icmp_ln8_fu_281_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv6_3E) else "0";

    orig_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln12_1_fu_328_p1, ap_block_pp0_stage1, zext_ln12_3_fu_371_p1, ap_block_pp0_stage2, zext_ln12_5_fu_401_p1, ap_block_pp0_stage3, zext_ln12_7_fu_446_p1, zext_ln12_8_fu_470_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                orig_address0 <= zext_ln12_8_fu_470_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                orig_address0 <= zext_ln12_7_fu_446_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                orig_address0 <= zext_ln12_5_fu_401_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                orig_address0 <= zext_ln12_3_fu_371_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                orig_address0 <= zext_ln12_1_fu_328_p1(13 - 1 downto 0);
            else 
                orig_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            orig_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    orig_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, zext_ln12_fu_317_p1, ap_block_pp0_stage0, zext_ln12_2_fu_359_p1, ap_block_pp0_stage1, zext_ln12_4_fu_391_p1, ap_block_pp0_stage2, zext_ln12_6_fu_435_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                orig_address1 <= zext_ln12_6_fu_435_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                orig_address1 <= zext_ln12_4_fu_391_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                orig_address1 <= zext_ln12_2_fu_359_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                orig_address1 <= zext_ln12_fu_317_p1(13 - 1 downto 0);
            else 
                orig_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            orig_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    orig_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_ce0 <= ap_const_logic_1;
        else 
            orig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_ce1 <= ap_const_logic_1;
        else 
            orig_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid1_fu_343_p2 <= std_logic_vector(unsigned(r_load_reg_604) + unsigned(ap_const_lv7_2));
    select_ln4_1_fu_348_p3 <= 
        p_mid1_fu_343_p2 when (icmp_ln8_reg_610(0) = '1') else 
        empty_6_reg_623;
    select_ln4_2_fu_406_p3 <= 
        ap_const_lv7_3 when (icmp_ln8_reg_610(0) = '1') else 
        ap_const_lv7_2;
    select_ln4_fu_287_p3 <= 
        ap_const_lv6_0 when (icmp_ln8_fu_281_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln7_fu_301_p3 <= 
        empty_6_fu_295_p2 when (icmp_ln8_fu_281_p2(0) = '1') else 
        ap_sig_allocacmp_r_load;
    sol_address0 <= zext_ln12_reg_633_pp0_iter1_reg(13 - 1 downto 0);

    sol_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sol_ce0 <= ap_const_logic_1;
        else 
            sol_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_d0 <= std_logic_vector(unsigned(add_ln13_6_fu_521_p2) + unsigned(add_ln13_2_fu_504_p2));

    sol_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sol_we0 <= ap_const_logic_1;
        else 
            sol_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_fu_322_p2),64));
    zext_ln12_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_fu_354_p2),64));
    zext_ln12_3_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_3_fu_364_p3),64));
    zext_ln12_4_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_2_fu_386_p2),64));
    zext_ln12_5_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_4_fu_396_p2),64));
    zext_ln12_6_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_6_fu_428_p3),64));
    zext_ln12_7_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_5_fu_440_p2),64));
    zext_ln12_8_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_7_fu_465_p2),64));
    zext_ln12_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_309_p3),64));
end behav;
