-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity md_md_Pipeline_loop_q is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_z : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_y : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_x : IN STD_LOGIC_VECTOR (63 downto 0);
    n_points_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    add_ln39_1 : IN STD_LOGIC_VECTOR (9 downto 0);
    position_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    position_ce0 : OUT STD_LOGIC;
    position_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
    position_load : IN STD_LOGIC_VECTOR (190 downto 0);
    icmp_ln42_3 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_x : IN STD_LOGIC_VECTOR (63 downto 0);
    icmp_ln42_7 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_y : IN STD_LOGIC_VECTOR (63 downto 0);
    icmp_ln42_11 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_z : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_z_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_z_2_out_ap_vld : OUT STD_LOGIC;
    sum_y_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_y_2_out_ap_vld : OUT STD_LOGIC;
    sum_x_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    sum_x_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of md_md_Pipeline_loop_q is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_C000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF8000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state32_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_state40_pp0_stage3_iter9 : BOOLEAN;
    signal ap_block_state44_pp0_stage3_iter10 : BOOLEAN;
    signal ap_block_state48_pp0_stage3_iter11 : BOOLEAN;
    signal ap_block_state52_pp0_stage3_iter12 : BOOLEAN;
    signal ap_block_state56_pp0_stage3_iter13 : BOOLEAN;
    signal ap_block_state60_pp0_stage3_iter14 : BOOLEAN;
    signal ap_block_state64_pp0_stage3_iter15 : BOOLEAN;
    signal ap_block_state68_pp0_stage3_iter16 : BOOLEAN;
    signal ap_block_state72_pp0_stage3_iter17 : BOOLEAN;
    signal ap_block_state76_pp0_stage3_iter18 : BOOLEAN;
    signal ap_block_state80_pp0_stage3_iter19 : BOOLEAN;
    signal ap_block_state84_pp0_stage3_iter20 : BOOLEAN;
    signal ap_block_state88_pp0_stage3_iter21 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln37_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state85_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln37_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_682_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_6_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_6_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_10_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_10_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_x_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_x_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state46_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state62_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state70_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state78_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state82_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state86_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln39_1_reg_712 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln39_2_reg_717 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_4_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_4_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_5_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_5_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_8_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_8_reg_742 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_9_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_9_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_y_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_y_reg_752 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state47_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state55_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state59_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state63_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state67_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state71_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter18 : BOOLEAN;
    signal ap_block_state79_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_state83_pp0_stage2_iter20 : BOOLEAN;
    signal ap_block_state87_pp0_stage2_iter21 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_z_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_z_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal and_ln42_5_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_5_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_7_reg_774_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778 : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dx_reg_778_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785 : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dy_reg_785_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792 : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dz_reg_792_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_803 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_808 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_808_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_813 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823 : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r2inv_reg_823_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_830 : STD_LOGIC_VECTOR (63 downto 0);
    signal r6inv_reg_835 : STD_LOGIC_VECTOR (63 downto 0);
    signal r6inv_reg_835_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r6inv_reg_835_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul5_reg_841 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_reg_846 : STD_LOGIC_VECTOR (63 downto 0);
    signal potential_reg_851 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul8_reg_862 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul9_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul4_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln39_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal q_idx_fu_118 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln37_fu_308_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_q_idx_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_x_1_fu_122 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_sum_x_1_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal sum_y_1_fu_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_sum_y_1_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_z_1_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_sum_z_1_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_idx_cast_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_fu_314_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_fu_318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_329_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_345_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_361_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln39_3_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_411_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_fu_421_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_3_fu_437_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_2_fu_447_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_469_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_4_fu_479_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln42_4_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_5_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_4_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_3_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_2_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_3_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_6_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_240_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_244_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_248_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to21 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component md_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component md_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component md_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component md_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component md_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dadddsub_64ns_64ns_64_5_full_dsp_1_U1 : component md_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        din1 => grp_fu_240_p1,
        opcode => grp_fu_240_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    dadddsub_64ns_64ns_64_5_full_dsp_1_U2 : component md_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_244_p0,
        din1 => grp_fu_244_p1,
        opcode => grp_fu_244_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    dadddsub_64ns_64ns_64_5_full_dsp_1_U3 : component md_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        opcode => grp_fu_248_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_248_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U4 : component md_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_253_p0,
        din1 => grp_fu_253_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U5 : component md_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U6 : component md_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    ddiv_64ns_64ns_64_22_no_dsp_1_U7 : component md_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => add1_reg_818,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U8 : component md_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_271_p0,
        din1 => grp_fu_271_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_271_p2);

    flow_control_loop_pipe_sequential_init_U : component md_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    q_idx_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln37_fu_302_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    q_idx_fu_118 <= add_ln37_fu_308_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    q_idx_fu_118 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    sum_x_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_x_1_fu_122 <= sum_x;
            elsif (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter21_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                sum_x_1_fu_122 <= grp_fu_244_p2;
            end if; 
        end if;
    end process;

    sum_y_1_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_y_1_fu_126 <= sum_y;
            elsif (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter21_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                sum_y_1_fu_126 <= grp_fu_248_p2;
            end if; 
        end if;
    end process;

    sum_z_1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_z_1_fu_130 <= sum_z;
            elsif (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter21_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                sum_z_1_fu_130 <= grp_fu_244_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add1_reg_818 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_reg_813 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln37_reg_682 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                and_ln42_5_reg_769 <= and_ln42_5_fu_523_p2;
                q_z_reg_763 <= q_z_fu_505_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln42_7_reg_774 <= and_ln42_7_fu_573_p2;
                and_ln42_7_reg_774_pp0_iter10_reg <= and_ln42_7_reg_774_pp0_iter9_reg;
                and_ln42_7_reg_774_pp0_iter11_reg <= and_ln42_7_reg_774_pp0_iter10_reg;
                and_ln42_7_reg_774_pp0_iter12_reg <= and_ln42_7_reg_774_pp0_iter11_reg;
                and_ln42_7_reg_774_pp0_iter13_reg <= and_ln42_7_reg_774_pp0_iter12_reg;
                and_ln42_7_reg_774_pp0_iter14_reg <= and_ln42_7_reg_774_pp0_iter13_reg;
                and_ln42_7_reg_774_pp0_iter15_reg <= and_ln42_7_reg_774_pp0_iter14_reg;
                and_ln42_7_reg_774_pp0_iter16_reg <= and_ln42_7_reg_774_pp0_iter15_reg;
                and_ln42_7_reg_774_pp0_iter17_reg <= and_ln42_7_reg_774_pp0_iter16_reg;
                and_ln42_7_reg_774_pp0_iter18_reg <= and_ln42_7_reg_774_pp0_iter17_reg;
                and_ln42_7_reg_774_pp0_iter19_reg <= and_ln42_7_reg_774_pp0_iter18_reg;
                and_ln42_7_reg_774_pp0_iter20_reg <= and_ln42_7_reg_774_pp0_iter19_reg;
                and_ln42_7_reg_774_pp0_iter21_reg <= and_ln42_7_reg_774_pp0_iter20_reg;
                and_ln42_7_reg_774_pp0_iter2_reg <= and_ln42_7_reg_774;
                and_ln42_7_reg_774_pp0_iter3_reg <= and_ln42_7_reg_774_pp0_iter2_reg;
                and_ln42_7_reg_774_pp0_iter4_reg <= and_ln42_7_reg_774_pp0_iter3_reg;
                and_ln42_7_reg_774_pp0_iter5_reg <= and_ln42_7_reg_774_pp0_iter4_reg;
                and_ln42_7_reg_774_pp0_iter6_reg <= and_ln42_7_reg_774_pp0_iter5_reg;
                and_ln42_7_reg_774_pp0_iter7_reg <= and_ln42_7_reg_774_pp0_iter6_reg;
                and_ln42_7_reg_774_pp0_iter8_reg <= and_ln42_7_reg_774_pp0_iter7_reg;
                and_ln42_7_reg_774_pp0_iter9_reg <= and_ln42_7_reg_774_pp0_iter8_reg;
                dx_reg_778_pp0_iter10_reg <= dx_reg_778_pp0_iter9_reg;
                dx_reg_778_pp0_iter11_reg <= dx_reg_778_pp0_iter10_reg;
                dx_reg_778_pp0_iter12_reg <= dx_reg_778_pp0_iter11_reg;
                dx_reg_778_pp0_iter13_reg <= dx_reg_778_pp0_iter12_reg;
                dx_reg_778_pp0_iter14_reg <= dx_reg_778_pp0_iter13_reg;
                dx_reg_778_pp0_iter15_reg <= dx_reg_778_pp0_iter14_reg;
                dx_reg_778_pp0_iter16_reg <= dx_reg_778_pp0_iter15_reg;
                dx_reg_778_pp0_iter17_reg <= dx_reg_778_pp0_iter16_reg;
                dx_reg_778_pp0_iter18_reg <= dx_reg_778_pp0_iter17_reg;
                dx_reg_778_pp0_iter3_reg <= dx_reg_778;
                dx_reg_778_pp0_iter4_reg <= dx_reg_778_pp0_iter3_reg;
                dx_reg_778_pp0_iter5_reg <= dx_reg_778_pp0_iter4_reg;
                dx_reg_778_pp0_iter6_reg <= dx_reg_778_pp0_iter5_reg;
                dx_reg_778_pp0_iter7_reg <= dx_reg_778_pp0_iter6_reg;
                dx_reg_778_pp0_iter8_reg <= dx_reg_778_pp0_iter7_reg;
                dx_reg_778_pp0_iter9_reg <= dx_reg_778_pp0_iter8_reg;
                dy_reg_785_pp0_iter10_reg <= dy_reg_785_pp0_iter9_reg;
                dy_reg_785_pp0_iter11_reg <= dy_reg_785_pp0_iter10_reg;
                dy_reg_785_pp0_iter12_reg <= dy_reg_785_pp0_iter11_reg;
                dy_reg_785_pp0_iter13_reg <= dy_reg_785_pp0_iter12_reg;
                dy_reg_785_pp0_iter14_reg <= dy_reg_785_pp0_iter13_reg;
                dy_reg_785_pp0_iter15_reg <= dy_reg_785_pp0_iter14_reg;
                dy_reg_785_pp0_iter16_reg <= dy_reg_785_pp0_iter15_reg;
                dy_reg_785_pp0_iter17_reg <= dy_reg_785_pp0_iter16_reg;
                dy_reg_785_pp0_iter18_reg <= dy_reg_785_pp0_iter17_reg;
                dy_reg_785_pp0_iter3_reg <= dy_reg_785;
                dy_reg_785_pp0_iter4_reg <= dy_reg_785_pp0_iter3_reg;
                dy_reg_785_pp0_iter5_reg <= dy_reg_785_pp0_iter4_reg;
                dy_reg_785_pp0_iter6_reg <= dy_reg_785_pp0_iter5_reg;
                dy_reg_785_pp0_iter7_reg <= dy_reg_785_pp0_iter6_reg;
                dy_reg_785_pp0_iter8_reg <= dy_reg_785_pp0_iter7_reg;
                dy_reg_785_pp0_iter9_reg <= dy_reg_785_pp0_iter8_reg;
                dz_reg_792_pp0_iter10_reg <= dz_reg_792_pp0_iter9_reg;
                dz_reg_792_pp0_iter11_reg <= dz_reg_792_pp0_iter10_reg;
                dz_reg_792_pp0_iter12_reg <= dz_reg_792_pp0_iter11_reg;
                dz_reg_792_pp0_iter13_reg <= dz_reg_792_pp0_iter12_reg;
                dz_reg_792_pp0_iter14_reg <= dz_reg_792_pp0_iter13_reg;
                dz_reg_792_pp0_iter15_reg <= dz_reg_792_pp0_iter14_reg;
                dz_reg_792_pp0_iter16_reg <= dz_reg_792_pp0_iter15_reg;
                dz_reg_792_pp0_iter17_reg <= dz_reg_792_pp0_iter16_reg;
                dz_reg_792_pp0_iter18_reg <= dz_reg_792_pp0_iter17_reg;
                dz_reg_792_pp0_iter19_reg <= dz_reg_792_pp0_iter18_reg;
                dz_reg_792_pp0_iter3_reg <= dz_reg_792;
                dz_reg_792_pp0_iter4_reg <= dz_reg_792_pp0_iter3_reg;
                dz_reg_792_pp0_iter5_reg <= dz_reg_792_pp0_iter4_reg;
                dz_reg_792_pp0_iter6_reg <= dz_reg_792_pp0_iter5_reg;
                dz_reg_792_pp0_iter7_reg <= dz_reg_792_pp0_iter6_reg;
                dz_reg_792_pp0_iter8_reg <= dz_reg_792_pp0_iter7_reg;
                dz_reg_792_pp0_iter9_reg <= dz_reg_792_pp0_iter8_reg;
                icmp_ln37_reg_682 <= icmp_ln37_fu_302_p2;
                icmp_ln37_reg_682_pp0_iter10_reg <= icmp_ln37_reg_682_pp0_iter9_reg;
                icmp_ln37_reg_682_pp0_iter11_reg <= icmp_ln37_reg_682_pp0_iter10_reg;
                icmp_ln37_reg_682_pp0_iter12_reg <= icmp_ln37_reg_682_pp0_iter11_reg;
                icmp_ln37_reg_682_pp0_iter13_reg <= icmp_ln37_reg_682_pp0_iter12_reg;
                icmp_ln37_reg_682_pp0_iter14_reg <= icmp_ln37_reg_682_pp0_iter13_reg;
                icmp_ln37_reg_682_pp0_iter15_reg <= icmp_ln37_reg_682_pp0_iter14_reg;
                icmp_ln37_reg_682_pp0_iter16_reg <= icmp_ln37_reg_682_pp0_iter15_reg;
                icmp_ln37_reg_682_pp0_iter17_reg <= icmp_ln37_reg_682_pp0_iter16_reg;
                icmp_ln37_reg_682_pp0_iter18_reg <= icmp_ln37_reg_682_pp0_iter17_reg;
                icmp_ln37_reg_682_pp0_iter19_reg <= icmp_ln37_reg_682_pp0_iter18_reg;
                icmp_ln37_reg_682_pp0_iter1_reg <= icmp_ln37_reg_682;
                icmp_ln37_reg_682_pp0_iter20_reg <= icmp_ln37_reg_682_pp0_iter19_reg;
                icmp_ln37_reg_682_pp0_iter2_reg <= icmp_ln37_reg_682_pp0_iter1_reg;
                icmp_ln37_reg_682_pp0_iter3_reg <= icmp_ln37_reg_682_pp0_iter2_reg;
                icmp_ln37_reg_682_pp0_iter4_reg <= icmp_ln37_reg_682_pp0_iter3_reg;
                icmp_ln37_reg_682_pp0_iter5_reg <= icmp_ln37_reg_682_pp0_iter4_reg;
                icmp_ln37_reg_682_pp0_iter6_reg <= icmp_ln37_reg_682_pp0_iter5_reg;
                icmp_ln37_reg_682_pp0_iter7_reg <= icmp_ln37_reg_682_pp0_iter6_reg;
                icmp_ln37_reg_682_pp0_iter8_reg <= icmp_ln37_reg_682_pp0_iter7_reg;
                icmp_ln37_reg_682_pp0_iter9_reg <= icmp_ln37_reg_682_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                r6inv_reg_835_pp0_iter14_reg <= r6inv_reg_835;
                r6inv_reg_835_pp0_iter15_reg <= r6inv_reg_835_pp0_iter14_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln42_7_reg_774) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dx_reg_778 <= grp_fu_240_p2;
                dy_reg_785 <= grp_fu_244_p2;
                dz_reg_792 <= grp_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter18_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                f_reg_856 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln42_10_reg_701 <= icmp_ln42_10_fu_371_p2;
                icmp_ln42_2_reg_691 <= icmp_ln42_2_fu_339_p2;
                icmp_ln42_6_reg_696 <= icmp_ln42_6_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln37_reg_682 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln42_1_reg_727 <= icmp_ln42_1_fu_431_p2;
                icmp_ln42_4_reg_732 <= icmp_ln42_4_fu_457_p2;
                icmp_ln42_5_reg_737 <= icmp_ln42_5_fu_463_p2;
                icmp_ln42_8_reg_742 <= icmp_ln42_8_fu_489_p2;
                icmp_ln42_9_reg_747 <= icmp_ln42_9_fu_495_p2;
                icmp_ln42_reg_722 <= icmp_ln42_fu_425_p2;
                q_x_reg_706 <= q_x_fu_386_p1;
                trunc_ln39_1_reg_712 <= position_q0(127 downto 64);
                trunc_ln39_2_reg_717 <= position_q0(191 downto 128);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul1_reg_803 <= grp_fu_257_p2;
                mul2_reg_808 <= grp_fu_261_p2;
                mul_reg_798 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul2_reg_808_pp0_iter4_reg <= mul2_reg_808;
                r2inv_reg_823_pp0_iter12_reg <= r2inv_reg_823;
                r2inv_reg_823_pp0_iter13_reg <= r2inv_reg_823_pp0_iter12_reg;
                r2inv_reg_823_pp0_iter14_reg <= r2inv_reg_823_pp0_iter13_reg;
                r2inv_reg_823_pp0_iter15_reg <= r2inv_reg_823_pp0_iter14_reg;
                r2inv_reg_823_pp0_iter16_reg <= r2inv_reg_823_pp0_iter15_reg;
                r2inv_reg_823_pp0_iter17_reg <= r2inv_reg_823_pp0_iter16_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter12_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul3_reg_830 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter20_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul4_reg_882 <= grp_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter14_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul5_reg_841 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter19_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul8_reg_862 <= grp_fu_257_p2;
                mul9_reg_867 <= grp_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter17_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                potential_reg_851 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln37_reg_682 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                q_y_reg_752 <= q_y_fu_501_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter11_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                r2inv_reg_823 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter13_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                r6inv_reg_835 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter16_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sub_reg_846 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln37_reg_682 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_2_reg_758 <= grp_fu_271_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to21, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to21 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln37_fu_308_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_q_idx_1) + unsigned(ap_const_lv31_1));
    add_ln39_fu_318_p2 <= std_logic_vector(unsigned(add_ln39_1) + unsigned(trunc_ln39_fu_314_p1));
    and_ln42_1_fu_543_p2 <= (tmp_2_reg_758 and and_ln42_fu_537_p2);
    and_ln42_2_fu_556_p2 <= (or_ln42_3_fu_552_p2 and or_ln42_2_fu_548_p2);
    and_ln42_3_fu_562_p2 <= (grp_fu_271_p2 and and_ln42_2_fu_556_p2);
    and_ln42_4_fu_517_p2 <= (or_ln42_5_fu_513_p2 and or_ln42_4_fu_509_p2);
    and_ln42_5_fu_523_p2 <= (grp_fu_271_p2 and and_ln42_4_fu_517_p2);
    and_ln42_6_fu_568_p2 <= (and_ln42_5_reg_769 and and_ln42_3_fu_562_p2);
    and_ln42_7_fu_573_p2 <= (and_ln42_6_fu_568_p2 and and_ln42_1_fu_543_p2);
    and_ln42_fu_537_p2 <= (or_ln42_fu_529_p2 and or_ln42_1_fu_533_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage3_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage3_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage3_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage3_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage3_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage3_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage3_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage3_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage2_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage3_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage2_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage3_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage2_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage3_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage2_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage3_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln37_reg_682)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln37_reg_682 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg, ap_loop_exit_ready_pp0_iter17_reg, ap_loop_exit_ready_pp0_iter18_reg, ap_loop_exit_ready_pp0_iter19_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to21_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to21 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to21 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_q_idx_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, q_idx_fu_118, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_q_idx_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_q_idx_1 <= q_idx_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_sum_x_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_CS_fsm_pp0_stage1, and_ln42_7_reg_774_pp0_iter21_reg, grp_fu_244_p2, sum_x_1_fu_122, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter21_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_sig_allocacmp_sum_x_1_load_1 <= grp_fu_244_p2;
        else 
            ap_sig_allocacmp_sum_x_1_load_1 <= sum_x_1_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_sum_y_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_CS_fsm_pp0_stage1, and_ln42_7_reg_774_pp0_iter21_reg, grp_fu_248_p2, ap_block_pp0_stage1, sum_y_1_fu_126)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter21_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_sig_allocacmp_sum_y_1_load_1 <= grp_fu_248_p2;
        else 
            ap_sig_allocacmp_sum_y_1_load_1 <= sum_y_1_fu_126;
        end if; 
    end process;


    ap_sig_allocacmp_sum_z_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_CS_fsm_pp0_stage3, and_ln42_7_reg_774_pp0_iter21_reg, grp_fu_244_p2, ap_block_pp0_stage3, sum_z_1_fu_130)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter21_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            ap_sig_allocacmp_sum_z_1_load_1 <= grp_fu_244_p2;
        else 
            ap_sig_allocacmp_sum_z_1_load_1 <= sum_z_1_fu_130;
        end if; 
    end process;


    grp_fu_240_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, and_ln42_7_fu_573_p2, and_ln42_7_reg_774_pp0_iter3_reg, and_ln42_7_reg_774_pp0_iter4_reg, and_ln42_7_reg_774_pp0_iter15_reg, ap_block_pp0_stage2_00001, ap_block_pp0_stage3_00001, ap_block_pp0_stage1_00001, ap_block_pp0_stage0_00001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln42_7_fu_573_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001))) then 
            grp_fu_240_opcode <= ap_const_lv2_1;
        elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter15_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_00001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_00001)))) then 
            grp_fu_240_opcode <= ap_const_lv2_0;
        else 
            grp_fu_240_opcode <= "XX";
        end if; 
    end process;


    grp_fu_240_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage3, p_x, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul_reg_798, add_reg_813, mul5_reg_841, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_240_p0 <= mul5_reg_841;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_240_p0 <= add_reg_813;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_240_p0 <= mul_reg_798;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_240_p0 <= p_x;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_240_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage3, q_x_reg_706, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul1_reg_803, mul2_reg_808_pp0_iter4_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_240_p1 <= ap_const_lv64_C000000000000000;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_240_p1 <= mul2_reg_808_pp0_iter4_reg;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_240_p1 <= mul1_reg_803;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_240_p1 <= q_x_reg_706;
        else 
            grp_fu_240_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, and_ln42_7_fu_573_p2, and_ln42_7_reg_774_pp0_iter20_reg, ap_block_pp0_stage3_00001, ap_block_pp0_stage1_00001, ap_block_pp0_stage0_00001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln42_7_fu_573_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001))) then 
            grp_fu_244_opcode <= ap_const_lv2_1;
        elsif ((((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter20_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_00001)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter20_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001)))) then 
            grp_fu_244_opcode <= ap_const_lv2_0;
        else 
            grp_fu_244_opcode <= "XX";
        end if; 
    end process;


    grp_fu_244_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage3, p_y, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_sig_allocacmp_sum_x_1_load_1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_sig_allocacmp_sum_z_1_load_1)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_244_p0 <= ap_sig_allocacmp_sum_z_1_load_1;
        elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_244_p0 <= ap_sig_allocacmp_sum_x_1_load_1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_244_p0 <= p_y;
        else 
            grp_fu_244_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, q_y_reg_752, mul8_reg_862, mul4_reg_882, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_244_p1 <= mul4_reg_882;
        elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_244_p1 <= mul8_reg_862;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_244_p1 <= q_y_reg_752;
        else 
            grp_fu_244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage1, and_ln42_7_fu_573_p2, and_ln42_7_reg_774_pp0_iter20_reg, ap_block_pp0_stage1_00001, ap_block_pp0_stage0_00001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln42_7_fu_573_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001))) then 
            grp_fu_248_opcode <= ap_const_lv2_1;
        elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln42_7_reg_774_pp0_iter20_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001))) then 
            grp_fu_248_opcode <= ap_const_lv2_0;
        else 
            grp_fu_248_opcode <= "XX";
        end if; 
    end process;


    grp_fu_248_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, p_z, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_sig_allocacmp_sum_y_1_load_1)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_248_p0 <= ap_sig_allocacmp_sum_y_1_load_1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_248_p0 <= p_z;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage1, q_z_reg_763, mul9_reg_867, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_248_p1 <= mul9_reg_867;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_248_p1 <= q_z_reg_763;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_253_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, dx_reg_778, r2inv_reg_823, mul3_reg_830, r6inv_reg_835, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_253_p0 <= r6inv_reg_835;
        elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_253_p0 <= mul3_reg_830;
        elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_253_p0 <= r2inv_reg_823;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_253_p0 <= dx_reg_778;
        else 
            grp_fu_253_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_253_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, dx_reg_778, r2inv_reg_823, r2inv_reg_823_pp0_iter12_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_253_p1 <= ap_const_lv64_3FF8000000000000;
        elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_253_p1 <= r2inv_reg_823_pp0_iter12_reg;
        elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_253_p1 <= r2inv_reg_823;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_253_p1 <= dx_reg_778;
        else 
            grp_fu_253_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, dy_reg_785, r2inv_reg_823_pp0_iter17_reg, r6inv_reg_835_pp0_iter15_reg, f_reg_856, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_257_p0 <= f_reg_856;
        elsif (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_257_p0 <= r2inv_reg_823_pp0_iter17_reg;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_257_p0 <= r6inv_reg_835_pp0_iter15_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_257_p0 <= dy_reg_785;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, dx_reg_778_pp0_iter18_reg, dy_reg_785, sub_reg_846, potential_reg_851, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_257_p1 <= dx_reg_778_pp0_iter18_reg;
        elsif (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_257_p1 <= potential_reg_851;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_257_p1 <= sub_reg_846;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_257_p1 <= dy_reg_785;
        else 
            grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, dz_reg_792, f_reg_856, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            grp_fu_261_p0 <= f_reg_856;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_261_p0 <= dz_reg_792;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, dy_reg_785_pp0_iter18_reg, dz_reg_792, dz_reg_792_pp0_iter19_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_261_p1 <= dz_reg_792_pp0_iter19_reg;
        elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_261_p1 <= dy_reg_785_pp0_iter18_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_261_p1 <= dz_reg_792;
        else 
            grp_fu_261_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_271_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, q_x_fu_386_p1, ap_CS_fsm_pp0_stage1, q_y_fu_501_p1, ap_CS_fsm_pp0_stage2, q_z_fu_505_p1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_271_p0 <= q_z_fu_505_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_271_p0 <= q_y_fu_501_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_271_p0 <= q_x_fu_386_p1;
            else 
                grp_fu_271_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_271_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_271_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, p_x, p_y, p_z, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_271_p1 <= p_z;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_271_p1 <= p_y;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_271_p1 <= p_x;
            else 
                grp_fu_271_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_271_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln37_fu_302_p2 <= "1" when (signed(q_idx_cast_fu_298_p1) < signed(n_points_load_1)) else "0";
    icmp_ln42_10_fu_371_p2 <= "0" when (tmp_7_fu_361_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln42_1_fu_431_p2 <= "1" when (trunc_ln42_fu_421_p1 = ap_const_lv52_0) else "0";
    icmp_ln42_2_fu_339_p2 <= "0" when (tmp_1_fu_329_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln42_4_fu_457_p2 <= "0" when (tmp_3_fu_437_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln42_5_fu_463_p2 <= "1" when (trunc_ln42_2_fu_447_p4 = ap_const_lv52_0) else "0";
    icmp_ln42_6_fu_355_p2 <= "0" when (tmp_4_fu_345_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln42_8_fu_489_p2 <= "0" when (tmp_6_fu_469_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln42_9_fu_495_p2 <= "1" when (trunc_ln42_4_fu_479_p4 = ap_const_lv52_0) else "0";
    icmp_ln42_fu_425_p2 <= "0" when (tmp_fu_411_p4 = ap_const_lv11_7FF) else "1";
    or_ln42_1_fu_533_p2 <= (icmp_ln42_3 or icmp_ln42_2_reg_691);
    or_ln42_2_fu_548_p2 <= (icmp_ln42_5_reg_737 or icmp_ln42_4_reg_732);
    or_ln42_3_fu_552_p2 <= (icmp_ln42_7 or icmp_ln42_6_reg_696);
    or_ln42_4_fu_509_p2 <= (icmp_ln42_9_reg_747 or icmp_ln42_8_reg_742);
    or_ln42_5_fu_513_p2 <= (icmp_ln42_11 or icmp_ln42_10_reg_701);
    or_ln42_fu_529_p2 <= (icmp_ln42_reg_722 or icmp_ln42_1_reg_727);
    position_address0 <= zext_ln39_fu_324_p1(10 - 1 downto 0);

    position_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            position_ce0 <= ap_const_logic_1;
        else 
            position_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_idx_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_q_idx_1),32));
    q_x_fu_386_p1 <= trunc_ln39_3_fu_382_p1;
    q_y_fu_501_p1 <= trunc_ln39_1_reg_712;
    q_z_fu_505_p1 <= trunc_ln39_2_reg_717;
    sum_x_2_out <= sum_x_1_fu_122;

    sum_x_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln37_reg_682_pp0_iter20_reg, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln37_reg_682_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            sum_x_2_out_ap_vld <= ap_const_logic_1;
        else 
            sum_x_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_y_2_out <= sum_y_1_fu_126;

    sum_y_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln37_reg_682_pp0_iter20_reg, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln37_reg_682_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            sum_y_2_out_ap_vld <= ap_const_logic_1;
        else 
            sum_y_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_z_2_out <= sum_z_1_fu_130;

    sum_z_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln37_reg_682_pp0_iter20_reg, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln37_reg_682_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            sum_z_2_out_ap_vld <= ap_const_logic_1;
        else 
            sum_z_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_329_p4 <= position_load(62 downto 52);
    tmp_3_fu_437_p4 <= position_q0(126 downto 116);
    tmp_4_fu_345_p4 <= position_load(126 downto 116);
    tmp_6_fu_469_p4 <= position_q0(190 downto 180);
    tmp_7_fu_361_p4 <= position_load(190 downto 180);
    tmp_fu_411_p4 <= position_q0(62 downto 52);
    trunc_ln39_3_fu_382_p1 <= position_q0(64 - 1 downto 0);
    trunc_ln39_fu_314_p1 <= ap_sig_allocacmp_q_idx_1(10 - 1 downto 0);
    trunc_ln42_2_fu_447_p4 <= position_q0(115 downto 64);
    trunc_ln42_4_fu_479_p4 <= position_q0(179 downto 128);
    trunc_ln42_fu_421_p1 <= position_q0(52 - 1 downto 0);
    zext_ln39_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_318_p2),64));
end behav;
