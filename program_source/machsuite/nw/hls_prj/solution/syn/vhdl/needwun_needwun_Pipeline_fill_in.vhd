-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needwun_needwun_Pipeline_fill_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_load : IN STD_LOGIC_VECTOR (31 downto 0);
    SEQA_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    SEQA_ce0 : OUT STD_LOGIC;
    SEQA_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    SEQB_load : IN STD_LOGIC_VECTOR (7 downto 0);
    add_ln39_3 : IN STD_LOGIC_VECTOR (14 downto 0);
    M_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    M_ce0 : OUT STD_LOGIC;
    M_we0 : OUT STD_LOGIC;
    M_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    M_ce1 : OUT STD_LOGIC;
    M_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln29 : IN STD_LOGIC_VECTOR (13 downto 0);
    zext_ln28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_shl2 : IN STD_LOGIC_VECTOR (14 downto 0);
    ptr_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ptr_ce0 : OUT STD_LOGIC;
    ptr_we0 : OUT STD_LOGIC;
    ptr_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of needwun_needwun_Pipeline_fill_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_5E : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_const_lv7_5C : STD_LOGIC_VECTOR (6 downto 0) := "1011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln29_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln28_cast_fu_177_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_cast_reg_453 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_idx_reg_458 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln29_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln39_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal up_left_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_left_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal up_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal up_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln43_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_1_fu_325_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_1_reg_510 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln45_1_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln30_1_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln40_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal reuse_addr_reg_fu_66 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_idx_2_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln29_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_a_idx : STD_LOGIC_VECTOR (7 downto 0);
    signal max_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_18_fu_214_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_fu_222_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_fu_218_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln39_fu_233_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln29_cast_fu_181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln40_fu_244_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln30_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reuse_select_fu_285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_cast12_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln43_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_fu_350_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln45_fu_353_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln46_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_383_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln46_1_fu_397_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component needwun_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component needwun_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    a_idx_2_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                a_idx_2_fu_74 <= ap_const_lv8_1;
            elsif (((icmp_ln29_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_idx_2_fu_74 <= add_ln29_fu_330_p2;
            end if; 
        end if;
    end process;

    max_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    max_1_fu_78 <= M_load;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    max_1_fu_78 <= max_fu_344_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_66 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_66 <= zext_ln45_1_fu_358_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_70 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_reg_fu_70 <= max_fu_344_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_idx_reg_458 <= ap_sig_allocacmp_a_idx;
                icmp_ln29_reg_464 <= icmp_ln29_fu_208_p2;
                max_reg_515 <= max_fu_344_p3;
                    zext_ln28_cast_reg_453(7 downto 0) <= zext_ln28_cast_fu_177_p1(7 downto 0);
                    zext_ln45_1_reg_520(14 downto 0) <= zext_ln45_1_fu_358_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln45_1_reg_510 <= add_ln45_1_fu_325_p2;
                left_reg_499 <= left_fu_305_p2;
                select_ln43_reg_504 <= select_ln43_fu_317_p3;
                up_left_reg_488 <= up_left_fu_293_p2;
                up_reg_494 <= up_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_208_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln39_reg_473(14 downto 0) <= zext_ln39_fu_239_p1(14 downto 0);
            end if;
        end if;
    end process;
    zext_ln28_cast_reg_453(8) <= '0';
    zext_ln39_reg_473(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    zext_ln45_1_reg_520(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    M_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, zext_ln45_1_reg_520, ap_block_pp0_stage0, zext_ln40_fu_250_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            M_address0 <= zext_ln45_1_reg_520(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_address0 <= zext_ln40_fu_250_p1(15 - 1 downto 0);
        else 
            M_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    M_address1 <= zext_ln39_fu_239_p1(15 - 1 downto 0);

    M_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_ce1 <= ap_const_logic_1;
        else 
            M_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    M_d0 <= max_reg_515;

    M_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            M_we0 <= ap_const_logic_1;
        else 
            M_we0 <= ap_const_logic_0;
        end if; 
    end process;

    SEQA_address0 <= zext_ln30_1_fu_228_p1(7 - 1 downto 0);

    SEQA_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SEQA_ce0 <= ap_const_logic_1;
        else 
            SEQA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln29_fu_330_p2 <= std_logic_vector(unsigned(a_idx_reg_458) + unsigned(ap_const_lv8_1));
    add_ln30_fu_222_p2 <= std_logic_vector(unsigned(empty_18_fu_214_p1) + unsigned(ap_const_lv7_7F));
    add_ln39_fu_233_p2 <= std_logic_vector(unsigned(add_ln39_3) + unsigned(zext_ln30_fu_218_p1));
    add_ln40_fu_244_p2 <= std_logic_vector(unsigned(zext_ln30_fu_218_p1) + unsigned(zext_ln29_cast_fu_181_p1));
    add_ln45_1_fu_325_p2 <= std_logic_vector(unsigned(zext_ln28_cast_reg_453) + unsigned(trunc_ln30_cast12_fu_258_p1));
    add_ln45_fu_353_p2 <= std_logic_vector(unsigned(zext_ln45_fu_350_p1) + unsigned(p_shl2));
    addr_cmp_fu_280_p2 <= "1" when (reuse_addr_reg_fu_66 = zext_ln39_reg_473) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln29_reg_464)
    begin
        if (((icmp_ln29_reg_464 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_a_idx_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, a_idx_2_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_a_idx <= ap_const_lv8_1;
        else 
            ap_sig_allocacmp_a_idx <= a_idx_2_fu_74;
        end if; 
    end process;

    empty_18_fu_214_p1 <= ap_sig_allocacmp_a_idx(7 - 1 downto 0);
    icmp_ln29_fu_208_p2 <= "1" when (ap_sig_allocacmp_a_idx = ap_const_lv8_81) else "0";
    icmp_ln30_fu_261_p2 <= "1" when (SEQA_q0 = SEQB_load) else "0";
    icmp_ln43_1_fu_340_p2 <= "1" when (signed(up_left_reg_488) > signed(select_ln43_reg_504)) else "0";
    icmp_ln43_fu_311_p2 <= "1" when (signed(up_fu_299_p2) > signed(left_fu_305_p2)) else "0";
    icmp_ln46_fu_373_p2 <= "1" when (left_reg_499 = max_fu_344_p3) else "0";
    icmp_ln48_fu_378_p2 <= "1" when (max_fu_344_p3 = up_reg_494) else "0";
    left_fu_305_p2 <= std_logic_vector(unsigned(max_1_fu_78) + unsigned(ap_const_lv32_FFFFFFFF));
    max_fu_344_p3 <= 
        up_left_reg_488 when (icmp_ln43_1_fu_340_p2(0) = '1') else 
        select_ln43_reg_504;
    or_ln46_fu_391_p2 <= (icmp_ln48_fu_378_p2 or icmp_ln46_fu_373_p2);
    ptr_address0 <= zext_ln45_1_fu_358_p1(15 - 1 downto 0);

    ptr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ptr_ce0 <= ap_const_logic_1;
        else 
            ptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ptr_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_1_fu_397_p3),8));

    ptr_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ptr_we0 <= ap_const_logic_1;
        else 
            ptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_285_p3 <= 
        reuse_reg_fu_70 when (addr_cmp_fu_280_p2(0) = '1') else 
        M_q1;
    select_ln39_fu_266_p3 <= 
        ap_const_lv32_1 when (icmp_ln30_fu_261_p2(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    select_ln43_fu_317_p3 <= 
        up_fu_299_p2 when (icmp_ln43_fu_311_p2(0) = '1') else 
        left_fu_305_p2;
    select_ln46_1_fu_397_p3 <= 
        select_ln46_fu_383_p3 when (or_ln46_fu_391_p2(0) = '1') else 
        ap_const_lv7_5C;
    select_ln46_fu_383_p3 <= 
        ap_const_lv7_3C when (icmp_ln46_fu_373_p2(0) = '1') else 
        ap_const_lv7_5E;
    trunc_ln30_cast12_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_idx_reg_458),9));
    up_fu_299_p2 <= std_logic_vector(unsigned(M_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    up_left_fu_293_p2 <= std_logic_vector(unsigned(reuse_select_fu_285_p3) + unsigned(select_ln39_fu_266_p3));
    zext_ln28_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln28),9));
    zext_ln29_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln29),15));
    zext_ln30_1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_222_p2),64));
    zext_ln30_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_a_idx),15));
    zext_ln39_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_233_p2),64));
    zext_ln40_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_244_p2),64));
    zext_ln45_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_353_p2),64));
    zext_ln45_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_reg_510),15));
end behav;
